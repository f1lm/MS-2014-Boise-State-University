2010-07-28 Etsushi Kato <ek.kato@gmail.com>
	
	* tag sigscheme-0.8.5 from sigscheme-0.8 r6609
	
2010-07-28 Etsushi Kato <ek.kato@gmail.com>
	
	* Merge r6600:6608 from sigscheme-trunk
	
2010-07-28 Etsushi Kato <ek.kato@gmail.com>
	
	* Merge r6601 from sigscheme-trunk.
	
2010-07-15 Etsushi Kato <ek.kato@gmail.com>
	
	* Merge r6508 from sigscheme-trunk
	
2010-03-10 Etsushi Kato <ek.kato@gmail.com>
	
	* merge r6239 from sigscheme-trunk.
	
2010-03-10 Etsushi Kato <ek.kato@gmail.com>
	
	* Merge r6237 from trunk.
	
2008-04-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Merge r5445 from trunk
	
2008-04-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Merge r5440-5442 from trunk
	
2008-04-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Merge r5385 from trunk
2008-04-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Merge r5378,5379 from trunk
	
2008-03-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* NEWS
	* RELNOTE
	* configure.in
	* doc/release.txt
	* m4/ax_feature_configurator.m4
	* make-dist.sh
	* src/Makefile.am
	* src/libtool-version.mk
	* src/port.c
	* src/scmport-null.c
	* src/sigscheme.h
	* src/storage-common.h
	* src/symbol.c
	* test/test-string.scm
	  - Merge all diffs from trunk
	    svn merge https://uim.googlecode.com/svn/{branches/sigscheme-0.8,sigscheme-trunk}
	
2008-03-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* COPYING
	* experimental/imm-const/imm-test.c
	* lib/sigscheme-init.scm
	* lib/srfi-0.scm
	* lib/srfi-1.scm
	* lib/srfi-55.scm
	* lib/srfi-95.scm
	* lib/unittest.scm
	* src/alloc.c
	* src/char.c
	* src/config-old.h
	* src/continuation.c
	* src/deep-cadrs.c
	* src/dllentry.c
	* src/encoding-config.h
	* src/encoding-dummy.h
	* src/encoding.c
	* src/encoding.h
	* src/env.c
	* src/error.c
	* src/eval.c
	* src/format.c
	* src/gcroots/gcroots.c
	* src/gcroots/gcroots.h
	* src/global-aggregated.c
	* src/global.h
	* src/legacy-macro.c
	* src/list.c
	* src/load.c
	* src/macro.c
	* src/main.c
	* src/module-siod.c
	* src/module-srfi1.c
	* src/module-srfi2.c
	* src/module-srfi23.c
	* src/module-srfi28.c
	* src/module-srfi34.c
	* src/module-srfi38.c
	* src/module-srfi43.c
	* src/module-srfi48.c
	* src/module-srfi55.c
	* src/module-srfi6.c
	* src/module-srfi60.c
	* src/module-srfi8.c
	* src/module-srfi9.c
	* src/module-sscm-ext.c
	* src/module.c
	* src/number-io.c
	* src/number.c
	* src/port.c
	* src/procedure.c
	* src/promise.c
	* src/qquote.c
	* src/read.c
	* src/scmint.h
	* src/scmport-basechar.c
	* src/scmport-config.h
	* src/scmport-file.c
	* src/scmport-file.h
	* src/scmport-mbchar.c
	* src/scmport-mbchar.h
	* src/scmport-null.c
	* src/scmport-null.h
	* src/scmport-sbchar.c
	* src/scmport-sbchar.h
	* src/scmport-str.c
	* src/scmport-str.h
	* src/scmport.h
	* src/sigscheme-combined.h
	* src/sigscheme.c
	* src/sigscheme.h
	* src/sigschemeinternal.h
	* src/storage-common.h
	* src/storage-compact.h
	* src/storage-fatty.h
	* src/storage-gc.c
	* src/storage.c
	* src/strcasecmp.c
	* src/string-procedure.c
	* src/string.c
	* src/symbol.c
	* src/syntax.c
	* src/template.c
	* src/template.h
	* src/vector.c
	* src/write.c
	* test-c/sscm-test.h
	* test-c/test-alignment.c
	* test-c/test-array2list.c
	* test-c/test-format.c
	* test-c/test-gc-protect-stack.c
	* test-c/test-gc-protect.c
	* test-c/test-gc.c
	* test-c/test-global.c
	* test-c/test-length.c
	* test-c/test-minishell.c
	* test-c/test-storage-compact.c
	* test-c/test-storage.c
	* test-c/test-strcasecmp.c
	* test-c/utils.c
	* test/test-apply.scm
	* test/test-assoc.scm
	* test/test-begin.scm
	* test/test-bool.scm
	* test/test-char-cmp.scm
	* test/test-char-pred.scm
	* test/test-char.scm
	* test/test-continuation.scm
	* test/test-define-internal.scm
	* test/test-define.scm
	* test/test-do.scm
	* test/test-dyn-extent.scm
	* test/test-enc-eucgeneric.scm
	* test/test-enc-eucjp.scm
	* test/test-enc-sjis.scm
	* test/test-enc-utf8.scm
	* test/test-eq.scm
	* test/test-equal.scm
	* test/test-eqv.scm
	* test/test-eval.scm
	* test/test-formal-syntax.scm
	* test/test-formatplus.scm
	* test/test-lambda.scm
	* test/test-legacy-macro.scm
	* test/test-let.scm
	* test/test-letrec.scm
	* test/test-letstar.scm
	* test/test-list.scm
	* test/test-map.scm
	* test/test-member.scm
	* test/test-misc.scm
	* test/test-named-let.scm
	* test/test-number-arith.scm
	* test/test-number-cmp.scm
	* test/test-number-io.scm
	* test/test-number-literal.scm
	* test/test-number-pred.scm
	* test/test-obsolete.scm
	* test/test-pair.scm
	* test/test-promise.scm
	* test/test-quote.scm
	* test/test-srfi0.scm
	* test/test-srfi1-another.scm
	* test/test-srfi1-obsolete.scm
	* test/test-srfi2.scm
	* test/test-srfi28.scm
	* test/test-srfi34-2.scm
	* test/test-srfi34.scm
	* test/test-srfi38.scm
	* test/test-srfi43.scm
	* test/test-srfi48.scm
	* test/test-srfi55.scm
	* test/test-srfi6.scm
	* test/test-srfi60.scm
	* test/test-srfi8.scm
	* test/test-srfi9.scm
	* test/test-sscm-ext.scm
	* test/test-string-cmp.scm
	* test/test-string-core.scm
	* test/test-string-null.scm
	* test/test-string-proc.scm
	* test/test-string.scm
	* test/test-symbol.scm
	* test/test-syntax-rules.scm
	* test/test-syntax.scm
	* test/test-tail-rec.scm
	* test/test-unittest.scm
	* test/test-values.scm
	* test/test-vector.scm
	* tools/build_func_table.rb
	* tools/check_declare_func_typo.rb
	* tools/check_initialize_scm_null.rb
	* tools/functable-header.txt
	* tools/scm_decl.rb
	* tools/summarize_quality.rb
	  - Port the copyright update of r5168 from trunk
	
2007-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-compact.h
	* src/sigscheme.h
	* src/alloc.c
	* src/string-procedure.c
	* test/test-string-proc.scm
	  - Port -r5037:5047 from trunk
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Branch SigScheme 0.8
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/run-singletest.sh.in
	  - (SSCM): Add --system-load-path
	* test-c/sscm-test.h
	  - (TST_MAIN): Add --system-load-path to argv
	* test-c/Makefile.am
	  - (AM_CPPFLAGS): Add -DTST_SCM_SYSTEM_LOAD_PATH
	
	* test-c/test-array2list.c
	  - (null_ary): Removed since unused
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* RELNOTE
	  - Update
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/libtool-version.mk
	  - (libsscm_version): Change to 3:0:0 from 3:0:2 due to the API
	    change of scm_initialize() in r4722
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* doc/spec.txt
	  - Complete new section "SigScheme extensions" and "SIOD compatibility"
	  - Modify about hygienic macros
	* doc/index.txt
	  - Remove obsolete gc-protection.html and test-c.html
	* doc/Makefile.am
	  - (TXTS): Remove obsolete gc-protection.txt and test-c.txt
	  - (ASCIIDOC_HTMLS): Remove obsolete gc-protection.html and test-c.html
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-siod.c
	  - Fix defining '=' as SIOD-compatible version regardless of
	    SCM_COMPAT_SIOD_BUGS
	  - (scm_p_siod_equal): Rename procedure name '=' to '%%siod='
	  - (scm_initialize_siod): Define '=' as alias to '%%siod=' if and only if
	    SCM_COMPAT_SIOD_BUGS
	* NEWS
	  - Update
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-srfi43.scm
	  - Add tests for vector->list, to test real let-vector-start+end use
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] srfi-0.scm
	
	* lib/srfi-0.scm
	  - (%cond-expand-dummy): New macro
	  - (cond-expand): Fix allowing non-toplevel cond-expand placement
	* test/test-srfi0.scm
	  - New file
	  - Add various tests for SRFI-0
	* test/Makefile.am
	  - (sscm_tests): Add test-srfi0.scm
	* lib/unittest.scm
	  - Require SRFI-6 in toplevel cond-expand
	  - Replace (else #t) clauses in cond-expand with (else). It is legally
	    defined in SRFI-0
	  - (obj->literal, string-read): Remove non-toplevel cond-expand
	
2007-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] eval.c
	
	* src/eval.c
	  - (call): Fix non-toplevel definition by a form returned by syntactic
	    closure
	* test/test-legacy-macro.scm
	  - Add various tests "define-macro bad definition placement"
	* QALog
	  - Update
	
2007-09-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] legacy-macro.c, eval.c
	
	* src/legacy-macro.c
	  - (scm_s_define_macro):
	    * Fix defining non-closure value as an ordinary variable
	    * Modify error message
	* src/eval.c
	  - (call): Modify comment
	* test/test-legacy-macro.scm
	  - New file
	  - Add various tests for define-macro
	* test/Makefile.am
	  - (sscm_tests): Add test-legacy-macro.scm
	* QALog
	  - Update
	
2007-09-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/unittest.scm
	  - (test-error): Fix non-toplevel expr evaluation
	
2007-09-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* QALog
	  - Update
	
2007-09-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module-srfi43.c
	
	* lib/srfi-43.scm
	  - (check-indices): Fix an incorrect error message in check-indices
	* test/test-srfi43.scm
	  - New file
	  - Add tests for let-vector-start+end
	* test/Makefile.am
	  - (sscm_tests): Add test-srfi43.scm
	* src/module-srfi43.c
	  - (scm_s_let_vector_start_plus_end): Rename local vars
	* QALog
	  - Update
	
2007-09-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module-srfi9.c
	
	* lib/srfi-9.scm
	  - (eval):
	    * Fix  (real-eval `(lambda (vector?) ,exp)) of the original implementation
	      with (real-eval `(lambda (vector?) ,exp) env)
	    * Suppress overriding of 'eval' since current SigScheme implementation
	      (0.8.0) does not need the vector?  trick. It allows
	      (interaction-environment).
	* test/test-srfi9.scm
	  - New file
	  - Add various tests for SRFI-9
	* test/Makefile.am
	  - (sscm_tests): Add test-srfi9.scm
	* src/module-srfi9.c
	  - (scm_s_srfi9_define_record_type): Simplify
	* src/sigscheme.c
	  - (scm_initialize_internal): Define aliases r5rs:vector? and r5rs:eval
	* doc/spec.txt
	* QALog
	  - Update
	
2007-09-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/unittest.scm
	  - (total-report):
	    * Rename to test-report-result
	    * Redefine as an alias to test-report-result
	  - (test-report-result): Renamed from total-report
	  - (test-true, test-false): New macro
	* test/test-unittest.scm
	  - Add tests for the new macros
	
2007-09-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make unittest.scm system-installed library
	
	* test/unittest.scm
	  - Move to lib/unittest.scm
	* lib/unittest.scm
	  - Moved from test/unittest.scm
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add unittest.scm
	* test/Makefile.am
	  - (EXTRA_DIST): Remove unittest.scm
	* test/oleg-srfi2.scm
	* test/panu-srfi69.scm
	* test/scm-r4rstest.scm
	* test/stone-srfi1.scm
	* test/test-apply.scm
	* test/test-assoc.scm
	* test/test-begin.scm
	* test/test-bool.scm
	* test/test-char-cmp.scm
	* test/test-char-pred.scm
	* test/test-char.scm
	* test/test-continuation.scm
	* test/test-define-internal.scm
	* test/test-define.scm
	* test/test-do.scm
	* test/test-dyn-extent.scm
	* test/test-enc-eucgeneric.scm
	* test/test-enc-eucjp.scm
	* test/test-enc-sjis.scm
	* test/test-enc-utf8.scm
	* test/test-eq.scm
	* test/test-equal.scm
	* test/test-eqv.scm
	* test/test-eval.scm
	* test/test-formal-syntax.scm
	* test/test-formatplus.scm
	* test/test-lambda.scm
	* test/test-let.scm
	* test/test-letrec.scm
	* test/test-letstar.scm
	* test/test-list.scm
	* test/test-map.scm
	* test/test-member.scm
	* test/test-misc.scm
	* test/test-named-let.scm
	* test/test-number-arith.scm
	* test/test-number-cmp.scm
	* test/test-number-io.scm
	* test/test-number-literal.scm
	* test/test-number-pred.scm
	* test/test-obsolete.scm
	* test/test-pair.scm
	* test/test-promise.scm
	* test/test-quote.scm
	* test/test-srfi1-another.scm
	* test/test-srfi1-obsolete.scm
	* test/test-srfi2.scm
	* test/test-srfi28.scm
	* test/test-srfi34-2.scm
	* test/test-srfi34.scm
	* test/test-srfi38.scm
	* test/test-srfi48.scm
	* test/test-srfi55.scm
	* test/test-srfi6.scm
	* test/test-srfi60.scm
	* test/test-srfi8.scm
	* test/test-sscm-ext.scm
	* test/test-string-cmp.scm
	* test/test-string-core.scm
	* test/test-string-null.scm
	* test/test-string-proc.scm
	* test/test-string.scm
	* test/test-symbol.scm
	* test/test-syntax-rules.scm
	* test/test-syntax.scm
	* test/test-tail-rec.scm
	* test/test-unittest.scm
	* test/test-values.scm
	* test/test-vector.scm
	* test/unittest-bigloo.scm
	* test/unittest-gauche.scm
	  - Replace (load "test/unittest.scm") with (require-extension (unittest))
	* NEWS
	  - Update
	
2007-09-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/unittest.scm
	  - Add SRFI-64 compatibilities
	  - (test-begin, test-end, test-assert, test-equal, test-eqv, test-eq,
	    %test-equal, test-error, ): New macro
	  - (%test-equal2, test-read-eval-string): New procedure
	* test/test-unittest.scm
	  - New file
	  - Add various tests for the SRFI-64 compatibilities of unittest.scm
	* test/Makefile.am
	  - (sscm_tests): Add test-unittest.scm
	
2007-09-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/unittest.scm
	  - Require SRFI-23 and SRFI-34 if sigscheme
	  - (obj->literal, string-read): Require SRFI-6 with cond-expand if sigscheme
	
2007-09-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-0.scm
	  - (cond-expand): Fix not-matched case #f with explicit error
	
2007-09-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-0.scm
	  - Make SRFI-1 unneeded
	  - (%cond-expand-feature?, cond-expand): Replace SRFI-1
	    expressions with R5RS ones
	
2007-09-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-0.scm
	  - New file
	  - (%cond-expand-feature?): New procedure
	  - (cond-expand): New macro
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add srfi-0.scm
	* src/sigscheme.c
	  - (scm_initialize_internal): Enable SRFI-0 if available
	* configure.in
	  - Add --enable-srfi0
	* sigscheme.pc.in
	  - (sscm_srfi0, sscm_srfi9, sscm_srfi43, sscm_srfi69, sscm_srfi95): New
	    variable
	* doc/spec.txt
	* README
	* NEWS
	* RELNOTE
	  - Update
	
2007-09-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-srfi9.c
	  - (l_proc_car): New static variable
	  - (scm_initialize_srfi9): Add initialization for l_proc_car
	  - (scm_s_srfi9_define_record_type): Fix field tags collection
	
2007-08-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add SRFI-43. Basically working, but not tested yet
	
	* src/sigschemeinternal.h
	  - (scm_initialize_srfi43): New function decl
	* src/module-srfi43.c
	  - New file
	  - (scm_initialize_srfi43, scm_s_let_vector_start_plus_end): New function
	  - (QUOTE): New macro
	  - (l_sym_vector_parse_start_plus_end, l_sym_check_type, l_sym_vectorp): New
	    static variable
	* src/module.c
	  - (module_info_table): Add srfi-43
	* src/Makefile.am
	  - Add generation rule for functable-srfi43.c
	  - (FUNC_TABLES): Add functable-srfi43.c
	  - (libsscm_sources): Add module-srfi43.c
	* lib/srfi-43.scm
	  - New file copied from vendor/misc/vector-lib.scm
	  - Adapted to SigScheme
	  - (receive, let*-optionals, let*-optionals:aux, let-vector-start+end):
	    Comment out
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add srfi-43.scm
	* configure.in
	  - Add --enable-srfi43
	  - Add lacking 'vector' dependency of srfi9
	* COPYING
	* QALog
	* README
	* NEWS
	* RELNOTE
	  - Update
	
2007-08-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/continuation.c
	  - (JMP_BUF, SETJMP, LONGJMP): New macro
	  - (struct scm_continuation_frame, scm_call_with_current_continuation,
	    scm_call_continuation): Use sigsetjmp(3) and siglongjmp(3) if available
	* m4/ax_func_sigsetjmp.m4
	  - New file copied from trunk/m4/ax_func_sigsetjmp.m4
	* m4/Makefile.am
	  - (EXTRA_DIST): Add ax_func_sigsetjmp.m4
	* configure.in
	  - Add AX_FUNC_SIGSETJMP
	* QALog
	* NEWS
	  - Update
	
2007-08-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit simplify the C array <-> Scheme list conversion functions
	
	* src/sigscheme.h
	* src/sigscheme.c
	  - (scm_array2list): Rename 2nd arg to appropriate one
	  - (scm_list2array): New function
	  - (scm_null_term_array2list, scm_list2null_term_array): Removed
	* test-c/test-array2list.c
	  - Remove tests for scm_null_term_array2list() and scm_list2null_term_array()
	  - Add tests for scm_list2array()
	* QALog
	* NEWS
	* RELNOTE
	* README
	  - Update
	
2007-08-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/legacy-macro.c
	  - (scm_s_define_macro): Fix an argument passing
	
2007-08-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add define-macro. Implementation is done and basically working,
	  but not well tested yet
	
	* src/sigscheme.h
	  - (SCM_SYNTACTIC_OBJECTP): Add SCM_SYNTACTIC_CLOSUREP()
	  - (SCM_SYNTACTIC_CLOSURE_ENV, SCM_SYNTACTIC_CLOSUREP): New macro
	  - (scm_syntactic_closure_env): New variable decl
	  - (scm_s_define_macro): New function decl
	* src/sigschemeinternal.h
	  - (SYNTACTIC_CLOSUREP): New macro
	  - (scm_init_legacy_macro): New function decl
	* src/legacy-macro.c
	  - New file
	  - (scm_init_legacy_macro, scm_s_define_macro): New function
	* src/eval.c
	  - (call): Add syntactic closure hack
	* src/write.c
	  - (write_obj): Support #<syntactic closure ...>
	* src/sigscheme.c
	  - (scm_initialize_internal): Add scm_init_legacy_macro()
	* src/Makefile.am
	  - (FUNC_TABLES): Add functable-legacy-macro.c
	  - (libsscm_sources): Add legacy-macro.c
	* configure.in
	  - Add --enable-legacy-macro and enable it by default
	* sigscheme.pc.in
	  - Add sscm_legacy_macro variable
	* QALog
	  - Add legacy-macro.c entry
	* NEWS
	  - Update
	
2007-08-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/string.c
	  - (scm_p_string_length): Fix string-length on multibyte string invalidly
	    counted based on current char codec. It is inconsistent with string length
	    recorded in string object
	* src/sigscheme.h
	  - (scm_p_string_reconstructx): New function decl
	* src/string-procedure.c
	  - (scm_p_string_reconstructx): New function
	* test/test-string-proc.scm
	  - Add tests for %%string-reconstruct!
	* QALog
	* NEWS
	  - Update
	
2007-08-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/read.c
	  - (read_quoted): Fix reading unterminated quote as (quote #<eof>)
	* test/test-formal-syntax.scm
	  - Add tests for unterminated quotes
	* NEWS
	  - Update
	
2007-08-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (scm_array2list, scm_null_term_array2list, scm_list2null_term_array): New
	    function decl
	* src/sigscheme.c
	  - (scm_array2list, scm_null_term_array2list, scm_list2null_term_array): New
	    function
	* test-c/test-array2list.c
	  - New file
	  - Add tests for the new functions
	* test-c/Makefile.am
	  - Add test-array2list.c
	* NEWS
	* QALog
	  - Update
	
2007-08-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* doc/spec.txt
	  - Add subsections for SRFI-9 and SRFI-69
	
2007-08-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* QALog
	  - Update
	
2007-08-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-gc.c
	  - (scm_gc_protectedp): Make storage-compact case efficient
	* test-c/sscm-test.h
	  - (main): Follow the argument addition of scm_initialize()
	* test-c/test-minishell.c
	  - (main): Ditto
	* QALog
	* TODO
	  - Update
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Add --enable-srfi69 and --enable-srfi95 and required dependencies
	* lib/Makefile.am
	  - Make srfi-*.scm installation optional
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Simplify
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* call-with-input-file, call-with-output-file, with-input-from-file and
	  with-output-to-file are re-implemented in lib/sigscheme-init.scm. The
	  standard current ports handling on with-input-from-file and
	  with-output-to-file are now continuation-safe by dynamic-wind
	
	* src/sigscheme.h
	* src/port.c
	  - (scm_p_call_with_input_file, scm_p_call_with_output_file,
	    scm_p_with_input_from_file, scm_p_with_output_to_file): Removed
	* lib/sigscheme-init.scm
	  - (call-with-input-file, call-with-output-file, with-input-from-file,
	    with-output-to-file): New procedure replaces corresponding C functions
	* NEWS
	  - Update
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (scm_p_current_error_port, scm_p_set_current_input_portx,
	    scm_p_set_current_output_portx, scm_p_set_current_error_portx): New
	    function decl
	* src/port.c
	  - (scm_p_current_error_port, scm_p_set_current_input_portx,
	    scm_p_set_current_output_portx, scm_p_set_current_error_portx): New
	    function
	* NEWS
	  -- Update
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/panu-srfi69.scm
	  - New file copied from vendor/misc/test-hash.ss
	  - Adapted to SigScheme
	* test/Makefile.am
	  - (imported_tests): Add panu-srfi69.scm as comment
	* runtest.sh
	  - Add panu-srfi69.scm
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/write.c
	  - (hash_grow):
	    * Fix misinitialized keys with SCM_INVALID. Original implementation assumed
	      that SCM_INVALID == 0 and so only initialized by calloc()
	    * Replace scm_calloc() with scm_malloc() for efficiency
	  - (write_ss_internal): Replace scm_calloc() with scm_malloc() for efficiency
	* NEWS
	* QALog
	  - Update
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* TODO
	  - Update
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-vector.scm
	  - Fix incorrect comparison for numbers that errors on storage-fatty
	
	* test/test-srfi1-obsolete.scm
	  - Comment out invalid tests that errors on storage-fatty
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-fatty.h
	  - (SCM_ISAL_CELL_RECLAIM_CELL): Fix removed macro with SCM_ISAL_CELL_UNMARK()
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-compact.h
	  - (SCM_UNTAG_PTR): Add ScmCell alignment assertion
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigschemeinternal.h
	  - (SCM_MARKEDP, SCM_UNMARKEDP, SCM_MARK, SCM_UNMARK): Removed
	* src/storage-common.h
	  - (SCM_MARKEDP, SCM_MARK, SCM_CELL_MARKEDP, SCM_CELL_UNMARK): New macro
	    defined with SCM_TYPESAFE_MACRO
	* src/storage-compact.h
	  - (SCM_SAL_MARK, SCM_SAL_UNMARK, SCM_SAL_MARKEDP, SCM_SAL_UNMARKEDP): Removed
	  - (SCM_ISAL_MARKEDP, SCM_ISAL_MARK, SCM_ISAL_CELL_MARKEDP,
	    SCM_ISAL_CELL_UNMARK): New macro
	* src/storage-fatty.h
	  - (SCM_SAL_MARKEDP, SCM_SAL_UNMARKEDP, SCM_SAL_MARK, SCM_SAL_UNMARK): Removed
	  - (SCM_ISAL_MARKEDP, SCM_ISAL_MARK, SCM_ISAL_CELL_MARKEDP,
	    SCM_ISAL_CELL_UNMARK): New macro
	* src/storage-gc.c
	  - (gc_sweep): Simplify with SCM_CELL_MARKEDP() and SCM_CELL_UNMARK()
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-compact.h
	  - (SCM_ISAL_CELL_RECLAIM_CELL): Remove fablicated-ScmObj acception
	* src/storage-gc.c
	  - (add_heap): Optimize
	
2007-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-gc.c
	  - (SCM_BEGIN_GC_SUBCONTEXT, SCM_END_GC_SUBCONTEXT): New macro
	  - (l_gcing, l_allocating): New static variables
	  - (scm_ensure_proper_freelist): New static function
	  - (scm_init_gc): Add initialization for the variables
	  - (scm_alloc_cell, add_heap, gc_mark_and_sweep, gc_mark_protected_var,
	    gc_mark_locations_n, gc_mark_definite_locations_n, gc_mark_locations,
	    gc_mark, gc_mark_global_vars, gc_sweep): Add assertions for proper cell
	    allocation
	
2007-08-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-69.scm
	  - Fix latest source URLs
	
2007-08-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigschemeinternal.h
	  - (SCM_RECLAIM_CELL): Removed
	* src/storage-common.h
	  - (SCM_CELL_FREECELLP, SCM_CELL_RECLAIM_CELL): New macro
	* src/storage-compact.h
	  - (SCM_INIT, SCM_SAL_FREECELL_NEXT): Add SCM_DROP_TAG(o) to accept proper
	    FreeCell object. This is required to make scm_gc_protectedp() working
	  - (SCM_SAL_RECLAIM_CELL): Removed
	  - (SCM_ISAL_CELL_FREECELLP, SCM_ISAL_CELL_RECLAIM_CELL): New macro
	* src/storage-fatty.h
	  - (SCM_SAL_RECLAIM_CELL): Removed
	  - (SCM_ISAL_CELL_FREECELLP, SCM_ISAL_CELL_RECLAIM_CELL): New macro
	* src/storage-gc.c
	  - (scm_gc_protectedp): Fix broken freecell detection on storage-compact
	  - (add_heap): Follow the change of SCM_RECLAIM_CELL() ->
	    SCM_CELL_RECLAIM_CELL()
	  - (gc_sweep):
	    * Ditto
	    * Fix duplicated freecell linking on scm_gc_protectedp()
	
2007-07-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* COPYING
	  - Add entry for srfi-9.scm and srfi-69.scm
	
	* lib/srfi-69.scm
	  - Add latest source URLs
	
2007-07-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add SRFI-69, but validation is not done yet
	
	* lib/srfi-69.scm
	  - Move the license terms to head
	  - require-extension SRFI-9 and SRFI-23
	  - (expt, inexact?, real?): New procedure
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add srfi-69.scm
	* README
	* RELNOTE
	* NEWS
	  - Update
	
2007-07-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	 * lib/srfi-69.scm
	  - New file copied from vendor/misc/srfi-69.html
	  - Trim the reference implementation code in the HTML
	
2007-07-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add SRFI-9, but validation is not done yet
	
	* src/sigscheme.h
	  - (scm_s_srfi9_define_record_type): New function decl
	* src/sigschemeinternal.h
	  - (scm_initialize_srfi9): New function decl
	* src/module-srfi9.c
	  - New file
	  - (ERRMSG_MISPLACED_RECORD_DEFINITION, SYMBOL_VALUE): New macro
	  - (l_proc_make_record_type; l_proc_record_constructor,
	    l_proc_record_predicate, l_proc_record_accessor, l_proc_record_modifier):
	    New static variable
	  - (scm_initialize_srfi9, scm_s_srfi9_define_record_type): New function
	  - (define_record_field): New static function
	* src/module.c
	  - (module_info_table): Add SRFI-9 entry
	* src/Makefile.am
	  - (FUNC_TABLES): Add functable-srfi9.c
	  - (libsscm_sources): Add module-srfi9.c
	* lib/srfi-9.scm
	  - (define-record-type, define-record-field): Comment out and replaced by
	    module-srfi9.c
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add srfi-9.scm
	* configure.in
	  - Add --enable-srfi9
	* README
	* NEWS
	  - Update
	
2007-07-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-9.scm
	  - Move the license terms to head
	  - Move "Records" section to the above of "Record types"
	    section to fix undefined 'make-record' error
	
2007-07-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-9.scm
	  - New file copied from vendor/misc/srfi-9.html
	  - Trim the reference implementation code in the HTML
	
2007-07-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit renames possibly conflict type names. See [uim-ja 22] and [uim-ja
	  23]
	
	* src/read.c
	  - (enum LexerState, enum ScmLexerState): Renamed
	* src/write.c
	  - (enum OutputType, enum ScmOutputType): Ditto
	  - (hash_entry, scm_hash_entry): Ditto
	  - (hash_table, scm_hash_table): Ditto
	  - (write_ss_context, scm_write_ss_context): Ditto
	* src/format.c
	  - (enum format_args_type, enum scm_format_args_type): Ditto
	  - (struct format_args, struct scm_format_args): Ditto
	* src/continuation.c
	  - (struct continuation_frame, struct scm_continuation_frame): Ditto
	
2007-07-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (SSCM_VERSION_STRING): New macro
	* src/module-sscm-ext.c
	  - (scm_p_sscm_version): Fix PACKAGE_VERSION with SSCM_VERSION_STRING to
	    prevent being overridden by a master package such as uim
	
2007-07-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Disable hygienic macros by default in all configurations but 'dev' since it
	    has a considerable bug (such as infinite loop on test-srfi1-another.scm)
	* test/test-srfi1-another.scm
	  - Fix invalid comparisons
	* NEWS
	* TODO
	  - Update
	
2007-07-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/number-io.c
	  - (scm_string2number): Fix overflow error by a long number with #f
	* test/test-number-io.scm
	  - Follow the specification change
	* QALog
	* NEWS
	  - Update
	
2007-07-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* runtest.sh
	  - Follow the replacement of test-r4rs.scm
	
2007-07-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-r4rs.scm
	  - Removed and replaced with scm-r4rstest.scm
	* test/scm-r4rstest.scm
	  - Fix the literals '4.0' in test-inexact with 'f4.0'
	  - Disable tests for case-insensitivity of identifiers
	  - Disable tests for complex?, real?, rational?, exact?, inexact?, expt, gcd,
	    lcm
	  - Disable test progress printings
	  - Disable type-matrix printings
	  - Enable symbol? tests of (SECTION 6 4)
	  - Enable (test-sc4) and (test-delay)
	* test/Makefile.am
	  - (imported_tests): Replace test-r4rs.scm with scm-r4rstest.scm
	* COPYING
	* TODO
	  - Update
	
2007-07-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/scm-r4rstest.scm
	  - New file copied from vendor/misc/r4rstest.scm
	
2007-07-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* doc/release.txt
	* TODO
	  - Update
	
2007-07-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* make-dist.sh
	  - (SSCM_REPOSITORY): Update to 0.8.0
	  - (LIBGCROOTS_URL): Update to 0.2.0
	
	* doc/release.txt
	  - Fix incorrect examples
	
2007-07-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-55.scm
	  - Add lacking license terms
	* COPYING
	  - Add license terms for srfi-1.scm, srfi-95.scm and oleg-srfi2.scm
	
2007-07-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* NEWS
	  - Merge update of 0.7.5
	
2007-07-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* doc/spec.txt
	  - Describe the problem about current macro implementation
	* TODO
	* NEWS
	* RELNOTE
	  - Update for 0.8.0
	
2007-07-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Modify a message
	
	* sigscheme.pc.in
	  - (sscm_srfi55): New variable
	
2007-07-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigschemeinternal.h
	  - (scm_init_promise): New function decl
	* src/promise.c
	  - Include functable-r5rs-promise.c
	  - (PROMISE_FORCEDP): New macro
	  - (l_tag_unforced): New static variable
	  - (scm_init_promise): New function
	  - (scm_s_delay, scm_p_force): Implement
	* src/sigscheme.c
	  - (scm_initialize_internal): Add scm_init_promise()
	  - Move functable-r5rs-promise.c inclusion to promise.c
	* test/test-promise.scm
	  - New file
	  - Add R5RS examples as tests
	* test/test-r4rs.scm
	  - Enable test-delay
	* test/bigloo-letrec.scm
	  - Disable implementation-dependent test for R5RS promises
	* configure.in
	  - Enable promise by default
	  - Enable promise by default for conf=uim
	* doc/spec.txt
	* QALog
	* NEWS
	  - Update
	
2007-07-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/stone-srfi1.scm
	  - Disable (make-list 5) since its result is undefined in SRFI-1
	
2007-07-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/gcroots/gcroots.h
	  - (GCROOTS_VERSION_MINOR, GCROOTS_VERSION_PATCHLEVEL, GCROOTS_API_REVISION):
	    Update to libgcroots 0.2.0
	  - (GCROOTS_is_protected_context, GCROOTS_is_protected): New function decl
	* src/gcroots/gcroots.c
	  - (l_findee, l_found): New static variables
	  - (GCROOTS_init): Add static variables initialization
	  - (GCROOTS_is_protected_context, GCROOTS_is_protected): New function
	  - (find_obj): New static function
	* QALog
	  - Update
	
2007-07-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/gcroots/gcroots.c
	  - (GCROOTS_fin, GCROOTS_call_with_gc_ready_stack,
	    GCROOTS_mark): Add precondition for args
	
2007-07-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* doc/Makefile.am
	  - (TXTS): Add multibyte.txt
	  - (ASCIIDOC_HTMLS): Add multibyte.html
	* doc/multibyte.txt
	  - New file
	  - Describe about multibyte character processing in SigScheme
	* doc/index.txt
	* NEWS
	  - Update
	
	* doc/spec.txt
	  - Separate "R6RS conformance" section
	
2007-07-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.c
	  - (scm_initialize_internal): Replace scm_use() with scm_require_module()
	* src/module-srfi34.c
	  - (scm_initialize_srfi34): Ditto
	* src/module-siod.c
	  - (scm_initialize_siod): Ditto
	* src/main.c
	  - (main): Ditto
	* lib/srfi-1.scm
	  - Replace 'use' with 'require-extension'
	* test/unittest.scm
	  - (obj->literal, string-read): Replace 'use' with '%%require-module
	* test/gauche-euc-jp.scm
	* test/gauche-let-optionals.scm
	* test/gauche-primsyn.scm
	* test/oleg-srfi2.scm
	* test/stone-srfi1.scm
	* test/test-formatplus.scm
	* test/test-list.scm
	* test/test-srfi1-another.scm
	* test/test-srfi1-obsolete.scm
	* test/test-srfi2.scm
	* test/test-srfi28.scm
	* test/test-srfi34-2.scm
	* test/test-srfi34.scm
	* test/test-srfi38.scm
	* test/test-srfi48.scm
	* test/test-srfi6.scm
	* test/test-srfi60.scm
	* test/test-srfi8.scm
	* test/test-sscm-ext.scm
	* test/test-string-proc.scm
	* test/test-tail-rec.scm
	* test/test-vector.scm
	  - Replace 'use' with 'require-extension'
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-1.scm
	  - (make-list): Change default value to #<undef>
	
	* test/test-eval.scm
	  - Update hand-made env tests relaxed when let-optionals* had been introduced
	
	* test/test-member.scm
	* test/test-assoc.scm
	  - Fix unique object definition
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-1.scm
	  - (%srfi-1:undefined): New variable
	  - (for-each): Returen #<undef>
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add --system-load-path option to sscm to allow non-installed
	  execution
	
	* src/sigscheme.h
	  - (scm_initialize):
	    * Add 2nd arg 'argv' to specify options
	    * Return option-removed argv
	  - (scm_set_system_load_path, scm_p_system_load_path): New function decl
	  - (scm_p_scmlibdir): Removed
	* src/sigscheme.c
	  - (scm_initialize):
	    * Add 2nd arg 'argv' to specify options
	    * Return option-removed argv
	  - (scm_initialize_internal):
	    * Ditto
	    * Add scm_interpret_argv() invocation
	    * Move scm_init_port() to after the scm_interpret_argv() invocation
	    * Rewrite with scm_load_system_file()
	  - (argv_err): New static function
	  - (scm_interpret_argv):
	    * Add new option --system-load-path
	    * Simplify with argv_err()
	* src/sigschemeinternal.h
	  - (SCM_PREPEND_SCMLIBDIR): Removed
	  - (scm_load_system_file): New function decl
	* src/load.c
	  - (l_scm_system_load_path): New static variable
	  - (scm_fin_load): Add l_scm_system_load_path handlings
	  - (scm_load_system_file, scm_set_system_load_path, scm_p_system_load_path):
	    New function
	* src/module-srfi1.c
	  - (scm_initialize_srfi1): Rewrite with scm_load_system_file()
	* src/module-srfi55.c
	  - (scm_initialize_srfi55): Ditto
	* src/module-sscm-ext.c
	  - (scm_p_scmlibdir): Removed
	* src/main.c
	  - (main): Follow the change of scm_initialize()
	* lib/srfi-55.scm
	  - (%require-sysfile): Rewrite with %%system-load-path
	* runtest.sh
	* runtest-tail-rec.sh
	* runbench.sh
	  - Add --system-load-path $PWD/lib for sscm to allow non-installed execution
	* QALog
	* NEWS
	* TODO
	  - Update
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/slib.scm
	  - Removed since outdated
	* lib/Makefile.am
	  - (EXTRA_DIST): Remove slib.scm
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-95.scm
	  - (array?, identity): New procedure
	  - Adapt to SigScheme
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add srfi-95.scm
	* doc/spec.txt
	* README
	* NEWS
	  - Describe about SRFI-95
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-95.scm
	  - New file copied from vendor/slib/sort.scm (revision 1.14)
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-sscm-ext.scm
	  - Add test for sscm-version
	* src/sigscheme.h
	  - (scm_p_sscm_version): New function decl
	* src/module-sscm-ext.c
	  - (scm_p_sscm_version): New function
	* NEWS
	* TODO
	  - Update
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/vector.c
	  - (scm_p_vector_mutablep): Rename %vector-mutable? with %%vector-mutable?
	* src/module-sscm-ext.c
	  - (scm_p_pair_mutablep): Rename %pair-mutable? with %%pair-mutable?
	* src/string-procedure.c
	  - (scm_p_string_mutablep): Rename %string-mutable? with %%string-mutable?
	* test/test-string-proc.scm
	* test/test-vector.scm
	  - Follow the renamings
	* NEWS
	  - Modify the description about the procedures
	
2007-07-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add SRFI-55
	
	* src/sigscheme.h
	  - (scm_require_module, scm_p_require_module, scm_p_scmlibdir,
	    scm_s_srfi55_require_extension): New function decl
	* src/sigschemeinternal.h
	  - (scm_initialize_srfi55): New function decl
	* src/module.c
	  - (module_info_table): Add "srfi-55"
	  - (scm_s_use): Simplify with scm_p_require_module()
	  - (scm_require_module_internal): New static function
	  - (scm_require_module, scm_p_require_module): New function
	* src/module-srfi55.c
	  - New file
	  - (l_sym_require_extension): New static variable
	  - (scm_initialize_srfi55, scm_s_srfi55_require_extension): New function
	* src/module-sscm-ext.c
	  - (scm_p_scmlibdir): New function
	* src/sigscheme.c
	  - (scm_initialize_internal): Enable SRFI-55 by default
	* src/Makefile.am
	  - (FUNC_TABLES): Add functable-srfi55.c
	  - (libsscm_sources): Add module-srfi55.c
	* lib/srfi-55.scm
	  - New file
	  - (%require-extension-alist): New variable
	  - (%require-extension-handler-srfi, %require-sysfile, %require-extension):
	    New procedure
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add srfi-55.scm
	* test/test-srfi55.scm
	  - New file
	  - Add tests for require-extension
	* test/Makefile.am
	  - (sscm_tests): Add test-srfi55.scm
	* configure.in
	  - Add SRFI-55 configuration
	* doc/spec.txt
	* QALog
	* README
	* NEWS
	  - Update
	
2007-07-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/char.c
	  - (scm_p_integer2char): Fix NUL rejection on non-Unicode codec
	
2007-07-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.c
	  - (scm_initialize_internal):
	    * Make sigscheme-init.scm optional
	    * Replace scm_require() with scm_load() to reduce feature dependency
	* src/module-srfi1.c
	  - (scm_initialize_srfi1): Ditto
	
2007-07-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/sigscheme-init.scm
	  - (%%load): New alias for C implementation of 'load'
	  - (load): New procedure
	
2007-07-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add new character codec procedure with-char-codec
	
	* src/sigschemeinternal.h
	  - (SCM_PREPEND_SCMLIBDIR): New macro
	* src/sigscheme.c
	  - (scm_initialize_internal): Require sigscheme-init.scm
	* src/module-srfi1.c
	  - (scm_initialize_srfi1): Rewrite with SCM_PREPEND_SCMLIBDIR()
	* lib/Makefile.am
	  - (dist_scmlib_DATA): Add sigscheme-init.scm
	* lib/sigscheme-init.scm
	  - New file
	  - (%with-guarded-char-codec, with-char-codec): New procedure
	* test/test-sscm-ext.scm
	  - Add tests for with-char-codec
	* NEWS
	  - Update
	
2007-07-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add new character codec procedures %%current-char-codec and
	  %%set-current-char-codec!
	
	* src/sigscheme.h
	  - (scm_p_current_char_codec, scm_p_set_current_char_codecx): New function
	    decl
	* src/module-sscm-ext.c
	  - (scm_p_current_char_codec, scm_p_set_current_char_codecx): New function
	* src/sigscheme.c
	  - (ERRMSG_UNSUPPORTED_ENCODING, ERRMSG_CODEC_SW_NOT_SUPPORTED): Moved to
	    sigschemeinternal.h
	* src/sigschemeinternal.h
	  - (ERRMSG_UNSUPPORTED_ENCODING, ERRMSG_CODEC_SW_NOT_SUPPORTED): Moved from
	    sigscheme.c
	* test/test-sscm-ext.scm
	  - Add tests for %%current-char-codec and %%set-current-char-codec!
	* NEWS
	  - Update
	
2007-07-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-srfi1.scm
	  - Rename to test-srfi1-obsolete.scm
	* test/test-srfi1-obsolete.scm
	  - Renamed from test-srfi1.scm
	  - Move lset tests to test-srfi1-another.scm
	* test/test-srfi1-another.scm
	  - Moved lset tests from test-srfi1-obsolete.scm
	* test/Makefile.am
	  Follow the file renaming
	
2007-07-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/procedure.c
	  - (scm_map_multiple_args): Cosmetic change
	
2007-07-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add C version of SRFI-1 map, map-in-order
	
	* src/sigscheme.h
	  - (scm_p_srfi1_map_in_order): New function decl
	* src/sigschemeinternal.h
	  - (scm_map_single_arg, scm_map_multiple_args): New function decl
	* src/procedure.c
	  - (ERRMSG_UNEVEN_MAP_ARGS): Modify message
	  - (map_single_arg): Rename to scm_map_single_arg()
	  - (scm_map_single_arg): Renamed from map_single_arg()
	  - (map_multiple_args): Rename to scm_map_multiple_args()
	  - (scm_map_multiple_args):
	    * Renamed from map_multiple_args()
	    * Add arg 'allow_uneven_lists' for SRFI-1 map and skip list length equality
	      check if it is true
	* src/module-srfi1.c
	  - (scm_p_srfi1_map_in_order): New function
	  - (scm_initialize_srfi1): Overwrite srfi-1:map and map by map-in-order
	* lib/srfi-1.scm
	  - (for-each): Refer map-in-order directly to allow C version of it
	
2007-07-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-srfi1-another.scm
	  - Add tests for take, map, map-in-order
	
2007-07-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* COPYING
	* experimental/imm-const/imm-test.c
	* lib/slib.scm
	* src/alloc.c
	* src/char.c
	* src/config-old.h
	* src/continuation.c
	* src/deep-cadrs.c
	* src/dllentry.c
	* src/encoding-config.h
	* src/encoding-dummy.h
	* src/encoding.c
	* src/encoding.h
	* src/env.c
	* src/error.c
	* src/eval.c
	* src/format.c
	* src/gcroots/gcroots.c
	* src/gcroots/gcroots.h
	* src/global-aggregated.c
	* src/global.h
	* src/list.c
	* src/load.c
	* src/macro.c
	* src/main.c
	* src/module-siod.c
	* src/module-srfi1.c
	* src/module-srfi2.c
	* src/module-srfi23.c
	* src/module-srfi28.c
	* src/module-srfi34.c
	* src/module-srfi38.c
	* src/module-srfi48.c
	* src/module-srfi6.c
	* src/module-srfi60.c
	* src/module-srfi8.c
	* src/module-sscm-ext.c
	* src/module.c
	* src/number-io.c
	* src/number.c
	* src/port.c
	* src/procedure.c
	* src/promise.c
	* src/qquote.c
	* src/read.c
	* src/scmint.h
	* src/scmport-basechar.c
	* src/scmport-config.h
	* src/scmport-file.c
	* src/scmport-file.h
	* src/scmport-mbchar.c
	* src/scmport-mbchar.h
	* src/scmport-null.c
	* src/scmport-null.h
	* src/scmport-sbchar.c
	* src/scmport-sbchar.h
	* src/scmport-str.c
	* src/scmport-str.h
	* src/scmport.h
	* src/sigscheme-combined.h
	* src/sigscheme.c
	* src/sigscheme.h
	* src/sigschemeinternal.h
	* src/storage-common.h
	* src/storage-compact.h
	* src/storage-fatty.h
	* src/storage-gc.c
	* src/storage.c
	* src/strcasecmp.c
	* src/string-procedure.c
	* src/string.c
	* src/symbol.c
	* src/syntax.c
	* src/template.c
	* src/template.h
	* src/vector.c
	* src/write.c
	* test-c/sscm-test.h
	* test-c/test-alignment.c
	* test-c/test-format.c
	* test-c/test-gc-protect-stack.c
	* test-c/test-gc-protect.c
	* test-c/test-gc.c
	* test-c/test-global.c
	* test-c/test-length.c
	* test-c/test-minishell.c
	* test-c/test-storage-compact.c
	* test-c/test-storage.c
	* test-c/test-strcasecmp.c
	* test-c/utils.c
	* test/test-apply.scm
	* test/test-assoc.scm
	* test/test-begin.scm
	* test/test-bool.scm
	* test/test-char-cmp.scm
	* test/test-char-pred.scm
	* test/test-char.scm
	* test/test-continuation.scm
	* test/test-define-internal.scm
	* test/test-define.scm
	* test/test-do.scm
	* test/test-dyn-extent.scm
	* test/test-enc-eucgeneric.scm
	* test/test-enc-eucjp.scm
	* test/test-enc-sjis.scm
	* test/test-enc-utf8.scm
	* test/test-eq.scm
	* test/test-equal.scm
	* test/test-eqv.scm
	* test/test-eval.scm
	* test/test-formal-syntax.scm
	* test/test-formatplus.scm
	* test/test-lambda.scm
	* test/test-let.scm
	* test/test-letrec.scm
	* test/test-letstar.scm
	* test/test-list.scm
	* test/test-map.scm
	* test/test-member.scm
	* test/test-misc.scm
	* test/test-named-let.scm
	* test/test-number-arith.scm
	* test/test-number-cmp.scm
	* test/test-number-io.scm
	* test/test-number-literal.scm
	* test/test-number-pred.scm
	* test/test-obsolete.scm
	* test/test-pair.scm
	* test/test-quote.scm
	* test/test-srfi1-another.scm
	* test/test-srfi1.scm
	* test/test-srfi2.scm
	* test/test-srfi28.scm
	* test/test-srfi34-2.scm
	* test/test-srfi34.scm
	* test/test-srfi38.scm
	* test/test-srfi48.scm
	* test/test-srfi6.scm
	* test/test-srfi60.scm
	* test/test-srfi8.scm
	* test/test-string-cmp.scm
	* test/test-string-core.scm
	* test/test-string-null.scm
	* test/test-string-proc.scm
	* test/test-string.scm
	* test/test-symbol.scm
	* test/test-syntax-rules.scm
	* test/test-syntax.scm
	* test/test-tail-rec.scm
	* test/test-values.scm
	* test/test-vector.scm
	* test/unittest.scm
	* tools/build_func_table.rb
	* tools/check_declare_func_typo.rb
	* tools/check_initialize_scm_null.rb
	* tools/functable-header.txt
	* tools/scm_decl.rb
	* tools/summarize_quality.rb
	  - Replace <uim AT freedesktop.org> with <uim-en AT googlegroups.com> in the
	    copyrights
	
2007-07-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* doc/release.txt
	  - Update release process for Google Code hosting
	
	* configure.in
	  - Update mailinglist address
	
	* README
	* RELNOTE
	* make-dist.sh
	* Makefile.am
	* m4/ax_feature_configurator.m4
	  - Update site URLs
	
2007-07-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-srfi1-another.scm
	  - Add tests for append!, concatenate, concatenate!, append-reverse,
	    append-reverse!, zip, append-map, append-map!, any, every, list-index,
	    member, delete!, assoc, alist-cons, alist-copy, alist-delete!
	
2007-07-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-srfi1-another.scm
	  - Add tests for fold, reduce, unfold, filter-map, filter, remove, find,
	    delete, alist-delete
	
2007-07-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-1.scm
	  - (list=): Fix broken comparison on 3 or more lists
	* test/test-srfi1-another.scm
	  - Add tests for list= and complete tests for predicates
	
2007-07-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-srfi1-another.scm
	  - Complete tests for Constructors and predicates except for list=
	  - Add some tests for Selectors
	* test/Makefile.am
	  - (sscm_tests): Add test-srfi1-another.scm
	
2007-07-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (scm_p_srfi1_proper_listp, scm_p_srfi1_drop): Removed
	* src/module-srfi1.c
	  - (scm_initialize_srfi1):
	    * Add alias proper-list? -> list?
	    * Add alias drop -> list-tail
	  - (scm_p_srfi1_proper_listp): Removed and replaced with list?
	  - (scm_p_srfi1_drop): Removed and replaced with list-tail. This change fix
	    the invalid returning of dotted tail on negative index such as (drop 1 -1)
	    ==> 1
	  - (scm_p_srfi1_last_pair): Optimize
	  - (scm_p_srfi1_lengthplus): Change the behavior on dotted list as same as the
	    reference implementation
	  - (scm_p_srfi1_find_tail): Allow dotted list as same as the reference
	    implementation
	* src/list.c
	  - (scm_p_list_tail): Add a comment about SRFI-1 drop
	* test/test-srfi1-another.scm
	  - New file
	  - Add various tests for SRFI-1 procedures implemented in module-srfi1.c
	* test/test-srfi1.scm
	  - Remove obsoleted length+ tests
	* QALog
	  - Update
	
2007-07-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-member.scm
	* test/test-assoc.scm
	  - Replace unique object generation by 'lambda' with 'list' to ensure its
	    uniqueness on non-SigScheme implementations that shares procedure object
	* test/test-list.scm
	  - Ditto
	  - Fix an incorrect test name
	
2007-06-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/stone-srfi1.scm
	  - New file Copied from vendor/misc/srfi-1-tests.ss
	  - Adapted to SigScheme
	  - Adapted to final SRFI-1 (but lacks considerable amount of conformance
	    tests for the final specification)
	* test/Makefile.am
	  - (imported_tests): Add stone-srfi1.scm but commented out since its original
	    license is unknown
	* runtest.sh
	  - Add stone-srfi1.scm
	* TODO
	  - Update
	
2007-06-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-1.scm
	  - (lset-xor, lset-xor!): Fix broken lset-difference call of the original
	    implementation (as like as Scheme48)
	* test/test-srfi1.scm
	  - Add tests for the bug of lset-xor and let-xor!
	  - (check-arg): Replace with actual checker since an invalid form
	    (lset-difference '(a b c) '(a b c d) eq?) silently returns incorrect result
	    if the check is disabled
	
2007-06-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-srfi1.c
	  - (scm_p_srfi1_find_tail): Fix invalid error on element not found cases
	
	* src/env.c
	  - (scm_valid_environment_extension_lengthp): Fix invalid assertion on
	    modifying optional arguments to a dotted or circular list. This bug only
	    appeared on --enable-debug
	* test/test-misc.scm
	  - Add the tests for the optional arguments modification
	
	* lib/srfi-1.scm
	  - (delete-duplicates!): Fix broken arguments receiving of the reference
	    implementation
	
	* test/test-srfi1.scm
	  - Disable incorrect tests for null-list? not conforming to SRFI-1
	
	* NEWS
	* QALog
	  - Update
	
2007-06-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme.pc.in
	  - Add scmlibdir
	  - Replace sscm_srfi75{,_named_chars} with sscm_r6rs_chars*
	
	* runtest.sh
	  - Add oleg-srfi2.scm
	
2007-06-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-pair.scm
	  - Fix conditional c[ad]+r tests for !SCM_COMPAT_SIOD_BUGS
	
2007-06-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-sscm-ext.scm
	  - New file
	  - Add various tests for let-optionals*
	* test/gauche-let-optionals.scm
	  - New file copied from vendor/misc/procedure.scm
	  - Adapt let-optionals* tests to SigScheme
	  - Add some tests
	* test/unittest-gauche.scm
	  - (test*): New procedure
	* test/Makefile.am
	  - (sscm_tests): Add test-sscm-ext.scm
	  - (imported_tests): gauche-let-optionals.scm
	* QALog
	  - Update
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-srfi1.c
	* lib/srfi-1.scm
	  - (scm_initialize_srfi1):
	    * Add new alias srfi-1:for-each
	    * Disable re-binding of map to r5rs:map since SigScheme's map is not
	      conforming to SRFI-1
	  - (for-each): New procedure
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/eval.c
	  - (call_continuation): Fix the case continuation takes multiple values
	* src/continuation.c
	  - (scm_call_continuation): Ditto
	* test/test-continuation.scm
	  - Add tests for the case
	* QALog
	* NEWS
	  - Update
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Makefile.am
	  - Suppress installing sigscheme.pc on !USE_LIBSSCM
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Add new option --with-master-pkg
	* lib/Makefile.am
	  - Add pkgdatadir rewriting for --with-master-pkg
	
	* doc/Makefile.am
	* src/Makefile.am
	  - Suppress installing headers on combined-source configuration
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme.mk.in
	  - Fix scmlibdir definition
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme.mk.in
	  - New file for external packages such as uim
	* Makefile.am
	  - (EXTRA_DIST): Add sigscheme.mk.in
	* configure.in
	  - (SSCM_DEFS): New variable
	  - Add sigscheme.mk handling
	* src/Makefile.am
	  - Replace DEFS with sigscheme.mk
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-srfi1.c
	  - (scm_initialize_srfi1): Add alias srfi-1:map
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make SRFI-1 available (although not validated by test yet)
	
	* src/module-srfi1.c
	  - (scm_initialize_srfi1):
	    * Load srfi-1.scm
	    * Overwrite some Scheme procedures with efficient C implementations
	    * Define aliases srfi-1:member and srfi-1:assoc
	    * Replace map and map-in-order with r5rs:map
	* src/sigscheme.c
	 - (scm_initialize_internal): Define aliases r5rs:map, r5rs:for-each,
	   r5rs:member and r5rs:assoc
	* configure.in
	  - Enable SRFI-1 by default
	  - Add feature dependencies for srfi1
	  - (scmlibdir): New variable
	* src/Makefile.am
	  - (DEFS): Add -DPKGDATADIR and -DSCMLIBDIR
	* lib/Makefile.am
	  - (dist_scmlib_DATA):
	    * New variable
	    * Add srfi-1.scm
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (scm_p_srfi1_find_tail): New function decl
	* src/module-srfi1.c
	  - (scm_p_srfi1_drop): Clean up
	  - (scm_p_srfi1_last_pair): Fix broken non-pair object acceptance
	  - (scm_p_srfi1_find_tail): New function
	  - (compare_list): Removed
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit remove the broken or not validated SRFI-1 procedure definitions
	  to be replaced with srfi-1.scm. Some efficiency-sensitive ones are remained
	  but needed to be rewritten
	
	* src/sigscheme.h
	  - (scm_p_srfi1_xcons, scm_p_srfi1_consstar, scm_p_srfi1_make_list,
	    scm_p_srfi1_list_tabulate, scm_p_srfi1_list_copy,
	    scm_p_srfi1_circular_list, scm_p_srfi1_iota, scm_p_srfi1_not_pairp,
	    scm_p_srfi1_null_listp, scm_p_srfi1_listequal, scm_p_srfi1_first,
	    scm_p_srfi1_second, scm_p_srfi1_third, scm_p_srfi1_fourth,
	    scm_p_srfi1_fifth, scm_p_srfi1_sixth, scm_p_srfi1_seventh,
	    scm_p_srfi1_eighth, scm_p_srfi1_ninth, scm_p_srfi1_tenth,
	    scm_p_srfi1_carpluscdr, scm_p_srfi1_take, scm_p_srfi1_take_right,
	    scm_p_srfi1_drop_right, scm_p_srfi1_takex, scm_p_srfi1_drop_rightx,
	    scm_p_srfi1_split_at, scm_p_srfi1_split_atx, scm_p_srfi1_last,
	    scm_p_srfi1_concatenate): Removed
	* src/module-srfi1.c
	  - (scm_p_srfi1_xcons, scm_p_srfi1_consstar, scm_p_srfi1_make_list,
	    scm_p_srfi1_list_tabulate, scm_p_srfi1_list_copy,
	    scm_p_srfi1_circular_list, scm_p_srfi1_iota, scm_p_srfi1_not_pairp,
	    scm_p_srfi1_null_listp, scm_p_srfi1_listequal, scm_p_srfi1_first,
	    scm_p_srfi1_second, scm_p_srfi1_third, scm_p_srfi1_fourth,
	    scm_p_srfi1_fifth, scm_p_srfi1_sixth, scm_p_srfi1_seventh,
	    scm_p_srfi1_eighth, scm_p_srfi1_ninth, scm_p_srfi1_tenth,
	    scm_p_srfi1_carpluscdr, scm_p_srfi1_take, scm_p_srfi1_take_right,
	    scm_p_srfi1_drop_right, scm_p_srfi1_takex, scm_p_srfi1_drop_rightx,
	    scm_p_srfi1_split_at, scm_p_srfi1_split_atx, scm_p_srfi1_last,
	    scm_p_srfi1_concatenate): Removed
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* lib/srfi-1.scm
	  - New file copied from vendor/misc/srfi-1-reference.scm
	  - (check-arg, :optional): New procedure
	  - (iota): Adapt to SigScheme
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (scm_s_let_optionalsstar): New function decl
	* src/module-sscm-ext.c
	  - (ERRMSG_INVALID_BINDINGS, ERRMSG_INVALID_BINDING): New macro
	  - (scm_s_let_optionalsstar): New function
	* NEWS
	  - Update
	
2007-06-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/Makefile.am
	  - (sscm_tests): Add lacked test-char-pred.scm and test-string-proc.scm
	  - (imported_tests): Add lacked oleg-srfi2.scm
	
	* TODO
	  - Update
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-srfi2.c
	  - (scm_s_srfi2_and_letstar): Cosmetic change
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Make use_strict_toplevel_definitions=yes and
	    use_compat_siod_bugs=no on --enable-conf=uim for uim 1.5.0
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Make utf8_as_default unneeded for r6rs_chars
	  - use_r6rs_named_chars=yes for --enable-conf=uim
	
	* test/test-misc.scm
	* test/test-number-pred.scm
	* test/test-string-core.scm
	  - Add "-C UTF-8" option for non-UTF-8-default codecs
	
	* test/test-srfi38.scm
	  - (cadddr): New procedure for (not (provided? "deep-cadrs"))
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/encoding.c
	  - (unibyte_int2str): Fix unterminated string
	* QALog
	* NEWS
	  - Update
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Change default configuration values for --enable-conf=uim for uim 1.5.0
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-srfi2.c
	  - (scm_s_srfi2_and_letstar):
	    * Fix body-less forms rejection such as (and-let* ())
	    * Remove unneeded null environment extension
	* test/test-srfi2.scm
	  - Add various tests
	* NEWS
	* QALog
	  - Update
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/vland.scm
	  - Rename to oleg-srfi2.scm
	* test/oleg-srfi2.scm
	  - Renamed from vland.scm
	  - Adapt to SigScheme
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/vland.scm
	  - Copied from vendor/misc/vland.scm
	
2007-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-srfi2.scm
	  - Cosmetic changes with test-name
	
2007-05-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-srfi8.c
	  - (scm_s_srfi8_receive): Modify an error message
	* test/test-srfi8.scm
	  - Add various tests
	  - Remove obsolete and incomplete tests
	  - Fix number of values for "receive invalid formals: X as an arg" tests
	* QALog
	  - Update
	
2007-05-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/gauche-euc-jp.scm
	* test/test-enc-eucgeneric.scm
	* test/test-enc-eucjp.scm
	* test/test-enc-sjis.scm
	* test/test-enc-utf8.scm
	  - Follow the specification change of string-set! and string-fill! in r4552
	
2007-05-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/string-procedure.c
	  - (scm_p_make_string): Fix the error message about invalid length
	  - (scm_p_list2string): Add circular list check
	* test/test-string-proc.scm
	  - Add test "list->string improper lists"
	* QALog
	  - Update
	
2007-05-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module-siod.c
	  - (scm_set_verbose_level): Fix the error message
	
2007-05-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-char.scm
	  - Complement lacked assertions for 'char?'
	* QALog
	  - Update
	
	* test/test-string-core.scm
	  - Remove obsolete tests
	
2007-05-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] vector.c
	
	* src/vector.c
	  - (scm_p_make_vector): Fix the error message
	  - (scm_p_vector_fillx): Return SCM_UNDEF
	* test/test-vector.scm
	  - Remove obsolete and incomplete tests
	  - Add various tests
	* NEWS
	* QALog
	  - Update
	
2007-05-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/module.c
	  - (struct module_info): Rename to scm_module_info in response to [uim-ja
	    22]. Thanks Hideto
	  - (struct scm_module_info): Renamed from module_info
	  - (module_info_table, lookup_module_info, scm_fin_module, scm_s_use): Follow
	    the renaming
	
2007-05-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fix the configuration-depended compilation error reported in
	  [uim-en 8]. Thanks Etsushi
	
	* src/module-sscm-ext.c
	  - (scm_p_string_mutablep): Move to string-procedure.c
	  - (scm_p_vector_mutablep): Move to vector.c
	* src/vector.c
	  - (scm_p_vector_mutablep): Moved from module-sscm-ext.c
	* src/string-procedure.c
	  - (scm_p_string_mutablep): Moved from module-sscm-ext.c
	* src/sigscheme.h
	  - (scm_p_string_mutablep, scm_p_vector_mutablep): Move to appropriate place
	
2007-05-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] string-procedure.c
	
	* src/string-procedure.c
	  - (scm_p_make_string):
	    * Fix unexpected memory exhaustion on negative length
	    * Replace implicit filler value ' ' with '?' to avoid wrong assumption by
	      user
	    * Accept any non-ASCII singlebyte values when !SCM_USE_MULTIBYTE_CHAR
	    * Return SCM_UNDEF instead of the str
	    * Cosmetic change
	  - (scm_p_string_fillx):
	    * Accept any non-ASCII singlebyte values when !SCM_USE_MULTIBYTE_CHAR
	    * Return SCM_UNDEF instead of the str
	    * Cosmetic change
	* src/sigscheme.h
	  - (scm_p_pair_mutablep, scm_p_string_mutablep, scm_p_vector_mutablep): New
	    function decl
	* src/module-sscm-ext.c
	  - (scm_p_pair_mutablep, scm_p_string_mutablep, scm_p_vector_mutablep): New
	    function
	* test/test-string-proc.scm
	  - New file
	  - Add various tests for string-procedure.c
	* test/test-string-cmp.scm
	  - Add basic tests for multibyte string
	* test/test-string.scm
	  - Delete incomplete obsolete tests
	  - Move some obsolete tests to test-obsolete.scm
	* test/test-obsolete.scm
	  - Moved some tests from test-string.scm
	* NEWS
	* QALog
	  - Update
	
2007-05-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] char.c
	
	* src/sigschemeinternal.h
	  - (ICHAR_SINGLEBYTEP, ICHAR_VALID_UNICODEP): New macro
	  - (ICHAR_WHITESPACEP): Add comment about specification
	* src/char.c
	  - (scm_p_integer2char):
	    * Fix invalid Unicode character acception
	    * Accept any non-ASCII singlebyte values on integer->char when
	    !SCM_USE_MULTIBYTE_CHAR
	  - (scm_p_char_upcase, scm_p_char_downcase): Cosmetic change
	* src/read.c
	  - (parse_unicode_sequence): Simplify with ICHAR_VALID_UNICODEP()
	* test/test-char-pred.scm
	  - New file
	  - Add tests for R5RS char classification predicates
	  - All tests have been passed
	* test/test-char.scm
	  - Remove obsolete tests
	  - Add tests for char?, char-upcase, char-downcase, char->integer,
	    integer->char, R6RS named chars case-sensitivity
	* test/test-char-cmp.scm
	  - Update comments about R6RS chars
	* doc/spec.txt
	  - Add subsections "Non-ASCII charcter acceptance" and "Whitespace
	    charcters"
	  - Update some character-related specs
	* NEWS
	* QALog
	  - Update
	
2007-04-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] write.c, format.c, sigscheme.c
	
	* write.c
	* format.c
	* sigscheme.c
	  - QA done again @r4543 for SCM_USE_MULTIBYTE_CHAR
	* QALog
	  - Update
	
2007-04-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/load.c
	  - (scm_load_internal): Add a FIXME comment
	
2007-04-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] load.c
	
	* load.c
	  - QA done again @r4541 for SCM_USE_MULTIBYTE_CHAR
	* QALog
	  - Update
	
2007-04-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] port.c read.c
	
	* port.c
	  - QA done again @r4533 for SCM_USE_MULTIBYTE_CHAR and SCM_USE_R6RS*_CHARS
	* read.c
	  - Ditto
	  - (parse_unicode_sequence): Add comment about R6RS
	* test/unittest.scm
	  - (assert-parseable): Fix broken parse error detection
	* test/test-enc-utf8.scm
	* test/test-enc-eucgeneric.scm
	* test/test-enc-eucjp.scm
	* test/test-enc-sjis.scm
	* test/test-char.scm
	  - Update SRFI-75 tests
	  - Add R6RS chars tests
	* QALog
	  - Update
	
2007-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-compact.h
	  - (SCM_PTR): Add pointer alignment assertion
	  - (SCM_SAL_FREECELLP): Make capable of non-ScmCell pointer ordinary ScmObj
	* src/storage-gc.c
	  - (scm_gc_protectedp): Fix invalid freecell detection for storage-compact
	
	* configure.in
	  - Disable SCM_SOFT_ASSERT even if --enable-debug. This enables
	    --disable-soft-assert and --enable-soft-assert even if --enable-debug is
	    also specified
	
2007-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Fix broken configuration on --enable-conf=uim. Thanks No.697 of [uim thread
	    7] for the report
	
2007-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit turns SRFI-75 -related configuration names into R6RS characters
	
	* configure.in
	  - Rename use_srfi75_named_chars to use_r6rs_named_chars
	  - Rename use_srfi75 to use_r6rs_chars
	  - Disable R6RS chars if --enable-conf=r5rs
	* src/symbol.c
	* src/port.c
	* src/read.c
	  - Replace SCM_USE_SRFI75 with SCM_USE_R6RS_CHARS
	  - Replace SCM_USE_SRFI75_NAMED_CHARS with SCM_USE_R6RS_NAMED_CHARS
	* src/sigschemeinternal.h
	* doc/spec.txt
	* README
	  - Revise the documents about SRFI-75
	* NEWS
	  - Update
	
2007-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] scmport-mbchar.h scmport-mbchar.c
	
	* src/scmport-mbchar.c
	  - (struct ScmMultiByteCharPort_): Replace the member 'state' with 'rstate'
	    and 'wstate' to distinguish read and write state
	  - (SCM_MBCPORT_CLEAR_STATE, mbcport_peek_char, mbcport_put_char): Follow the
	    wstate introduction
	  - (mbcport_fill_rbuf):
	    * Ditto
	    * Fix broken read state update for mbc
	* QALog
	* NEWS
	* TODO
	  - Update
	
2007-03-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] encoding-config.h encoding.h encoding.c
	
	* src/encoding.h
	  - (enum ScmMultibyteCharFlag): New type
	  - (SCM_MBCINFO_CLEAR_FLAG, SCM_MBCINFO_SET_ERROR, SCM_MBCINFO_SET_INCOMPLETE,
	    SCM_MBCINFO_ERRORP, SCM_MBCINFO_INCOMPLETEP): Follow the
	    ScmMultibyteCharFlag introduction
	  - (SCM_MBS_INIT): Simplify with SCM_MBS_INIT2()
	  - (enum ScmCodedCharSet): Replace the violent SigScheme-local conventional
	    CCS names SCM_CCS_UCS{2,4} which indicates SMP existence with single
	    SCM_CCS_UNICODE
	* src/encoding.c
	  - (LEN_CODE): Cosmetic change
	  - (utf8_ccs): Follow the CCS renaming
	  - (sjis_encoding): Replace "SHIFT_JIS" with "Shift_JIS" to conform to 
	    http://www.iana.org/assignments/character-sets
	  - (sjis_ccs): Return SCM_CCS_JIS
	* src/read.c
	  - (read_token): Follow the CCS renaming
	* src/encoding-config.h
	  - Include assert.h
	  - (SCM_ENCODING_ASSERT): Add real assertion
	* QALog
	  - Update
	
2007-03-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-gc.c
	  - (scm_gc_protectedp): Fix freecell detection on storage-compact
	
2007-03-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-gc.c
	  - (gc_mark_global_vars): New static function split from gc_mark()
	  - (gc_mark): Follow the above change
	  - (scm_gc_protectedp): Add indirect protection check via on-heap objects
	* test-c/test-gc-protect.c
	  - Add tests for the indirect protection
	* QALog
	  - Update
	
2007-03-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/syntax.c
	  - (scm_s_if): Replace default alternative value SCM_NULL with
	    SCM_FALSE for SCM_COMPAT_SIOD_BUGS to make the meaning proper
	
2007-03-15 Etsushi Kato <ek.kato@gmail.com>
	
	* test/test-string-cmp.scm : Use R6RS string for inline hex
	  characters.
	
2007-02-16 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/syntax.c (scm_s_if) : Add SIOD compatibility.
	
2007-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test-c/sscm-test.h
	  - (TST_TN_TRUE, TST_TN_FALSE, TST_TN_EQ_INT, TST_TN_EQ_UINT,
	    TST_TN_NEQ_INT, TST_TN_NEQ_UINT, TST_TN_EQ_STR, TST_TN_NEQ_STR,
	    TST_TN_EQ_PTR, TST_TN_NEQ_PTR, TST_TN_EQ_OBJ, TST_TN_NEQ_OBJ,
	    TST_TN_EQ_FPTR, TST_TN_NEQ_FPTR): Fix unblockified multiple statements
	* test-c/test-gc-protect.c
	  - New file
	  - Add tests for GC protection and predicates
	* test-c/Makefile.am
	  - (EXTRA_DIST, TESTS): Add test-gc-protect{.c,-coll}
	  - Fix gcroots.h inclusion precedence
	
2007-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme.pc.in
	  - Fix the typo of sscm_format_extension
	  - Fix invalid include directory. Thanks Etsushi for the report
	
2007-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme.pc.in
	  - Fix the typo of sscm_format_extension
	  - Fix invalid include directory. Thanks Etsushi for the report
	
2007-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make the list construction queue API public
	
	* src/storage-gc.c
	  - (scm_gc_protectedp):
	    * Fix lacking constant object check
	    * Add a comment
	
2007-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make the list construction queue API public
	
	* src/sigschemeinternal.h
	  - (ScmQueue, SCM_QUEUE_INVALIDATE, SCM_QUEUE_VALIDP, SCM_QUEUE_POINT_TO,
	    SCM_QUEUE_ADD, SCM_QUEUE_CONST_ADD, SCM_QUEUE_APPEND,
	    SCM_QUEUE_TERMINATOR, SCM_QUEUE_SLOPPY_APPEND): Move to sigscheme.h
	* src/sigscheme.h
	  - (ScmQueue, SCM_QUEUE_INVALIDATE, SCM_QUEUE_VALIDP, SCM_QUEUE_POINT_TO,
	    SCM_QUEUE_ADD, SCM_QUEUE_CONST_ADD, SCM_QUEUE_APPEND,
	    SCM_QUEUE_TERMINATOR, SCM_QUEUE_SLOPPY_APPEND):
	    * Moved from sigschemeinternal.h
	    * Replace internal abbreviated macro names with public ones
	
2007-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/libtool-version.mk
	  - (libsscm_version): Increase to 3:0:2 from 2:0:1 due to the new GC
	    predicates
	* configure.in
	  - Increase version info to 0.8.0
	* src/sigscheme.h
	  - Ditto
	  - Require GCROOTS_API_REVISION >= 1
	  - (scm_gc_protectedp, scm_gc_protected_contextp): New function decl
	* src/storage-gc.c
	  - (scm_gc_protectedp, scm_gc_protected_contextp): New function
	
	* src/Makefile.am
	  - Fix gcroots.h inclusion precedence
	
2007-01-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit revise the SRFI-75 support into R6RS (R5.92RS) characters
	
	* src/read.c
	  - (read_token): Fix a buffer overflow
	  - (read_sequence): Removed
	  - (parse_unicode_sequence):
	    * Remove 2nd arg 'prefix'
	    * Update SRFI-75 Unicode literal support into R6RS literal
	  - (read_unicode_sequence, read_char, read_string): Ditto
	
2007-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	* src/sigscheme.h
	* make-dist.sh
	  - Increase version to 0.7.4
	* src/libtool-version.mk
	  - Increase version to 2:0:1 from 1:0:0 due to the scm_p_prealloc_heaps()
	* RELNOTE
	  - Update
	
2007-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/storage-gc.c
	  - (initialize_heap): Remove unneeded code fragments
	
2007-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigschemeinternal.h
	  - (scm_prealloc_heaps): New function decl
	* src/storage-gc.c
	  - (scm_prealloc_heaps): New function
	  - (initialize_heap): Simplify with scm_prealloc_heaps()
	* src/sigscheme.h
	  - (scm_p_prealloc_heaps): New function decl
	* src/module-sscm-ext.c
	  - (scm_p_prealloc_heaps): New function
	* NEWS
	  - Update
	
2007-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Makefile.am
	  - Fix $(distdir) abuse
	
2007-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* COPYING
	  - Modify a supplementary explanation. License terms are not modified
	
2007-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* NEWS
	  - Update
	
2007-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* make-dist.sh
	  - Fix error handling
	
2007-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* COPYING
	* experimental/imm-const/imm-test.c
	* lib/slib.scm
	* src/alloc.c
	* src/char.c
	* src/config-old.h
	* src/continuation.c
	* src/deep-cadrs.c
	* src/dllentry.c
	* src/encoding-config.h
	* src/encoding-dummy.h
	* src/encoding.c
	* src/encoding.h
	* src/env.c
	* src/error.c
	* src/eval.c
	* src/format.c
	* src/gcroots/gcroots.c
	* src/gcroots/gcroots.h
	* src/global-aggregated.c
	* src/global.h
	* src/list.c
	* src/load.c
	* src/macro.c
	* src/main.c
	* src/module-siod.c
	* src/module-srfi1.c
	* src/module-srfi2.c
	* src/module-srfi23.c
	* src/module-srfi28.c
	* src/module-srfi34.c
	* src/module-srfi38.c
	* src/module-srfi48.c
	* src/module-srfi6.c
	* src/module-srfi60.c
	* src/module-srfi8.c
	* src/module-sscm-ext.c
	* src/module.c
	* src/number-io.c
	* src/number.c
	* src/port.c
	* src/procedure.c
	* src/promise.c
	* src/qquote.c
	* src/read.c
	* src/scmint.h
	* src/scmport-basechar.c
	* src/scmport-config.h
	* src/scmport-file.c
	* src/scmport-file.h
	* src/scmport-mbchar.c
	* src/scmport-mbchar.h
	* src/scmport-null.c
	* src/scmport-null.h
	* src/scmport-sbchar.c
	* src/scmport-sbchar.h
	* src/scmport-str.c
	* src/scmport-str.h
	* src/scmport.h
	* src/sigscheme-combined.h
	* src/sigscheme.c
	* src/sigscheme.h
	* src/sigschemeinternal.h
	* src/storage-common.h
	* src/storage-compact.h
	* src/storage-fatty.h
	* src/storage-gc.c
	* src/storage.c
	* src/strcasecmp.c
	* src/string-procedure.c
	* src/string.c
	* src/symbol.c
	* src/syntax.c
	* src/template.c
	* src/template.h
	* src/vector.c
	* src/write.c
	* test-c/sscm-test.h
	* test-c/test-alignment.c
	* test-c/test-format.c
	* test-c/test-gc-protect-stack.c
	* test-c/test-gc.c
	* test-c/test-global.c
	* test-c/test-length.c
	* test-c/test-minishell.c
	* test-c/test-storage-compact.c
	* test-c/test-storage.c
	* test-c/test-strcasecmp.c
	* test-c/utils.c
	* test/test-apply.scm
	* test/test-assoc.scm
	* test/test-begin.scm
	* test/test-bool.scm
	* test/test-char-cmp.scm
	* test/test-char.scm
	* test/test-continuation.scm
	* test/test-define-internal.scm
	* test/test-define.scm
	* test/test-do.scm
	* test/test-dyn-extent.scm
	* test/test-enc-eucgeneric.scm
	* test/test-enc-eucjp.scm
	* test/test-enc-sjis.scm
	* test/test-enc-utf8.scm
	* test/test-eq.scm
	* test/test-equal.scm
	* test/test-eqv.scm
	* test/test-eval.scm
	* test/test-formal-syntax.scm
	* test/test-formatplus.scm
	* test/test-lambda.scm
	* test/test-let.scm
	* test/test-letrec.scm
	* test/test-letstar.scm
	* test/test-list.scm
	* test/test-map.scm
	* test/test-member.scm
	* test/test-misc.scm
	* test/test-named-let.scm
	* test/test-number-arith.scm
	* test/test-number-cmp.scm
	* test/test-number-io.scm
	* test/test-number-literal.scm
	* test/test-number-pred.scm
	* test/test-obsolete.scm
	* test/test-pair.scm
	* test/test-quote.scm
	* test/test-srfi1.scm
	* test/test-srfi2.scm
	* test/test-srfi28.scm
	* test/test-srfi34-2.scm
	* test/test-srfi34.scm
	* test/test-srfi38.scm
	* test/test-srfi48.scm
	* test/test-srfi6.scm
	* test/test-srfi60.scm
	* test/test-srfi8.scm
	* test/test-string-cmp.scm
	* test/test-string-core.scm
	* test/test-string-null.scm
	* test/test-string.scm
	* test/test-symbol.scm
	* test/test-syntax-rules.scm
	* test/test-syntax.scm
	* test/test-tail-rec.scm
	* test/test-values.scm
	* test/test-vector.scm
	* test/unittest.scm
	* tools/build_func_table.rb
	* tools/check_declare_func_typo.rb
	* tools/check_initialize_scm_null.rb
	* tools/functable-header.txt
	* tools/scm_decl.rb
	* tools/summarize_quality.rb
	  - Update copyright by following script
	    for file in `svn ls -R | egrep -v '/$'`; do ruby -i -e 'print ARGF.read.sub(/^(;+|#|\s*\*)\s*\n(((;+|#|\s*\*)\s*)All rights reserved)/m, "\\3Copyright (c) 2007 SigScheme Project <uim AT freedesktop.org>\n\\1\n\\2")' $file; done
	
2007-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test-c/test-alignment.c
	  - (TEST_ALIGNMENT): Replace sizeof(*) with ALIGNOF_* to support m68k
	  - (struct offsettable_data, union offsettable_data):
	    * Fix struct to union
	    * Add offset 8
	  - Follow the changes in the test
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test-c/sscm-test.h
	  - (TST_EQ_UINT, TST_NEQ_UINT, TST_EQ_UINT, TST_NEQ_UINT): Fix misused format
	    string by patch [Anthy-dev 3297] by NIIBE Yutaka. Thanks
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/error.c
	  - (scm_error_obj_internal): New function
	  - (scm_error_obj): Suppress warning with scm_error_obj_internal()
	* src/format.c
	  - (FORMAT_STR_SKIP_CHAR): Suppress warning
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/eval.c
	  - (call): Fix eval_state passing when (SIZEOF_VOID_P != SIZEOF_SCMOBJ)
	* QALog
	  - Update
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/scmport-str.c
	  - (istrport_close, ostrport_close): Suppress warning
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fix --with-libgcroots=tiny-subst problems. Thanks No.570 of [uim
	  thread 7] for the report
	
	* configure.in
	  - Fix gcroots.h include path for --with-libgcroots=tiny-subst
	* Makefile.am
	  - Make 'make distclean' workable on --with-libgcroots=tiny-subdir
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (SCM_NOTREACHED): Fix conditional compilation
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* make-report.sh
	  - Hide reporter's private information
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Make --disable-backtrace by default on conf=uim, to reduce GC frequency
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	* src/sigscheme.h
	  - Increase version to 0.7.3
	* make-dist.sh
	  - Update package versions
	* Makefile.am
	  - Use $(distdir) for tag name
	* RELNOTE
	* NEWS
	  - Update
	
2007-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/sigscheme.h
	  - (SCM_NOTREACHED): New macro
	* src/eval.c
	  - (call_closure, call): Replace SCM_ASSERT(scm_false) with SCM_NOTREACHED
	* src/env.c
	  - (scm_add_environment): Ditto
	* src/storage-gc.c
	  - (free_cell): Ditto
	* src/read.c
	  - (read_sexpression, read_unicode_sequence): Ditto
	* src/write.c
	  - (write_obj, write_char, write_string, write_constant, write_errobj,
	    hash_lookup): Ditto
	* src/number.c
	  - (scm_p_add, scm_p_multiply, scm_p_subtract, scm_p_divide, scm_p_integerp):
	    Ditto
	* src/syntax.c
	  - (CHECK_VALID_BINDEE): Ditto
	* src/qquote.c
	  - (scm_listran, scm_vectran, scm_s_quasiquote): Ditto
	* src/macro.c
	  - (RECURSE): Ditto
	* src/format.c
	  - (format_internal): Ditto
	* src/module-srfi60.c
	  - (BITWISE_OPERATION_BODY): Ditto
	
2006-12-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* RELNOTE
	* NEWS
	  - Update
	
2006-12-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/Makefile.am
	  - (EXTRA_DIST): Add lacking test-char.scm
	
2006-12-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test-c/Makefile.am
	  - Include lacking libgcroots.mk
	
	* make-dist.sh
	  - (LIBGCROOTS_URL): Update to 0.1.3
	* Makefile.am
	  - (DIST_SUM_LIST): Use $(distdir)
	
	* RELNOTE
	* NEWS
	  - Update
	
2006-12-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/Makefile.am
	  - Fix libsscm.la build on !USE_LIBSSCM. Thanks Etsushi
	
	* Makefile.am
	* make-dist.sh
	  - Add alternative repository URLs
	
	* RELNOTE
	  - Update
	
2006-12-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* RELNOTE
	* NEWS
	  - Update
	
	* README
	  - Modify a expression that causes misunderstanding
	
2006-12-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - (AX_LANG_WNOERROR): New macro
	  - Turn warning-only unknown options on AX_CFLAGS_GCC_OPTION() into
	    error. This resolves the '-no-cpp-precomp' problem
	
2006-12-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* libgcroots.mk.in
	* configure.in
	  - Fix absolute directory substitutions for GCROOTS_LIBS and GCROOTS_CFLAGS
	  - Add lacking shell->libsscm dependency
	* src/Makefile.am
	  - Follow the GCROOTS_* changes
	
	* test/Makefile.am
	  - Disable tests if --disable-shell
	* test-c/Makefile.am
	  - Disable tests if --disable-libsscm
	
2006-12-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* libgcroots.mk.in
	  - New file
	  - (GCROOTS_LIBS, GCROOTS_CFLAGS): New variable
	* configure.in
	  - Add libgcroots.mk generation
	  - Make GCROOTS_{LIBS,CFLAGS} absolute dir
	  - Require [gcroots >= 0.1.2]
	* Makefile.am
	  - (EXTRA_DIST): Add libgcroots.mk.in
	
2006-12-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/Makefile.am
	  - (sscm_optional_tests): Fix broken initialization
	
2006-12-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/Makefile.am
	  - Make --enable-conf=full unnecessary on make dist
	
2006-12-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Makefile.am
	  - (EXTRA_DIST): Add make-dist.sh
	  - Change dist and distcheck procedure
	* make-dist.sh
	  - New file
	* make-report.sh
	  - Change To: address
	* src/Makefile.am
	  - Fix func-tables dependency to config.status
	* configure.in
	* src/sigscheme.h
	  - Increase version to 0.7.2
	* doc/release.txt
	* RELNOTE
	* NEWS
	  - Update
	
2006-12-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Specify the gcc option -std=c89 only on the debugging mode to
	    avoid system library disfunction problems
	  - Add gcc specific option '-no-cpp-precomp' to disable the
	    problematic preprocessing on Mac OS X
	  - Fix a typo 'use_sscm_format_extensions' with use_sscm_format_extension'
	
	* make-report.sh
	  - Add compiler information into Subject:
	
2006-12-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-formatplus.scm
	* test/test-srfi1.scm
	* test/test-srfi2.scm
	* test/test-srfi28.scm
	* test/test-srfi34-2.scm
	* test/test-srfi34.scm
	* test/test-srfi38.scm
	* test/test-srfi48.scm
	* test/test-srfi6.scm
	* test/test-srfi60.scm
	* test/test-srfi8.scm
	  - Fix wrong test-skip placement. These tests ware not actually run
	    before this fix
	
2006-12-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* src/Makefile.am
	  - (BUILD_FUNCTBL_DEPS): Depend on config.status to rebuild func
	    tables in response to re-configure
	
	* configure.in
	* src/sigscheme.h
	* RELNOTE
	* NEWS
	  - Increase to version 0.7.1
	
2006-12-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* m4/ax_func_getcontext.m4
	  - New file
	  - (AX_FUNC_GETCONTEXT): New macro
	* m4/Makefile.am
	  - (EXTRA_DIST): Add ax_func_getcontext.m4
	* configure.in
	  - Add AX_FUNC_GETCONTEXT
	
2006-12-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.in
	  - Fix $top_builddir for libgcroots include path with $top_srcdir
	
	* src/module.c
	  - (scm_use, scm_use_internal): Suppress warnings
	
	* README
	  - Add GNU make requirement
	* doc/release.txt
	  - Update
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* COPYING
	  - Add libgcroots license
	* alloc.c
	* char.c
	* config-old.h
	* continuation.c
	* deep-cadrs.c
	* encoding-config.h
	* encoding.c
	* encoding.h
	* env.c
	* error.c
	* eval.c
	* list.c
	* load.c
	* main.c
	* module-siod.c
	* module-srfi1.c
	* module-srfi2.c
	* module-srfi23.c
	* module-srfi38.c
	* module-srfi6.c
	* module-srfi8.c
	* module-sscm-ext.c
	* module.c
	* number-io.c
	* number.c
	* port.c
	* procedure.c
	* qquote.c
	* read.c
	* sigscheme.c
	* sigscheme.h
	* sigschemeinternal.h
	* storage-common.h
	* storage-compact.h
	* storage-fatty.h
	* storage-gc.c
	* storage.c
	* string-procedure.c
	* string.c
	* symbol.c
	* syntax.c
	* vector.c
	* write.c
	  - Correct copyright. To avoid incorrectness and bothering, I'll
	    change the copyright holder to "SigScheme project" from next year
	    if no one opposed
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* RELNOTE
	  - New file
	* Makefile.am
	  - (EXTRA_DIST): Add RELNOTE
	  - Update URLs
	* README
	* doc/release.txt
	  - Ditto
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Move SigScheme repository
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	* sigscheme/sigscheme.pc.in
	* sigscheme/src/Makefile.am
	* sigscheme/test-c/Makefile.am
	  - Fix libgcroots handlings
	* sigscheme/src/gcroots/gcroots.h
	  - (GCROOTS_VERSION_PATCHLEVEL): Follow libgcroots 0.1.1
	  - (GCROOTS_API_REVISION): Follow libgcroots 0.1.1
	* sigscheme/src/sigscheme.h
	  - Fix wrong file inclusion of gcroots.h
	  - Follow the change of GCROOTS_API_REVISION
	* sigscheme/QALog
	  - Add gcroots/gcroots.[hc]
	  - Update
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/README
	* sigscheme/NEWS
	* sigscheme/doc/spec.txt
	  - Update
	
	* sigscheme/doc/gc-protection.txt
	* sigscheme/doc/release.txt
	  - Add FIXME comment
	
	* sigscheme/configure.in
	  - Add "char unsigned" info to result
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_DEFINE): Set explicit 'no' if the variable is empty,
	    to set explicit value to the variables in sigscheme.pc
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Fix --with-libgcroots help message
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Make variable reference safe
	
2006-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add libgcroots configuration. Specify
	  '--with-libgcroots=tiny-subst' to build at now
	
	* sigscheme/configure.in
	  - Add --with-libgcroots
	  - configure libgcroots/ if needed
	* sigscheme/Makefile.am
	  - (SUBDIRS): Add libgcroots
	* sigscheme/src/Makefile.am
	  - Follow the renamings of conditionals
	
2006-12-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add the two files I forgot to svn add in previous commits
	
	* sigscheme/src/gcroots/gcroots.h
	  - New file
	  - (GCROOTS_VERSION_MAJOR, GCROOTS_VERSION_MINOR,
	    GCROOTS_VERSION_PATCHLEVEL, GCROOTS_API_REVISION,
	    GCROOTS_VERSION_REQUIRE): New macro
	  - (struct _GCROOTS_context, GCROOTS_context, GCROOTS_mark_proc,
	    GCROOTS_user_proc, GCROOTS_context_alloc_proc): New type
	  - (GCROOTS_init, GCROOTS_fin, GCROOTS_call_with_gc_ready_stack,
	    GCROOTS_mark): New function
	* sigscheme/src/gcroots/gcroots.c
	  - New file
	  - (struct _GCROOTS_context): New type
	  - (GCROOTS_init, GCROOTS_fin, GCROOTS_call_with_gc_ready_stack,
	    GCROOTS_mark, mark_internal): New function
	* sigscheme/src/sigscheme.h
	  - Require libgcroots by GCROOTS_API_REVISION
	
2006-12-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/QALog
	  - Fix corrupted forms
	
2006-12-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - Include gcroots.h
	  - (SCM_GC_PROTECTED_CALL, SCM_GC_PROTECTED_CALL_VOID,
	    SCM_GC_PROTECTED_CALL_INTERNAL, scm_gc_current_stack_fp,
	    scm_gc_protect_stack_fp, scm_gc_current_stack,
	    scm_gc_current_stack_internal, scm_gc_protect_stack,
	    scm_gc_protect_stack_internal, scm_gc_unprotect_stack): Removed
	  - (scm_call_with_gc_ready_stack): New function
	  - (ScmGCGateFunc): New type
	* sigscheme/src/storage-gc.c
	  - (N_REGS_IN_JMP_BUF, scm_gc_current_stack_internal,
	    scm_gc_protect_stack_internal, scm_gc_unprotect_stack): Removed
	  - Remove SCM_DEFINE_EXPORTED_VARS(gc)
	  - (l_stack_start_pointer, l_save_regs_buf): Removed
	  - (l_gcroots_ctx): New variable
	  - (gc_mark_locations):
	    * Rewrite to be callbacked via libgcroots API
	    * Fix broken start/end pointer swapping on upward-grown stack
	  - (scm_init_gc, scm_fin_gc, gc_mark): Adapt to libgcroots
	  - (scm_call_with_gc_ready_stack): New function
	* sigscheme/src/sigscheme.c
	  - (scm_initialize, scm_initialize_internal, scm_eval_c_string,
	    scm_eval_c_string_internal): Follow the change of GC protection API
	* sigscheme/src/module.c
	  - (scm_use, scm_use_internal): Ditto
	* sigscheme/src/load.c
	  - (scm_load, scm_load_internal): Ditto
	* sigscheme/src/module-sscm-ext.c
	  - (scm_require, scm_require_internal): Ditto
	* sigscheme/src/main.c
	  - (repl, main): Ditto
	* sigscheme/src/Makefile.am
	  - (libsscm_sources): Add gcroots/gcroots.h and gcroots/gcroots.c
	    conditionally
	  - Add libgcroots linking stuffs
	* sigscheme/test-c/sscm-test.h
	  - (TST_RUN): Follow the API change
	  - (struct _tst_run_args, tst_run_args): New type
	  - (tst_run, tst_run_internal): New function
	* sigscheme/test-c/test-gc-protect-stack.c
	  - Exclude entire tests
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/make-report.sh
	  - New file
	* sigscheme/Makefile.am
	  - (EXTRA_DIST): Add make-report.sh
	
2006-12-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Make --enable-const-vector-literal default
	  - Add test/run-singletest.sh generation rule
	* sigscheme/src/sigscheme.c
	  - (builtin_features): Add "euc-cn", "euc-jp", "euc-kr" and "shift-jis"
	* sigscheme/test/Makefile.am
	  - Add 'make check' support
	  - (EXTRA_DIST): Add run-singletest.sh.in
	* sigscheme/test/run-singletest.sh.in
	  - New file
	* sigscheme/test/unittest.scm
	  - (test-skip): Change return code to 77 for automake tests
	* sigscheme/test/test-pair.scm
	  - Fix malformed lambda expressions
	* sigscheme/test/test-char-cmp.scm
	* sigscheme/test/test-char.scm
	* sigscheme/test/test-continuation.scm
	* sigscheme/test/test-define-internal.scm
	* sigscheme/test/test-dyn-extent.scm
	* sigscheme/test/test-enc-eucgeneric.scm
	* sigscheme/test/test-enc-eucjp.scm
	* sigscheme/test/test-enc-sjis.scm
	* sigscheme/test/test-enc-utf8.scm
	* sigscheme/test/test-formatplus.scm
	* sigscheme/test/test-number-arith.scm
	* sigscheme/test/test-number-cmp.scm
	* sigscheme/test/test-number-literal.scm
	* sigscheme/test/test-number-pred.scm
	* sigscheme/test/test-quote.scm
	* sigscheme/test/test-srfi1.scm
	* sigscheme/test/test-srfi2.scm
	* sigscheme/test/test-srfi6.scm
	* sigscheme/test/test-srfi8.scm
	* sigscheme/test/test-srfi28.scm
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-srfi34-2.scm
	* sigscheme/test/test-srfi38.scm
	* sigscheme/test/test-srfi48.scm
	* sigscheme/test/test-srfi60.scm
	* sigscheme/test/test-string-cmp.scm
	* sigscheme/test/test-string-core.scm
	* sigscheme/test/test-string.scm
	* sigscheme/test/test-syntax-rules.scm
	* sigscheme/test/test-vector.scm
	  - Add test-skip
	
2006-12-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/global.h
	  - (SCM_DEFINE_GLOBAL_VARS_INSTANCE_ACCESSOR,
	    SCM_DEFINE_EXPORTED_VARS): Suppress warning
	* sigscheme/QALog
	  - Update
	
2006-12-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* configure.ac
	  - Integrate sigscheme/configure invocation with appropriate options
	* sigscheme/configure.in
	  - Add --disable-libsscm
	* sigscheme/src/Makefile.am
	  - Support --disable-libsscm
	* uim/uim-scm.c
	  - Add version check for SigScheme
	* sigscheme/TODO
	  - Update
	
2006-12-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Disable -std=gnu89 if glibc is not detected
	  - Add --disable-shell
	  - Add definitions for sigscheme.pc
	  - Remove result printing for backtrace behavior options
	* sigscheme/configure.in
	  - New file
	* sigscheme/Makefile.am
	  - (EXTRA_DIST): Add sigscheme.pc.in
	  - (DISTCLEANFILES): Add sigscheme.pc
	  - Add sigscheme.pc generation
	* sigscheme/src/Makefile.am
	  - Support --disable-shell
	* NEWS
	  - Update
	
2006-12-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make SigScheme-based uim runnable again
	
	* sigscheme/configure.in
	  - Change settings for
	    --enable-conf=uim. --disable-strict-toplevel-definitions and
	    --enable-srfi75-named-chars have been added
	  - Add --enable-soft-assert by default if --enable-debug
	* sigscheme/src/module-srfi6.c
	  - (istrport_finalize): Rename to srfi6_istrport_finalize() to avoid
	    func name conflict on combind mode
	  - (srfi6_istrport_finalize): Renamed from istrport_finalize()
	  - (scm_p_srfi6_open_input_string): Follow the renaming
	* uim/uim-scm.c
	  - (uim_scm_init): Enclose encoding handling into #if
	    SCM_USE_MULTIBYTE_CHAR
	* scm/prime.scm
	  - (prime-reset-handler): Fix malformed empty lambda body
	* scm/util.scm
	  - (hyphen-sym): New variable
	  - (define-record): Fix R5RS-inconformant hyphen-prefixed symbol with
	    hyphen-sym
	* scm/uim-module-manager.scm
	  - (prepare-installed-im-list): Ditto
	* sigscheme/QALog
	  - Update
	
2006-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add various fields to the build information printing
	
2006-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Replace GNU sed detection with AC_PROG_SED
	  - Add comments
	* sigscheme/test-c/Makefile.am
	  - Add GNU sed check
	* sigscheme/test-c/collect.sh.in
	  - Replace @GSED@ with @SED@
	
2006-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add lacking ax_cflags_gcc_option.m4
	* sigscheme/configure.in
	  - Remove obsolete AC_SUBST for docdir, htmldir, objdir
	
2006-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Fix cross-compilation CFLAGS addition and simplify with
	    AX_CFLAGS_GCC_OPTION
	  - Add '-g' option to CFLAGS even if $CC is not a gcc
	  - Add gcc-specific warning flags even if $CC is not exactly 'gcc'
	  - Add -Wno-overlength-strings if available
	* sigscheme/m4/ax_cflags_gcc_option.m4
	  - New file imported from the Autoconf Macro Archive
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Replace --enable-docdir and --enable-htmldir with standard
	    --docdir and --htmldir of autoconf 2.60
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/check_gnu_make.m4
	  - (CHECK_GNU_MAKE): Fix broken macro expansion. At least my
	    environment, the original coding style prevents the macro from
	    being expanded into configure
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_CONFIGURATOR): Fix broken CHECK_GNU_MAKE invocation
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add lacking ax_feature_configurator.m4 and
	    check_gnu_make.m4
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_CONFIGURATOR): Add CHECK_GNU_MAKE invocation
	  - (AX_FEATURE_RESOLVE_DEPENDENCIES): Replace 'gmake' with $GMAKE
	* sigscheme/m4/check_gnu_make.m4
	  - New file imported from the Autoconf Macro Archive
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_CONFIGURATOR, AX_FEATURE_VAR_X, AX_FEATURE_DEFINE,
	    AX_FEATURE_RESOLVE_DEPENDENCIES,
	    AX_FEATURE_RESOLVE_WEAK_DEPENDENCIES,
	    AX_FEATURE_DETECT_CONFLICTS): Add invocation-order guard based on
	    a state machine
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_ARG_X): Clear the predefined variable set by conf=CONF
	    to allow overriding the default
	  - (_AX_FEATURE_OVERRIDE_VALS): Fix lacking ax_feature_list_all
	    update for implied feature such as utf8_as_default by srfi75
	* sigscheme/configure.in
	  - Add srfi75->utf8_as_default dependency
	  - Add lacking singlebyte_as_default conflict rule
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_DEFINE): Fix AM_CONDITIONAL condition for the case
	    that variable is null
	* sigscheme/src/Makefile.am
	  - Cosmetic change
	* sigscheme/src/error.c
	  - (scm_error_internal): Fix double error on conf=small
	  - (scm_bool srfi34_providedp): Enclose into #if SCM_USE_SRFI34
	  - (scm_show_backtrace): Suppress warning
	* sigscheme/src/format.c
	  - (format_internal): Disable formatting into string when !SCM_USE_SRFI6
	* sigscheme/src/storage-gc.c
	  - (mark_obj, free_cell): Fix compilation on conf=small and so on
	* sigscheme/src/procedure.c
	  - (scm_p_eqvp, scm_p_equalp): Ditto
	* sigscheme/src/write.c
	  - (write_ss_scan): Ditto
	* sigscheme/src/sigscheme.h
	  - (SCM_USE_VALUES_APPLIER): New macro
	  - (SCM_MAKE_CONTINUATION, SCM_CONTINUATIONP,
	    SCM_CONTINUATION_OPAQUE, SCM_CONTINUATION_TAG,
	    SCM_CONTINUATION_SET_OPAQUE, SCM_CONTINUATION_SET_TAG): Enable
	    even if !SCM_USE_CONTINUATION, to use scm_values_applier
	  - (scm_p_read_char, scm_p_peek_char, scm_p_char_readyp,
	    scm_p_write_char): Disable when !SCM_USE_CHAR
	* sigscheme/src/storage-common.h
	  - (scm_make_continuation): Enable even if !SCM_USE_CONTINUATION, to
	    use scm_values_applier
	* sigscheme/src/storage.c
	  - (scm_make_continuation): Ditto
	* sigscheme/src/sigschemeinternal.h
	  - (scm_trace_stack): New macro to support !SCM_USE_CONTINUATION
	* sigscheme/src/eval.c
	  - (call_continuation): Disable when !SCM_USE_CONTINUATION
	  - (call): Follow the change of call_continuation()
	  - (scm_eval): Fix compilation on !SCM_USE_VECTOR
	* sigscheme/src/port.c
	  - (scm_p_read_char, scm_p_peek_char, scm_p_char_readyp,
	    scm_p_write_char): Disable when !SCM_USE_CHAR
	  - (scm_init_port): Undefine above procedures
	* sigscheme/src/sigscheme.c
	  - (scm_p_call_with_current_continuation, scm_p_dynamic_wind): New
	    macro to support !SCM_USE_CONTINUATION
	  - (scm_initialize_internal): Undefine above procedures
	* sigscheme/src/syntax.c
	  - (scm_s_define_internal): Fix compilation on !SCM_USE_HYGIENIC_MACRO
	* sigscheme/src/read.c
	  - (read_sexpression): Suppress warning
	* sigscheme/src/main.c
	  - (repl_loop): Ditto
	* sigscheme/test-c/test-storage-compact.c
	  - Disable vector test when !SCM_USE_VECTOR
	* sigscheme/test-c/test-storage.c
	* sigscheme/test-c/test-format.c
	  - Skip all test if required modules are disabled
	* sigscheme/test/test-eq.scm
	* sigscheme/test/test-eqv.scm
	* sigscheme/test/test-equal.scm
	  - Disable not implemented insensitive symbol comparison
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add default configuration values for
	    --enable-conf={regular,full,small,r5rs,siod,dev,uim}
	  - Add detailed configuration result printing
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_DEFINE): Fix AM_CONDITIONAL() condition
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_RESOLVE_WEAK_DEPENDENCIES): Change the dependent value
	    from 'weak' to 'weakyes' to avoid conflict with user-named 'weak'
	* sigscheme/configure.in
	  - Move weak dependency const_vector_literal to required dependency
	  - Keep const_list_literal in weak dependencies list and commented out
	  - Reorder dependencies (weak dependencies must be placed at last)
	
2006-12-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_VAR_X, _AX_FEATURE_OVERRIDE_VALS): Add
	    $ax_feature_list_implicit update
	  - (AX_FEATURE_DETECT_CONFLICTS): Implement. Works fine
	* sigscheme/configure.in
	  - Fix a typo s/siod_bugs/compat_siod_bugs/
	
2006-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_VAR_X, AX_FEATURE_ARG_X): Replace 4th arg val-choices
	    with val-regexp
	  - (AX_FEATURE_VAR_Y, AX_FEATURE_VAR_N, AX_FEATURE_ARG_Y,
	    AX_FEATURE_ARG_N): Replace the val-choices expression with regexp
	* sigscheme/configure.in
	  - Ditto
	
2006-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_feature_configurator.m4
	  - (AX_FEATURE_CONFIGURATOR): Merge AX_FEATURE_ID_PREFIX() functionality
	  - (AX_FEATURE_ID_PREFIX): Removed
	  - (AX_FEATURE_VAR_X):
	    * Fix feature_no variable handling
	    * Add feature list handling
	  - (_AX_FEATURE_OVERRIDE_VALS): New macro
	  - (AX_FEATURE_RESOLVE_DEPENDENCIES):
	    * Add 'group' arg
	    * Implement the dependencies resolver. The GNU make dependency
	      will soon be removed
	  - (AX_FEATURE_RESOLVE_WEAK_DEPENDENCIES): Implement
	* sigscheme/configure.in
	  - Follow above changes
	
2006-12-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add configuration rules for --enable and hidden variables based on
	    the ax_feature_configurator.m4. Since the macro suite is still
	    lacking dependencies resolution feature, some parts of
	    configuration is weird. But the rule itself is expected as
	    properly workable
	  - Replace configuration result printing
	* sigscheme/src/config-old.h
	  - (SCM_SOFT_ASSERT, SCM_DEBUG_GC, SCM_DEBUG_PORT, SCM_DEBUG_PARSER,
	    SCM_DEBUG_MACRO, SCM_DEBUG_ENCODING, SCM_DEBUG_BACKTRACE_SEP,
	    SCM_DEBUG_BACKTRACE_VAL, SCM_USE_INTERNAL_DEFINITIONS,
	    SCM_STRICT_TOPLEVEL_DEFINITIONS, SCM_USE_BACKTRACE): Move to
	    configure.in
	  - Dependency resolution codes are replaced with the rules in
	    configure.in
	* sigscheme/m4/ax_feature_configurator.m4
	  - New file
	  - (AX_FEATURE_CONFIGURATOR, AX_FEATURE_ID_PREFIX, AX_FEATURE_VAR_Y,
	    AX_FEATURE_VAR_N, AX_FEATURE_VAR_X, AX_FEATURE_ARG_Y,
	    AX_FEATURE_ARG_N, AX_FEATURE_ARG_X, AX_FEATURE_DEFINE,
	    AX_FEATURE_RESOLVE_DEPENDENCIES,
	    AX_FEATURE_RESOLVE_WEAK_DEPENDENCIES,
	    AX_FEATURE_DETECT_CONFLICTS): New macro
	
2006-12-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Remove all --enable handlings
	  - Add section header comments
	  - Replace obsolete AC_HELP_STRING with AS_HELP_STRING
	  - Move AC_GNU_SOURCE to immediately after initialization
	
2006-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c_arithmetic_rshift.m4
	* sigscheme/m4/ax_c_referenceable_passed_va_list.m4
	  - Rewrite description style to the standard of Autoconf Macro
	    Archive, and fix some English expressions. Thanks Peter Simons for
	    the work
	
2006-12-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Fix broken --enable-debug handling
	  - Add -DNDEBUG if --disable-debug
	* sigscheme/src/config-old.h
	  - (SCM_CHICKEN_DEBUG): Removed
	  - (SCM_SOFT_ASSERT): New macro
	  - Fix broken SCM_USE_AGGREGATED_GLOBAL_VARS detection
	* sigscheme/src/sigscheme.h
	  - (SCM_ASSERT): Follow the replacement of SCM_CHICKEN_DEBUG with
	    SCM_SOFT_ASSERT. Now SCM_ASSERT() can be enabled without SCM_DEBUG
	* sigscheme/src/scmport.h
	  - (SCM_PORT_ASSERT): Support SCM_ASSERT()
	
	* sigscheme/src/continuation.c
	  - (struct continuation_frame, scm_call_with_current_continuation):
	    Fix #if SCM_DEBUG with SCM_USE_BACKTRACE
	
2006-12-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	  - (scm_error_obj): Replace 'volatile' with SCM_UNUSED for dummy_va
	    to suppress warning
	
2006-12-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* r5rs/sigscheme/QALog
	  - Update
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_INT_MAX): Fix unneeded paren of previous commit
	  - (SCM_SAL_MAKE_INT, SCM_SAL_MAKE_CHAR): Limit passed value
	    range. This change does not affect extracted value
	  - (SCM_SAL_INT_VALUE, SCM_SAL_CHAR_VALUE, SCM_MAKE_CONST): Cosmetic
	    change
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/scmint.h
	  - (SCM_MAX, SCM_MIN): New macro
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_CHAR_BITS, SCM_SAL_CHAR_MAX): Fix exceeded value and type
	    of the constant by limiting by size of scm_ichar_t
	  - (SCM_SAL_INT_BITS, SCM_SAL_INT_MAX, SCM_SAL_INT_MIN): Fix exceeded
	    value and type of the constant by limiting by size of scm_int_t
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Add validation for size constraints of
	    char and int of SAL
	
	* sigscheme/doc/Makefile.am
	  - (EXTRA_DIST): Remove TODO
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/test-storage-compact.c
	  - Fix broken unaligned ScmCell allocation of testcase "misc obj
	    fullsize S->X" and "misc obj 16-bit S->X". Thanks Etsushi for
	    report
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c_arithmetic_rshift.m4
	* sigscheme/m4/ax_c___alignof__.m4
	* sigscheme/m4/ax_c_data_aligned.m4
	* sigscheme/m4/ax_c_referenceable_passed_va_list.m4
	  - Add license information
	* sigscheme/m4/ax_lib_glibc.m4
	  - Ditto
	  - Cosmetic changes
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/scmint.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/storage-fatty.h
	  - Cosmetic changes
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fix the gcc-dependent and native-compile only ScmObj
	  alignment detection for platforms that have (alignof(ScmObj) <
	  sizeof(ScmObj)), such as m68k. Now it can properly detect the
	  alignment on compile-time without gcc dependency. Actual m68k cross
	  compile is worked
	
	* sigscheme/configure.in
	  - Comment out AX_C___ALIGNOF__
	  - Comment out AX_C_DATA_ALIGNED
	  - Add AC_CHECK_ALIGNOF() for all signed native type and stdint type
	* sigscheme/src/scmint.h
	  - (ALIGNOF_SCM_INT_T, ALIGNOF_SCM_UINT_T, ALIGNOF_SCM_INTREF_T,
	    ALIGNOF_SCM_UINTREF_T, ALIGNOF_SCM_INTOBJ_T,
	    ALIGNOF_SCM_UINTOBJ_T, ALIGNOF_SCM_ICHAR_T, ALIGNOF_SCM_BYTE_T,
	    ALIGNOF_SCM_WCHAR_T): New macro
	* sigscheme/src/sigschemeinternal.h
	  - (ALIGNOF_SCMOBJ): Removed
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-compact.h
	  - (ALIGNOF_SCMOBJ): New macro
	* sigscheme/src/sigscheme.h
	  - Revise the comment about SAL specification
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit withdraw sigscheme-stdint.h since it lacks INTPTR_T_MAX,
	  INTMAX_T_MAX and so on, and generated types cannot testable via
	  AC_CHECK_SIZEOF(). Use scmint.h instead
	
	* sigscheme/configure.in
	  - Require autoconf 2.60b to enable various useful macros
	  - Require automake 1.10
	  - (AC_CHECK_HEADERS): Add stdint.h, inttypes.h, sys/inttypes.h,
	    sys/types.h for stdint-compatible definitions
	  - Remove sigscheme-stdint.h creation
	  - Add stdint.h -compatible type definition macros such as
	    AC_TYPE_UINTPTR_T
	  - Cosmetic changes
	* sigscheme/src/scmint.h
	  - Include stdint.h, inttypes.h, sys/inttypes.h, sys/types.h if
	    exist, for stdint-compatible definitions
	  - Remove sigscheme-stdint.h
	  - (SCM_STDINT_MIN, SCM_STDINT_MAX, INT8_MIN, INT16_MIN, INT32_MIN,
	    INT64_MIN, INTMAX_MIN, INTPTR_MIN, INT8_MAX, INT16_MAX, INT32_MAX,
	    INT64_MAX, INTMAX_MAX, INTPTR_MAX, UINT8_MAX, UINT16_MAX,
	    UINT32_MAX, UINT64_MAX, UINTMAX_MAX, UINTPTR_MAX): New macro
	  - (scm_ichar_t, SIZEOF_SCM_ICHAR_T, SCM_ICHAR_T_MAX,
	    SCM_ICHAR_T_MIN): Change actual type from int_fast32_t to int32_t
	    to increase portability
	* sigscheme/src/symbol.c
	* sigscheme/src/encoding.h
	* sigscheme/src/write.c
	* sigscheme/src/encoding-dummy.h
	* sigscheme/src/storage-gc.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/alloc.c
	* sigscheme/src/scmport.h
	* sigscheme/test-c/test-format.c
	  - Remove sigscheme-stdint.h inclusion
	* sigscheme/src/Makefile.am
	  - (sigscheme-combined-trim.h, nodist_pkginclude_HEADERS,
	    DISTCLEANFILES): Remove sigscheme-stdint.h
	* sigscheme/include/sigscheme/Makefile.am
	  - Remove sigscheme-stdint.h
	* sigscheme/autogen.sh
	  - Remove an unneeded comment
	* sigscheme/NEWS
	  - Update
	
2006-12-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_create_stdint_h.m4
	  - Update to version 2006-10-13
	* sigscheme/m4/ax_c_referenceable_passed_va_list.m4
	  - Add a comment
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c___alignof__.m4
	  - Add tests for ((__alignof__(type)) != 0)
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c_arithmetic_rshift.m4
	  - New file
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add ax_c_arithmetic_rshift.m4
	* sigscheme/configure.in
	  - Add AX_C_ARITHMETIC_RSHIFT
	* sigscheme/src/storage-compact.h
	  - (SCM_ARSHIFT):
	    * Fix lacking cast to (scm_uintobj_t) for the result
	    * Rename the surrounding #if macro from HAVE_ARITHMETIC_SHIFT to
	      HAVE_ARITHMETIC_RSHIFT
	* sigscheme/TODO
	  - Update
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c___alignof__.m4
	  - New file
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add ax_c___alignof__.m4
	* sigscheme/configure.in
	  - Add AX_C___ALIGNOF__
	* sigscheme/TODO
	  - Update
	
	* sigscheme/m4/ax_c_referenceable_passed_va_list.m4
	  - Fix code quoting
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c_referenceable_passed_va_list.m4
	  - New file
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add ax_c_referenceable_passed_va_list.m4
	* sigscheme/configure.in
	  - Add AX_C_REFERENCEABLE_PASSED_VA_LIST and
	    AC_DEFINE(HAVE_AUTOREFERRED_PASSED_VA_LIST)
	* sigscheme/src/config-old.h
	  - (HAVE_REFERENCEABLE_PASSED_VA_LIST,
	    HAVE_AUTOREFERRED_PASSED_VA_LIST): Removed and replaced with the
	    autoconf macro
	* sigscheme/TODO
	  - Update
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	  - (scm_error_obj): Suppress the warning about dummy_va
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/README
	* sigscheme/AUTHORS
	* sigscheme/QALog
	  - Update
	
	* sigscheme/MEMO.tkng
	* sigscheme/doc/TODO
	  - Removed since obsoleted
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST):
	    * Remove test-num.scm, test-number-conv.scm
	    * Add test-number-io.scm
	* sigscheme/test/test-number-conv.scm
	  - Rename to test-number-io.scm
	* sigscheme/test/test-number-io.scm
	  - Renamed from test-number-conv.scm
	* sigscheme/test/test-num.scm
	  - Removed since obsoleted and replaced with test-number-*.scm
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-letstar.scm, test-letrec.scm and
	    test-named-let.scm
	* sigscheme/test/test-let.scm
	  - Split off test-{named-let,letstar,letrec}.scm
	* sigscheme/test/test-letstar.scm
	* sigscheme/test/test-letrec.scm
	* sigscheme/test/test-named-let.scm
	  - New file copied from test-let.scm
	  - Move let*, letrec and named let tests into the files
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit split the R5RS numeric I/O procedures off to number-io.c
	  from number.c
	
	* sigscheme/configure.in
	  - Add use_number_io, USE_NUMBER_IO, SCM_USE_NUMBER_IO
	* sigscheme/src/sigscheme.h
	  - (scm_string2number, scm_int2string, scm_p_number2string,
	    scm_p_string2number): Enclose into #if SCM_USE_NUMBER_IO
	* sigscheme/src/sigschemeinternal.h
	  - (ERRMSG_FIXNUM_OVERFLOW, INT_VALID_VALUEP, INT_OUT_OF_RANGEP):
	    Moved from number.c
	* sigscheme/src/number.c
	  - (ERRMSG_FIXNUM_OVERFLOW, INT_VALID_VALUEP, INT_OUT_OF_RANGEP):
	    Move to sigschemeinternal.h
	  - Exclude stdlib.h, limits.h, errno.h and string.h for numeric I/O
	  - (VALID_RADIXP, prepare_radix, scm_int2string, scm_p_number2string,
	    scm_string2number, scm_p_string2number): Move to number-io.c
	* sigscheme/src/number-io.c
	  - New file copied from number.c
	  - (VALID_RADIXP, prepare_radix, scm_int2string, scm_p_number2string,
	    scm_string2number, scm_p_string2number): Moved from number-io.c
	* sigscheme/src/sigscheme.c
	  - Include functable-r5rs-number-io.c
	  - (scm_initialize_internal): Register the func table
	* sigscheme/src/Makefile.am
	  - (FUNC_TABLES): Add functable-r5rs-number-io.c
	  - Add rule for functable-r5rs-number-io.c
	  - (libsscm_la_SOURCES): Add number-io.c
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - Rename all function table variable names such as
	    scm_srfi60_func_info_table to scm_functable_srfi60
	* sigscheme/src/module-sscm-ext.c
	  - (scm_initialize_sscm_extensions): Follow the renaming of func table
	* sigscheme/src/module-siod.c
	  - (scm_initialize_siod): Ditto
	* sigscheme/src/module-srfi1.c
	  - (scm_initialize_srfi): Ditto
	* sigscheme/src/module-srfi2.c
	  - (scm_initialize_srfi2): Ditto
	* sigscheme/src/module-srfi6.c
	  - (scm_initialize_srfi6): Ditto
	* sigscheme/src/module-srfi8.c
	  - (scm_initialize_srfi8): Ditto
	* sigscheme/src/module-srfi23.c
	  - (scm_initialize_srfi23): Ditto
	* sigscheme/src/module-srfi28.c
	  - (scm_initialize_srfi28): Ditto
	* sigscheme/src/module-srfi34.c
	  - (scm_initialize_srfi34): Ditto
	* sigscheme/src/module-srfi38.c
	  - (scm_initialize_srfi38): Ditto
	* sigscheme/src/module-srfi48.c
	  - (scm_initialize_srfi48): Ditto
	* sigscheme/src/module-srfi60.c
	  - (scm_initialize_srfi60): Ditto
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit split the function table files to allow fine-grained feature
	  enabling/disabling
	
	* sigscheme/src/Makefile.am
	  - (FUNC_TABLES):
	    * Remove functable-r5rs-procedure.c
	    * Add functable-r5rs-core.c, functable-r5rs-qquote.c,
	      functable-r5rs-macro.c, functable-r5rs-promise.c,
	      functable-r5rs-number.c, functable-r5rs-char.c,
	      functable-r5rs-string.c, functable-r5rs-string-procedure.c,
	      functable-r5rs-vector.c, functable-r5rs-port.c,
	      functable-r5rs-read.c, functable-r5rs-write.c,
	      functable-r5rs-load.c, functable-r5rs-deep-cadrs.c
	  - Add generation rules for above function table files
	  - Rename function table variable names other than optional modules
	  - (R5RS_SYNTAX_SRCS, R5RS_PROC_SRCS, SSCM_PROC_SRCS): Removed
	  - (SSCM_CORE_SRCS, R5RS_CORE_SRCS): New variable
	  - (libsscm_la_SOURCES): Add each optional files directly
	* sigscheme/src/sigscheme.c
	  - Remove functable-r5rs-procedure.c
	  - Include the new separated function tables
	  - (scm_initialize_internal):
	    * Register the new separated function tables
	    * Follow the function table renamings
	* sigscheme/src/syntax.c
	  - (scm_init_syntax): Follow the function table renaming
	* sigscheme/src/port.c
	  - Include functable-r5rs-port.c
	  - (scm_init_port): Register the func table
	* sigscheme/src/load.c
	  - Include functable-r5rs-load.c
	  - (scm_init_load): Register the func table
	* sigscheme/src/macro.c
	  - Include functable-r5rs-macro.c
	  - (scm_init_macro): Register the func table
	* sigscheme/src/write.c
	  - Include functable-r5rs-write.c
	  - (scm_init_writer): Register the func table
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Remove string_core conf var
	  - Add string_procedure conf var
	* sigscheme/src/string-core.c
	  - Rename to string.c
	* sigscheme/src/string.c
	  - Renamed from string-core.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/number.c
	  - s/SCM_USE_STRING_CORE/SCM_USE_STRING/g
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SRCS): Follow the file renaming
	  - s/USE_STRING_CORE/USE_STRING/
	
2006-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/string.c
	  - Rename to string-procedure.c
	* sigscheme/src/string-procedure.c
	  - Renamed from string.c
	* sigscheme/src/sigscheme.h
	  - Enclose function decls for string-procedure.c into #if
	    SCM_USE_STRING_PROCEDURE
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SRCS): Follow the file renaming
	
2006-12-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_DEFAULT_N_HEAPS_MAX): Fix broken size calculation on storage-fatty
	* sigscheme/src/storage-gc.c
	  - (initialize_heap): Fix invalid pointer initialization by long on
	    LL64 env
	* sigscheme/QALog
	  - Update
	
2006-12-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_DEFAULT_N_HEAPS_MAX): Fix broken size calculation
	* sigscheme/src/storage-gc.c
	  - (initialize_heap): Limit max heap size by countable number of
	    cells
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] storage-compact.h
	
	* sigscheme/src/storage-compact.h
	  - Rewrite and complement deprecated explanation about the
	    implementation
	  - (SCM_SIGNED_TYPEP, SCM_SIGN_BIT, SCM_MISC_CAST_X, SCM_MISC_CAST_Y,
	    SCM_ALIGNED_SYMBOL_NAME, SCM_STRING_MUTABLE_BIT_WIDTH,
	    SCM_VECTOR_MUTABLE_BIT_WIDTH): New macro
	  - (SCM_MAKE_MASK, SCM_MAKE_PTAG, SCM_MAKE_IMMID, SCM_SAL_MAKE_INT,
	    SCM_SAL_MAKE_CHAR, SCM_MAKE_CONST, SCM_MAKE_MTAG_L1,
	    SCM_MAKE_MTAG_L2, SCM_MAKE_MTAG_L3, SCM_MISC_INIT,
	    SCM_MISC_SET_X_NASSERT, SCM_MISC_SET_Y_NASSERT,
	    SCM_STRING_MUTABLE_BIT, SCM_VECTOR_MUTABLE_BIT, SCM_SAL_CHAR_MAX):
	    Fix 64-bit data model capability
	  - (SCM_MISC_PUT_MTAG): Rename to SCM_MISC_ENCODE_Y()
	  - (SCM_MISC_ENCODE_Y):
	    * Renamed from SCM_MISC_PUT_MTAG()
	    * Fix 64-bit data model capability
	  - (SCM_MISC_RSHIFT): Rename to SCM_MISC_RSHIFT_Y()
	  - (SCM_MISC_RSHIFT_Y):
	    * Renamed from SCM_MISC_RSHIFT()
	    * Take YTYPE by SCM_MISC_##typ##_YTYPE
	  - (SCM_MISC_Y_NASSERT): Fix inappropriate assumption that XSPILL
	    width is always 1. Since C99 (6.5.13 Logical AND operator) defines
	    (m && n) shall result to 0 or 1, expecting n is a bad idea
	  - (SCM_MISC_Y_SPLITX): Make rshift correct and efficient by
	    signedness-sensitive SCM_MISC_RSHIFT_Y()
	  - (SCM_SAL_SYMBOL_SET_NAME, SCM_ISAL_SYMBOL_INIT): Add alignment
	    assertion for symbol name string
	  - (SCM_CELL_SYMBOL_FIN, SCM_CELL_STRING_FIN, SCM_CELL_VECTOR_FIN):
	    Simplify
	  - (SCM_SAL_STRING_LEN, SCM_SAL_VECTOR_LEN): Make meaningful with
	    SCM_*_MUTABLE_BIT_WIDTH
	  - (SCM_SAL_STRING_SET_LEN, SCM_ISAL_MUTABLE_STRING_INIT,
	    SCM_ISAL_IMMUTABLE_STRING_INIT, SCM_ISAL_STRING_INIT,
	    SCM_SAL_VECTOR_SET_LEN, SCM_ISAL_VECTOR_INIT):
	    * Ditto
	    * Fix 64-bit data model capability
	  - (SCM_SAL_VECTOR_SET_VEC, SCM_ISAL_MUTABLE_VECTOR_INIT,
	    SCM_ISAL_IMMUTABLE_VECTOR_INIT, SCM_SAL_CONTINUATION_SET_TAG):
	    Rename arg appropriately
	  - Change XALIGN of vector, port to 1 from 2. At least m68k requires this
	  - Change type of port->Y to enum ScmPortFlag from int
	  - (SCM_SAL_PORT_FLAG): Follow the port->Y type change
	  - (SCM_ARSHIFT): Simplify with SCM_SIGN_BIT()
	  - (SCM_MISC_LEVEL_L1, SCM_MISC_LEVEL_L2, SCM_MISC_LEVEL_L3): Rename
	    args to avoid confusion about the MTAG organization
	  - (SCM_MISC_SET_X_SPLITX): Add lacking parens
	  - (SCM_UNTAG_PTR, SCM_PTR, SCM_MISC_INIT_SPLITX,
	    SCM_MISC_DECLARE_TYPE, SCM_SAL_SYMBOL_NAME): Cosmetic change
	  - Cosmetic change for all SCM_MISC_DECLARE_TYPE()
	  - (SCM_SAL_NULLP, SCM_SAL_VALIDP, SCM_SAL_UNBOUNDP, SCM_SAL_FALSEP,
	    SCM_SAL_TRUEP, SCM_SAL_EOFP, SCM_SAL_UNDEFP): Removed since both
	    storage-compact and fatty will not be improved by this unadopted
	    SAL interface. The interface will appear when it is actually
	    needed by some new storage implementations
	  - Fix close paren of 'extern "C" {'
	* sigscheme/test-c/sscm-test.h
	  - (TST_EQ_FPTR, TST_NEQ_FPTR): Fix 64-bit data model capability
	* sigscheme/test-c/test-storage.c
	  - Add some 64-bit value storing tests
	* sigscheme/test-c/test-storage-compact.c
	  - Add tests for XSHIFT and XSPLIT of misc object
	* sigscheme/TODO
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-common.h
	  - Comment out unneeded 'extern "C"'
	* sigscheme/src/storage-fatty.h
	  - Ditto
	  - (SCM_SAL_CONS_CAR, SCM_SAL_CONS_CDR, SCM_SAL_DEREF): Remove
	    !SCM_DEBUG version. It is expected that compiler optimization
	    works well
	* sigscheme/src/storage-gc.c
	  - (free_cell):
	    * Simplify free() invocations
	    * Reorder type detection order on storage-fatty optimally
	    * Add false assertion
	
2006-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] syntax.c, eval.c, sigscheme.h, sigschemeinternal.h
	
	* sigscheme/src/sigscheme.h
	  - (enum ScmObjType): Add ScmFirstClassObj
	  - (SCM_SYNTACTIC_OBJECTP): New macro
	  - (scm_s_let_syntax, scm_s_letrec_syntax, scm_s_define_syntax): New
	    function
	* sigscheme/src/sigschemeinternal.h
	  - (SYNTACTIC_OBJECTP, CHECK_VALID_EVALED_VALUE): New macro
	  - (scm_s_let_internal, scm_s_letrec_internal,
	    scm_s_define_internal): New function
	* sigscheme/src/eval.c
	  - (call, map_eval): Add "syntactic keyword as value" rejection in
	    addition to multiple values rejection
	* sigscheme/src/syntax.c
	  - (CHECK_VALID_BINDEE): New macro
	  - (scm_s_if, scm_s_setx, scm_s_cond_internal, scm_s_case, scm_s_and,
	    scm_s_or, scm_s_begin): Add "syntactic keyword or multiple values
	    as value" rejection
	  - (scm_s_letstar, scm_s_body, scm_s_do): Add "multiple values as
	    value" rejection in addition to syntactic keyword rejection
	  - (scm_s_let, scm_s_letrec): Parameterize main code and split off to
	    *_internal()
	  - (scm_s_let_internal, scm_s_letrec_internal):
	    * New function split off from scm_s_let() and scm_s_letrec()
	    * Add permitted object type check for macro.c
	    * Add "multiple values as value" rejection in addition to
	      syntactic keyword rejection
	  - (define_internal): Rename to scm_s_define_internal()
	  - (scm_s_define_internal):
	    * Renamed from define_internal()
	    * Make exported
	    * Add permitted object type check for macro.c
	    * Add "multiple values as value" rejection in addition to
	      syntactic keyword rejection
	* sigscheme/src/macro.c
	  - (scm_init_macro): Remove alias definitions for let-syntax,
	    letrec-syntax and define-syntax
	  - (scm_s_let_syntax, scm_s_letrec_syntax, scm_s_define_syntax): New
	    function
	* sigscheme/src/module-srfi2.c
	  - (scm_s_srfi2_and_letstar): Add "syntactic keyword or multiple
	    values as value" rejection
	* sigscheme/test/test-define.scm
	* sigscheme/test/test-let.scm
	  - Add tests for syntactic keyword binding
	* sigscheme/test/test-values.scm
	  - Add tests for multiple values binding
	* sigscheme/test/test-eq.scm
	* sigscheme/test/test-eqv.scm
	* sigscheme/test/test-equal.scm
	  - Add tests for syntactic keyword comparation
	* sigscheme/test/test-bool.scm
	* sigscheme/test/test-symbol.scm
	* sigscheme/test/test-pair.scm
	* sigscheme/test/test-list.scm
	* sigscheme/test/test-number-pred.scm
	* sigscheme/test/test-string-core.scm
	* sigscheme/test/test-misc.scm
	  - Add tests for syntactic keyword passing to type predicate
	* sigscheme/QALog
	  - Update
	
2006-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Update version to 0.7.0
	  - Rewrite maintainer to uim@freedesktop.org
	  - Add SHA1 command detection
	  - Reorder macro instanciations
	* sigscheme/Makefile.am
	  - (DIST_SUM_LIST): Change suffix .md5 to .sum
	  - (sum): Add SHA1 hash
	  - Cosmetic change
	
	* sigscheme/COPYING
	  - Remove description about Cutter
	
	* sigscheme/NEWS
	  - Add an explanation
	
2006-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (ALIGNOF_SCMOBJ): New macro
	* sigscheme/src/storage-gc.c
	  - (gc_mark_locations): Add workaround for non-aligned ScmObj on stack
	* sigscheme/QALog
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/sscm-test.h
	  - (tst_format, tst_puts): Add SCM_UNUSED attribute to suppress
	    warning
	* sigscheme/test-c/utils.c
	  - (malloc_aligned_8, aligned_dup): Ditto
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit replace the Cutter-based testing framework with the new
	  framework by Jun Inoue
	
	* sigscheme/configure.in
	* sigscheme/doc/test-c.txt
	* sigscheme/TODO
	  - s/test-c/test-c2/g
	* sigscheme/Makefile.am
	  - (SUBDIRS): s/test-c/test-c2/
	* sigscheme/test-c2
	* sigscheme/test-c2/Makefile.am
	* sigscheme/test-c2/README
	* sigscheme/test-c2/collect.sh.in
	* sigscheme/test-c2/sscm-test.h
	* sigscheme/test-c2/test-alignment.c
	* sigscheme/test-c2/test-format.c
	* sigscheme/test-c2/test-gc-protect-stack.c
	* sigscheme/test-c2/test-gc.c
	* sigscheme/test-c2/test-global.c
	* sigscheme/test-c2/test-length.c
	* sigscheme/test-c2/test-minishell.c
	* sigscheme/test-c2/test-storage-compact.c
	* sigscheme/test-c2/test-storage.c
	* sigscheme/test-c2/test-strcasecmp.c
	* sigscheme/test-c2/utils.c
	  - Move to test-c
	* sigscheme/test-c
	  - Moved from test-c2
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Remove Cutter detection
	  - Remove test-c/Makefile
	* sigscheme/Makefile.am
	  - (SUBDIRS): Remove test-c
	* sigscheme/test-c
	* sigscheme/test-c/Makefile.am
	* sigscheme/test-c/README
	* sigscheme/test-c/cutter-r20-yamaken-extension.diff
	* sigscheme/test-c/cutter-sscm.h
	* sigscheme/test-c/test-storage-compact.c
	* sigscheme/test-c/test_template.c
	  - Removed
	* sigscheme/doc/test-c.txt
	  - Remove descriptions about Cutter
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/test_alignment.c
	  - Removed
	* sigscheme/test-c2/test-alignment.c
	  - New file copied from test-c/test_alignment.c
	  - Port to sscm-test.h. No actual test logic is changed
	* sigscheme/test-c/test_global.c
	  - Removed
	* sigscheme/test-c2/test-global.c
	  - New file copied from test-c/test_global.c
	  - Port to sscm-test.h. No actual test logic is changed
	* sigscheme/test-c/test_gc_protect_stack.c
	  - Removed
	* sigscheme/test-c2/test-gc-protect-stack.c
	  - New file copied from test-c/test_gc_protect_stack.c
	  - Port to sscm-test.h. No actual test logic is changed
	* sigscheme/test-c/Makefile.am
	  - Remove test_alignment.c, test_global.c, test_gc_protect_stack.c
	* sigscheme/test-c2/Makefile.am
	  - (EXTRA_DIST): Add test-alignment.c, test-global.c,
	    test-gc-protect-stack.c
	  - (TESTS): Add test-alignment-coll, test-global-coll,
	    test-gc-protect-stack-coll
	* sigscheme/test-c2/sscm-test.h
	  - (tst_count, tst_name): Add SCM_UNUSED to suppress warning
	* sigscheme/test-c2/test-format.c
	  - Remove a comment
	* sigscheme/TODO
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/runtest.sh
	  - Simplify
	
	* sigscheme/TODO
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] syntax.c, eval.c, continuation.c
	
	* Proper tail recursion conformance tests have been passed with
	  test-tail-rec.scm and runtest-tail-rec.sh on both fatty and compact
	  on x86_64-unknown-linux-gnu and i386-unknown-freebsd
	
	* sigscheme/test/test-tail-rec.scm
	  - (test-with-exception-handler?, test-guard?): New variable
	  - (rec-with-exception-handler, rec-guard): New procedure
	  - Add improper tail recursion test for 'guard' and
	    'with-exception-handler' (disabled by default)
	* sigscheme/TODO
	* sigscheme/QALog
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] format.c
	
	* sigscheme/test-c2/test-format.c
	  - (M32, M64): New macro
	  - Add a 64-bit pointer format test
	  - Add lacking 64-bit tests for ~MU, ~MX, ~MO, ~MB
	* sigscheme/test/test-srfi48.scm
	  - Simplify
	* sigscheme/QALog
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/test-format.c
	  - Cosmetic changes. No actual test logic is changed
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/test_format.c
	  - Removed
	* sigscheme/test-c/Makefile.am
	  - Remove test_format.c
	* sigscheme/test-c2/test-format.c
	  - New file copied from test-c2/test_format.c
	  - Port to sscm-test.h. No actual test logic is changed
	* sigscheme/test-c2/Makefile.am
	  - (EXTRA_DIST): Add test-format.c
	  - (TESTS): Add test-format-coll
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/sscm-test.h
	  - Include stdarg.h
	  - (tst_format): Fix broken va_list handling which causes SEGV on
	    x86_64-unknown-linux-gnu
	* sigscheme/test-c2/Makefile.am
	  - Fix unwanted *-coll.c removal on --disable-maintainer-mode
	  - Add GNU sed existence check to dist-hook
	* sigscheme/NEWS
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] number.c
	
	* sigscheme/src/number.c
	  - (scm_string2number): Fix broken out of range error detection which
	    fails every conversion once after the error has occurred
	* sigscheme/test/test-number-literal.scm
	* sigscheme/test/test-number-cmp.scm
	* sigscheme/test/test-number-arith.scm
	  - Fix 64-bit tests
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (union format_args): Removed
	  - (struct format_args): Change internal definitions and make
	    usable with C89
	  - (POP_FORMAT_ARG, format_directive, format_internal, scm_lformat):
	    Follow the struct format_args change and simplify
	  - (scm_vformat):
	    * Ditto
	    * Fix broken va_list passing on x86_64 platform
	* sigscheme/src/config-old.h
	  - (HAVE_REFERENCEABLE_PASSED_VA_LIST,
	    HAVE_AUTOREFERRED_PASSED_VA_LIST): New macro
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] scmport-file.c
	
	* sigscheme/src/scmport-file.c
	  - (fileport_puts): Fix *BSD-dependent error detection for fputs(3)
	    with ISO 9899:1999
	  - (fileport_close): Detect error by explicit EOF check for fclose(3)
	  - (fileport_flush): Detect error by explicit EOF check for fflush(3)
	* sigscheme/QALog
	  - Update
	
2006-12-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] encoding-dummy.h
	
	* sigscheme/src/encoding-dummy.h
	  - (scm_mb_find_codec): Add parens
	* sigscheme/QALog
	  - Update
	
2006-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] storage-fatty.h, storage-common.h, storage.c, storage-gc.c
	
	* sigscheme/src/storage-fatty.h
	  - (SCM_SAL_SYMBOL_SET_NAME, SCM_SAL_SYMBOL_SET_VCELL,
	    SCM_SAL_STRING_SET_LEN): Rename arg
	  - (SCM_SAL_RECLAIM_CELL, SCM_SAL_INVALID_REF, SCM_SAL_INVALID): Add
	    surrounding parens
	  - Cosmetic changes
	* sigscheme/src/storage.c
	  - Exclude string.h which included in encoding-dummy.h
	  - (SCM_CHAR_INIT, SCM_INT_INIT, SCM_HMACRO_INIT, SCM_FARSYMBOL_INIT,
	    SCM_SUBPAT_INIT): Rename arg
	  - (SCM_SYMBOL_INIT, SCM_CONTINUATION_INIT):
	    * Ditto
	    * Cosmetic change
	  - (SCM_STRING_INIT, SCM_MUTABLE_STRING_INIT,
	    SCM_IMMUTABLE_STRING_INIT, SCM_VECTOR_INIT,
	    SCM_MUTABLE_VECTOR_INIT, SCM_IMMUTABLE_VECTOR_INIT, SCM_PORT_INIT,
	    SCM_C_POINTER_INIT): Cosmetic change
	  - (initialize_special_constants): Enclose into #if
	    SCM_USE_STORAGE_FATTY
	  - (scm_make_string_internal): Rename arg
	  - (scm_init_storage):
	    * Remove unneeded SIOD compatibility
	    * Enclose initialize_special_constants() invocation into #if
	      SCM_USE_STORAGE_FATTY
	  - (scm_fin_storage): Reorder finalizers
	  - (scm_make_immutable_vector): Simplify
	  - (scm_type): Fix an error message
	* sigscheme/src/storage-gc.c
	  - (l_save_regs_buf): Move place in the static_gc global vars
	  - (scm_fin_gc): Reorder finalizers
	  - (scm_alloc_cell): Remove unneeded variable initialization
	  - (gc_mark_and_sweep): Modify debug message
	  - (mark_obj):
	    * Cosmetic change
	    * Fix lazy conditional compilation
	  - (free_cell): Add placeholders for unhandled types of storage-fatty
	* sigscheme/src/storage-common.h
	  - Cosmetic changes
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal):
	    * Move early stage initializations to scm_initialize() to fix the
	      broken GC protection reported in
	      http://d.hatena.ne.jp/jun0/20060627. Thanks Jun Inoue
	    * Remove storage_conf arg
	  - (scm_initialize): Moved early stage initializations from
	    scm_initialize_internal()
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	  - (scm_error_internal): Add ":" immediately after msg if error
	    object is passed
	* sigscheme/doc/spec.txt
	  - Update "Superfluous arguments" section
	* sigscheme/QALog
	  - Update
	
2006-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] sigscheme.h, sigschemeinternal.h
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_string2number): Move to sigscheme.h
	  - (scm_initialize_sscm_extensions, scm_initialize_siod,
	    scm_initialize_srfi1, scm_initialize_srfi2, scm_initialize_srfi6,
	    scm_initialize_srfi8, scm_initialize_srfi23,
	    scm_initialize_srfi28, scm_initialize_srfi34,
	    scm_initialize_srfi38, scm_initialize_srfi48,
	    scm_initialize_srfi60): Moved from sigscheme.h
	  - (ENSURE_TYPE): Fix C++ reserved keyword 'typename' with '_typename'
	  - (ICHAR_ALPHABETICP): Optimize
	  - (ENSURE_MUTABLE_CONS): Complement surrounding parens to args
	  - (SCM_CHECK_PROPER_LIST_TERMINATION): Complement SCM_EMPTY_EXPR
	  - (ENSURE_INT, ENSURE_CONS, ENSURE_SYMBOL, ENSURE_CHAR,
	    ENSURE_STRING, ENSURE_FUNC, ENSURE_CLOSURE, ENSURE_VECTOR,
	    ENSURE_PORT, ENSURE_CONTINUATION, ENSURE_PROCEDURE, ENSURE_ENV,
	    ENSURE_VALID_ENV, ENSURE_ERROBJ, ENSURE_LIST, ENSURE_IDENTIFIER):
	    Cosmetic changes
	* sigscheme/src/sigscheme.h
	  - (scm_string2number): Moved from sigscheme.h
	  - (scm_initialize_sscm_extensions, scm_initialize_siod,
	    scm_initialize_srfi1, scm_initialize_srfi2, scm_initialize_srfi6,
	    scm_initialize_srfi8, scm_initialize_srfi23,
	    scm_initialize_srfi28, scm_initialize_srfi34,
	    scm_initialize_srfi38, scm_initialize_srfi48,
	    scm_initialize_srfi60): Move to sigschemeinternal.h
	  - (SCM_SCMOBJ_ALIGNED): Replace sizeof(ScmObj) with SIZEOF_SCMOBJ
	  - (SCM_ENSURE_LIVE_PORT, SCM_WRITE_SS, SCM_VALUE_FORMAT_INIT,
	    SCM_VALUE_FORMAT_INIT4, SCM_VALUE_FORMAT_SPECIFIEDP,
	    SCM_STRLEN_UNKNOWN): Complement surrounding parens to args
	  - (enum ScmFuncTypeCode): Add compilation error condition for
	    (SCM_FUNCTYPE_MAND_MAX >= 6)
	  - (enum ScmPortFlag): Cosmetic changes
	* sigscheme/src/storage-common.h
	  - Cosmetic change
	* sigscheme/QALog
	  - Update
	
2006-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] global.h, global-aggregated.c
	
	* This commit fix broken aggregated global variables handling
	
	* sigscheme/src/global.h
	  - (SCM_DECLARE_EXPORTED_VARS): Add appripriate symbol export control
	    macro
	  - (SCM_DECLARE_AGGREGATED_GLOBAL_VARS,
	    SCM_DEFINE_AGGREGATED_GLOBAL_VARS,
	    SCM_DEFINE_GLOBAL_VARS_INSTANCE_ACCESSOR,
	    SCM_DEFINE_EXPORTED_VARS):
	    * Ditto
	    * Rename dummy variable name to avoid symbol conflict
	  - (SCM_EXTERN): Rename dummy variable name to avoid symbol conflict
	  - (SCM_GLOBAL_VARS_INSTANCE): Fix broken dereference on
	    SCM_USE_AGGREGATED_GLOBAL_VARS
	  - Add compile error condition on (SCM_USE_AGGREGATED_GLOBAL_VARS &&
	    !SCM_COMBINED_SOURCE)
	* sigscheme/src/global-aggregated.c
	  - Add lacking SCM_DECLARE_AGGREGATED_GLOBAL_VARS() and
	    SCM_DEFINE_AGGREGATED_GLOBAL_VARS() invocation
	  - (scm_aggregated_global_vars_init, scm_aggregated_global_vars_fin,
	    scm_aggregated_global_vars_init, scm_aggregated_global_vars_init):
	    Add lacking SCM_EXPORT
	* sigscheme/src/scmport-mbchar.h
	  - (ScmMultiByteCharPort_vptr): Remove const qualifier to fix
	    writable static data dependency
	* sigscheme/src/scmport-mbchar.c
	  - (ScmMultiByteCharPort_vptr):
	    * Remove const qualifier to fix writable static data dependency
	    * Remove compile-time initialization to fix writable static data
	      dependency
	  - (scm_mbcport_init): Initialize ScmMultiByteCharPort_vptr
	* sigscheme/src/scmport-sbchar.c
	  - (ScmSingleByteCharPort_vptr): Remove compile-time initialization
	    to fix writable static data dependency
	  - (scm_sbcport_init): Initialize ScmSingleByteCharPort_vptr
	* sigscheme/QALog
	  - Update
	
2006-12-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] strcasecmp.c
	
	* sigscheme/src/strcasecmp.c
	  - (scm_strcasecmp): Simplify
	* sigscheme/test-c2/test-strcasecmp.c
	  - New file copied from test-c/test_strcasecmp.c
	  - Add tests for less than and greater than
	* sigscheme/test-c2/Makefile.am
	  - (EXTRA_DIST, TESTS): Add test-strcasecmp.c
	* sigscheme/test-c/test_strcasecmp.c
	  - Removed
	* sigscheme/test-c/Makefile.am
	  - (noinst_LTLIBRARIES, libtest_strcasecmp_la_SOURCES): Removed
	* sigscheme/QALog
	  - Update
	
2006-12-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* [QA] format.c, module-srfi28.c, module-srfi48.c
	
	* sigscheme/src/sigscheme.h
	  - (scm_pretty_print): Removed
	* sigscheme/src/format.c
	  - (PRETTY_PRINT_PROCEDURE_NAME): Removed
	  - (ERRMSG_INVALID_ESCSEQ): New macro
	  - (NEWLINE_CHAR): Rewrite as logically meaningful
	  - (scm_pretty_print): Removed
	  - (format_directive):
	    * Replace scm_pretty_print() with standard 'write' procedure. This
	      also fixed port argument inacceptance of 'pretty-print'
	    * Modify error message
	  - (read_number_prefix): Fix broken number prefix acceptance such as
	    "~,f", "~1,f", "~,1f"
	  - (scm_init_format): Follow the removal of the macro
	* sigscheme/src/module-srfi48.c
	  - (scm_initialize_srfi48): Define 'pretty-print' as alias to 'write'
	* sigscheme/test/test-srfi48.scm
	  - Add some tests
	* sigscheme/test/test-srfi28.scm
	  - Add a test
	* sigscheme/doc/spec.txt
	  - Add description about SRFI-28 and SRFI-48
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-12-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SSCM_VERSION_MAJOR, SSCM_VERSION_MINOR, SSCM_VERSION_PATCHLEVEL,
	    SSCM_VERSION_REQUIRE): New macro
	* sigscheme/src/Makefile.am
	  - Add encoding-dummy.h to sigscheme-combined-trim.h generation
	* sigscheme/NEWS
	  - Update
	* sigscheme/QALog
	  - Add encoding-dummy.h record
	
2006-12-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] write.c module-srfi38.c
	
	* sigscheme/src/write.c
	  - (GET_DEFINDEX): Removed
	  - (enum OutputType): Reorder the values
	  - (hash_entry, write_ss_context, hash_lookup, get_shared_index):
	    Change type of the datum indices from int to scm_intobj_t to fix
	    possible overflow on 64-bit platforms
	  - (write_obj):
	    * Ditto
	    * Remove #if SCM_USE_PORT
	    * Simplify valuepacket handling
	    * Add placeholders for ScmRational, ScmReal and ScmComplex
	  - (write_list):
	    * Change type of the datum indices from int to scm_intobj_t to fix
	      possible overflow on 64-bit platforms
	    * Remove unneeded null object printing
	  - (write_ss_internal): Fix 64-bit incapable index handling
	  - (write_constant): Remove SIOD-compatible eof object representation
	  - (write_port): Remove #if SCM_USE_PORT enclosure since write.c
	    itself requires it
	  - (write_internal): Modify error message
	* sigscheme/src/module-srfi38.c
	  - (scm_p_srfi38_write_with_shared_structure): Fix inacceptance of
	    optional 'optarg' argument defined in SRFI-38
	* sigscheme/test/unittest.scm
	  - (print-expected): Moved from test-srfi34-2.scm
	* sigscheme/test/test-srfi34-2.scm
	  - (print-expected): Move to unittest.scm
	* sigscheme/test/test-srfi38.scm
	  - Add some tests
	* sigscheme/doc/spec.txt
	  - Update SRFI-38
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] sigscheme-combined.h
	
	* sigscheme/src/sigscheme-combined.h
	  - Cosmetic change
	* sigscheme/QALog
	  - Update
	
2006-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module-siod.c
	
	* sigscheme/src/module-siod.c
	  - (scm_p_siod_equal): Simplify
	  - (scm_p_closure_code): Fix broken body when body-length == 1
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module-sscm-ext.c
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_load_path): Enclose into #if SCM_USE_LOAD
	  - (scm_p_fixnum_width): New function decl
	* sigscheme/src/module-sscm-ext.c
	  - (scm_p_fixnum_width): New function
	  - (scm_p_least_fixnum, scm_p_greatest_fixnum): Marked as R6RS
	    compatible
	* sigscheme/test/unittest.scm
	  - (fixnum-bits): Simplify with fixnum-width
	* sigscheme/test/test-list.scm
	  - Modify tests for 'length*'
	* sigscheme/doc/spec.txt
	  - Rewrite "Integer range" section about SRFI-77 and R6RS
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module.c
	
	* sigscheme/src/module.c
	  - (l_provided_modules): New static variable
	  - (scm_init_module): Add initialization of l_provided_modules
	  - (scm_fin_module): Enable finalization functionality
	  - (scm_provide):
	    * Add an assertion
	    * Add l_provided_modules handling for safe module finalization
	* sigscheme/src/sigscheme.c
	  - (scm_finalize): Add lacking scm_fin_module()
	* sigscheme/src/sigscheme.h
	  - Cosmetic change
	* sigscheme/QALog
	  - Update
	
2006-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/NEWS
	  - Complement changes from 0.6.1
	* sigscheme/QALog
	  - Modify some descriptions
	
2006-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] load.c, sigscheme.c
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_fin_load): New function decl
	* sigscheme/src/load.c
	  - (l_scm_lib_path): Change type to non-const
	  - (scm_set_lib_path): Change to holding copied library path string
	  - (parse_script_prelude): Fix possible crash on parsing script
	    prelude longer than 64 chars
	  - (scm_fin_load): New function
	  - (find_path, file_existsp): Rename an arg
	* sigscheme/src/sigscheme.h
	  - (scm_return_value): Removed
	* sigscheme/src/sigscheme.c
	  - (ERRMSG_UNSUPPORTED_ENCODING, ERRMSG_CODEC_SW_NOT_SUPPORTED): New
	    macro
	  - (l_scm_return_value_cache): Removed
	  - (builtin_features): Add "nested-continuation-only"
	  - (scm_initialize_internal): Move "nested-continuation-only"
	    provision to builtin_features
	  - (scm_finalize): Add scm_fin_load() invocation
	  - (scm_eval_c_string_internal): Remove l_scm_return_value_cache
	    handling
	  - (scm_return_value): Removed
	  - (scm_interpret_argv):
	    * Fix possible crash on parsing script prelude that only has
	      "#! /usr/bin/env"
	    * Fix broken error handling on !SCM_USE_MULTIBYTE_CHAR
	    * Fix a memory leak on error
	    * Fix a mis-intended C expression (results same)
	    * Simplify with the new error message macros
	* sigscheme/src/main.c
	  - (main): Fix acceptable pathname length previously one char lesser
	    than maximum
	* sigscheme/doc/spec.txt
	  - Describe about SRFI-22 support
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	* uim/uim-scm.c
	  - (last_val): New static variable
	  - (uim_scm_return_value): Follow the removal of SigScheme's
	    scm_return_value()
	  - (uim_scm_eval_c_string):
	    * Ditto
	    * Simplify
	  - (uim_scm_eval_c_string_internal): Removed
	  - (uim_scm_init): Add GC protection for last_val
	
2006-11-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/read.c
	  - (read_sequence): Move code position
	* sigscheme/src/load.c
	  - (parse_script_prelude): Modify messages
	* sigscheme/QALog
	  - Update
	
2006-11-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_SYM_ELLIPSIS): New macro
	  - (scm_sym_ellipsis): New variable decl
	* sigscheme/src/sigschemeinternal.h
	  - (SYM_ELLIPSIS): New macro
	* sigscheme/src/syntax.c
	  - (scm_init_syntax): Add initialization of scm_sym_ellipsis
	* sigscheme/src/read.c
	  - (SYM_ELLIPSIS): Removed
	* sigscheme/src/macro.c
	  - (sym_ellipsis, SYM_ELLIPSIS): Removed
	  - (l_dummy): New static variable to avoid empty struct definition
	    error
	  - (scm_init_macro): Remove initialization of sym_ellipsis
	* sigscheme/QALog
	  - Update
	
2006-11-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_SYM_QUOTE, SCM_SYM_QUASIQUOTE, SCM_SYM_UNQUOTE,
	    SCM_SYM_UNQUOTE_SPLICING): Remove unneeded SAL layer
	  - (scm_sym_quote, scm_sym_quasiquote, scm_sym_unquote,
	    scm_sym_unquote_splicing): Moved from storage-common.h
	* sigscheme/src/storage-common.h
	  - (scm_sym_quote, scm_sym_quasiquote, scm_sym_unquote,
	    scm_sym_unquote_splicing): Move to sigscheme.h
	  - (SCM_SAL_SYM_QUOTE, SCM_SAL_SYM_QUASIQUOTE, SCM_SAL_SYM_UNQUOTE,
	    SCM_SAL_SYM_UNQUOTE_SPLICING): Removed
	
2006-11-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] read.c
	
	* sigscheme/src/sigscheme.h
	  - (scm_read_char): Removed
	* sigscheme/src/read.c
	  - (SYM_ELLIPSIS): New macro
	  - (scm_read_char): Removed
	  - (read_number_or_peculiar):
	    * Renamed from read_number_or_symbol()
	    * Remove initial hyphen support for symbols (such as '-sym)
	    * Simplify with SYM_ELLIPSIS
	  - (read_sexpression):
	    * Fix possible crash on parsing R5RS reserved chars |[]{}
	    * Follow the renamings
	    * Add some assertions
	    * Modify a message
	  - (read_string):
	    * Fix potential SEGV on long string parsing
	    * Fix #if SCM_USE_MULTIBYTE_CHAR with SCM_USE_SRFI75
	    * Comment out unused code part
	  - (read_sequence): Enclosed into #if SCM_USE_SRFI75
	  - (read_list):
	    * Rename an arg
	    * Support alternative parens
	    * Simplify with SYM_ELLIPSIS
	  - (read_number_or_symbol): Rename to read_number_or_peculiar()
	  - (read_quote): Rename to read_quoted()
	  - (read_quoted): Renamed from read_quote()
	  - Add some descriptions about specifications
	* sigscheme/test/test-symbol.scm
	* sigscheme/test/test-formal-syntax.scm
	  - Add some tests
	  - Follow the removal of the initial hyphen support for symbols
	* sigscheme/test/test-char.scm
	  - Replace test names with test-name
	* sigscheme/doc/spec.txt
	  - Describe about SRFI-75 support
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/encoding.h
	* sigscheme/src/encoding-dummy.h
	  - (SCM_MB_CHAR_BUF_SIZE): New macro
	* sigscheme/src/read.c
	  - (MB_MAX_SIZE): Removed
	  - (read_string, read_symbol): Replace MB_MAX_SIZE with
	     SCM_MB_CHAR_BUF_SIZE
	* sigscheme/src/encoding.c
	  - (eucjp_char_len, euc_char_len, utf8_char_len, sjis_char_len):
	     Simplify with SCM_MB_CHAR_BUF_SIZE
	* sigscheme/src/scmport-mbchar.c
	  - (struct ScmMultiByteCharPort_, mbcport_put_char): Ditto
	* sigscheme/src/string.c
	  - (scm_p_make_string, scm_p_string_setx, scm_p_string_fillx): Ditto
	
2006-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit complete !SCM_USE_MULTIBYTE_CHAR support
	
	* sigscheme/src/encoding-dummy.h
	  - New file
	  - (SCM_MB_MAX_LEN, scm_encoding_init, scm_mb_bare_c_strlen,
	     scm_mb_find_codec): New macro
	  - (ScmCharCodec, enum ScmCodedCharSet): New type
	* sigscheme/src/sigscheme.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/format.c
	  - Include encoding-dummy.h if !SCM_USE_MULTIBYTE_CHAR
	* sigscheme/src/scmport.h
	  - Ditto
	  - (SCM_CHARPORT_CCS): Replace SCM_CCS_UNKNOWN with SCM_CCS_ISO8859_1
	     for !SCM_USE_MULTIBYTE_CHAR
	  - (ScmCharCodec, SCM_CCS_UNKNOWN): Move to encoding-dummy.h
	* sigscheme/src/sigscheme.c
	  - Include encoding-dummy.h if !SCM_USE_MULTIBYTE_CHAR
	  - (scm_interpret_argv):
	    * Suppress warning on !SCM_USE_MULTIBYTE_CHAR
	    * Modify an error message
	* sigscheme/src/storage.c
	  - Include encoding-dummy.h if !SCM_USE_MULTIBYTE_CHAR
	  - (scm_make_string_internal): Simplify with encoding-dummy.h
	* sigscheme/src/scmport-sbchar.c
	  - (scm_sbcport_init): Ditto
	* sigscheme/src/read.c
	  - (read_token, read_char): Suppress warning on !SCM_USE_SRFI75
	  - (read_string): Support !SCM_USE_MULTIBYTE_CHAR
	* sigscheme/src/write.c
	  - (write_string): Fix an unmatched paren on !SCM_USE_MULTIBYTE_CHAR
	* sigscheme/include/sigscheme/Makefile.am
	  - (BUILT_SOURCES): Add encoding-dummy.h
	* sigscheme/src/Makefile.am
	  - (pkginclude_HEADERS): Ditto
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-11-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] port.c, module-srfi6.c, scmport.h, scmport-null.c,
	     scmport-file.c, scmport-str.c, scmport-basechar.c,
	     scmport-sbchar.c, scmport-mbchar.c, scmint.h
	
	* sigscheme/src/scmport.h
	  - (SCM_ERRMSG_OPEN_PORT, SCM_ERRMSG_CLOSE_PORT,
	    SCM_ERRMSG_READ_FROM_PORT, SCM_ERRMSG_WRITE_TO_PORT): New macro
	  - (ScmCharPortMethod_close, ScmCharPortMethod_puts,
	    ScmCharPortMethod_put_char, ScmCharPortMethod_flush,
	    ScmBytePortMethod_close, ScmBytePortMethod_puts,
	    ScmBytePortMethod_write, ScmBytePortMethod_flush): Change return
	    type to void
	* sigscheme/src/scmport-null.c
	  - (OK): Removed
	  - (ScmNullPort_vtbl): Replace ScmBytePortMethod_peek_byte with
	    nullport_get_byte
	  - (nullport_peek_byte): Removed
	  - (nullport_close, nullport_puts, nullport_write, nullport_flush):
	    Change return type to void
	  - (nullport_get_byte): Replace EOF with SCM_ICHAR_EOF
	* sigscheme/src/scmport-file.c
	  - (fileport_open_internal, fixup_read_char): New static function
	  - (fileport_close, fileport_puts, fileport_write, fileport_flush):
	    * Change return type to void
	    * Add error handlings as exception throwing
	  - (ScmFilePort_open_input_file, ScmFilePort_open_output_file):
	    Simplify with fileport_open_internal()
	  - (fileport_get_byte, fileport_peek_byte):
	    * Add lacking read error handling as exception throwing
	    * Return SCM_ICHAR_EOF instead of EOF
	* sigscheme/src/scmport-str.c
	  - (OK): Removed
	  - (struct ScmInputStrPort_, struct ScmOutputStrPort_): Replace char
	    *str with scm_byte_t *str, to avoid sign extention bug
	  - (istrport_new):
	    * Follow the change of struct ScmInputStrPort_
	    * Set default finalizer
	  - (ScmInputStrPort_new, ScmInputStrPort_new_copying,
	    ScmInputStrPort_new_const): Follow the change of struct
	    ScmInputStrPort_
	  - (istrport_finalize, ostrport_finalize): New static function
	  - (istrport_close, ostrport_close):
	    * Change return type to void
	    * Simplify with the default finalizer
	  - (istrport_get_byte, istrport_peek_byte):
	    * Fix broken sign extention for 8-bit char
	    * Replace EOF with SCM_ICHAR_EOF
	  - (istrport_puts, istrport_write, istrport_flush): Change return
	    type to void
	  - (ScmOutputStrPort_new): Set default finalizer
	  - (ScmOutputStrPort_str): Follow the change of struct
	    ScmOutputStrPort_
	  - (ostrport_puts, ostrport_write, ostrport_flush, ostrport_append):
	    * Change return type to void
	    * Follow the change of struct ScmOutputStrPort_
	* sigscheme/src/scmport-basechar.c
	  - (basecport_close, basecport_puts, basecport_put_char,
	    basecport_flush): Change return type to void
	* sigscheme/src/scmport-sbchar.c
	  - (sbcport_put_char): Change return type to void
	* sigscheme/src/scmport-mbchar.c
	  - (mbcport_put_char, mbcport_put_char): Change return type to void
	  - (mbcport_peek_char, mbcport_fill_rbuf): Replace EOF with
	    SCM_ICHAR_EOF
	* sigscheme/src/sigscheme.h
	  - (scm_port_close, scm_port_puts, scm_port_put_char,
	    scm_port_newline, scm_port_flush): Change return type to void
	  - (scm_port_get_char, scm_port_peek_char): Change return type to
	    scm_ichar_t
	* sigscheme/src/port.c
	  - (ERRMSG_CANNOT_OPEN_FILE): New macro
	  - (scm_port_newline, scm_port_close, scm_port_puts,
	    scm_port_put_char, scm_port_flush):
	    * Change return type to void
	    * Provide error exception handling by underlying scmport
	  - (scm_port_get_char, scm_port_peek_char):
	    * Change return type to scm_ichar_t
	    * Provide error exception handling by underlying scmport
	  - (scm_p_open_input_file, scm_p_open_output_file): Modify error
	    message
	  - (scm_p_read_char, scm_p_peek_char): Replace EOF with SCM_ICHAR_EOF
	
	* sigscheme/src/module-srfi6.c
	  - (istrport_finalize): Add an assertion
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Add scm_use("srfi-6") for
	    SCM_USE_EVAL_C_STRING
	* sigscheme/test/test-srfi6.scm
	  - Add some tests
	  - Replace test names with test-name
	
	* sigscheme/src/scmint.h
	  - Remove stdio.h for EOF
	  - (SCM_ICHAR_EOF): New macro to make independent of actual value of
	    std C EOF
	* sigscheme/src/sigschemeinternal.h
	  - Modify a comment
	* sigscheme/src/encoding.c
	  - Remove stdio.h for EOF
	  - (scm_charcodec_read_char, eucjp_str2int, dbc_str2int,
	    utf8_str2int, unibyte_str2int): Replace EOF with SCM_ICHAR_EOF
	* sigscheme/src/read.c
	  - (skip_comment_and_space, read_sequence, read_token,
	    read_sexpression, read_list, read_char, read_string): Replace EOF
	    with SCM_ICHAR_EOF
	* sigscheme/src/string.c
	  - (scm_p_string_ref): Replace EOF with SCM_ICHAR_EOF
	
	* sigscheme/QALog
	  - Update
	
2006-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] scmport.h, scmport-config.h, scmport-null.h, scmport-null.c,
	     scmport-file.h, scmport-file.c, scmport-str.h, scmport-str.c,
	     scmport-basechar.c, scmport-sbchar.h, scmport-sbchar.c
	
	* sigscheme/src/scmport.h
	  - (SCM_PORT_ASSERT): New macro
	  - (SCM_CHARPORT_ENCODING, SCM_CHARPORT_CCS): Support
	    !SCM_USE_MULTIBYTE_CHAR without encoding.[hc]
	  - (ScmCharCodec, SCM_CCS_UNKNOWN): New macro for
	    !SCM_USE_MULTIBYTE_CHAR
	  - (struct ScmBaseCharPort_): Change type of linenum from int to
	    size_t, to avoid potencial overflow and adjust alignment
	  - (ScmBaseCharPort_line_number): Change return type to size_t
	  - Cosmetic changes
	* sigscheme/src/scmport-sbchar.c
	  - (struct ScmSingleByteCharPort_): Fix broken ScmBaseCharPort
	    inheritance which may cause SEGV
	  - (scm_sbcport_init): Support !SCM_USE_MULTIBYTE_CHAR without encoding.[hc]
	  - (sbcport_put_char): Make logically correct
	* sigscheme/src/scmport-basechar.c
	  - (ScmBaseCharPort_line_number): Change return type to size_t
	  - (ScmBaseCharPort_construct): Change invalid linenum from -1 to 0
	* sigscheme/src/scmport-mbchar.c
	  - (struct ScmMultiByteCharPort_): Follow the type change of linenum
	* sigscheme/src/read.c
	  - (read_list):
	    * Follow the type change of ScmBaseCharPort_line_number()
	    * Make format needed only if SCM_DEBUG
	* sigscheme/src/scmport-file.c
	  - (fileport_new_internal): Add some assertions as precondition
	* sigscheme/src/scmport-str.c
	  - (istrport_new, ostrport_append): Add an assertions as precondition
	* sigscheme/src/scmport-config.h
	  - (SCM_PORT_CALLOC, SCM_PORT_REALLOC): Fix macro definition style
	* sigscheme/src/sigscheme.h
	  - (SCM_ASSERT): Use assert(3) only if HAVE_ASSERT_H &&
	    !SCM_CHICKEN_DEBUG
	* sigscheme/configure.in
	  - Add detection for assert.h
	* sigscheme/QALog
	  - Update
	
2006-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] scmint.h
	
	* sigscheme/src/scmint.h
	  - Fix size constraint check for scm_uintobj_t
	  - Modify some comments
	* sigscheme/QALog
	  - Update
	
2006-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/QALog
	  - Update
	
2006-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module-srfi34.c
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ERRMSG_UNHANDLED_EXCEPTION): Rename to
	    ERRMSG_UNHANDLED_EXCEPTION
	  - (ERRMSG_UNHANDLED_EXCEPTION): Renamed from
	    SCM_ERRMSG_UNHANDLED_EXCEPTION
	* sigscheme/src/error.c
	  - (scm_p_inspect_error): Follow the renaming of
	    SCM_ERRMSG_UNHANDLED_EXCEPTION
	* sigscheme/src/module-srfi34.c
	  - (ERRMSG_UNHANDLED_EXCEPTION): Removed to unify with
	    SCM_ERRMSG_UNHANDLED_EXCEPTION
	  - (scm_initialize_srfi34):
	    * Add type assertion for raw_quote()
	    * Change initial value of global vars to SCM_UNDEF
	    * Cosmetic changes
	  - (enclose): Replace the closure creation with scm_s_lambda()
	  - (scm_p_srfi34_raise): Add current handler to error object to
	    behave as same as the reference implementation of SRFI-34 'raise'
	  - (guard_handler_body): Cosmetic change
	* sigscheme/test/test-srfi34.scm
	  - Add some tests
	  - Modify a test value to increase correctness
	  - Fix some comments
	  - Replace test names with test-name
	* sigscheme/test/test-srfi34-2.scm
	  - Replace test names with test-name
	* sigscheme/QALog
	  - Update
	
2006-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/tools/build_func_table.rb
	  - (build_table): Fix unneeded newline at end
	* sigscheme/tools/functable-header.txt
	  - Append newlines as separator
	
2006-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module-srfi23.c
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ERR_HEADER): Replace "ERROR: " with "Error: " to conform to
	    the reference implementation of SRFI-23
	* sigscheme/src/write.c
	  - (write_errobj): Remove ':' separator between error message and
	    objects, to conform to the reference implementation of SRFI-23
	* test/uim-test-utils.scm
	  - (uim-sh-read): Follow the change of "ERROR: "
	* sigscheme/src/sigscheme.h
	  - Modify a comment
	* sigscheme/doc/spec.txt
	  - Add description about 'error' behavior without srfi-34
	* sigscheme/QALog
	  - Update
	
2006-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/QALog
	  - Update
	
2006-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] error.c
	
	* sigscheme/src/config-old.h
	  - (SCM_USE_BACKTRACE): New macro
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/continuation.c
	  - (scm_push_trace_frame, scm_pop_trace_frame): Replace #if SCM_DEBUG with
	    SCM_USE_BACKTRACE
	* sigscheme/src/eval.c
	  - (scm_eval): Replace #if SCM_DEBUG for trace stack handlings with
	    SCM_USE_BACKTRACE
	* sigscheme/src/sigscheme.h
	  - (scm_debug): Enclose into #if SCM_DEBUG
	  - (scm_categorized_debug):
	    * Ditto
	    * Replace int with enum ScmDebugCategory
	  - (scm_debug_categories, scm_set_debug_categories,
	    scm_predefined_debug_categories): Replace int with enum ScmDebugCategory
	* sigscheme/src/error.c
	  - (UNBOUNDP): Move code position
	  - (l_debug_mask, scm_debug_categories, scm_set_debug_categories): Replace int
	    with enum ScmDebugCategory
	  - (scm_predefined_debug_categories):
	    * Ditto
	    * Simplify
	  - (scm_debug): Enclose into #if SCM_DEBUG
	  - (scm_categorized_debug):
	    * Ditto
	    * Replace int with enum ScmDebugCategory
	  - (l_str_srfi34): Optimized out
	  - (srfi34_providedp): Optimized out l_str_srfi34
	  - (scm_init_error): Remove initialization of l_str_srfi34
	  - (scm_p_inspect_error):
	    * Simplify
	    * Enclose backtrace code into #if SCM_USE_BACKTRACE
	  - (show_arg, scm_show_backtrace): Replace #if SCM_DEBUG with
	    SCM_USE_BACKTRACE
	  - (scm_die, scm_error_internal): Support !SCM_USE_FORMAT
	* sigscheme/QALog
	  - Update
	
2006-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] symbol.c
	
	* sigscheme/QALog
	  - Update
	
2006-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] symbol.c
	
	* sigscheme/src/symbol.c
	  - (scm_intern): Make symbol string validation strict (although disabled)
	  - (initialize_symbol_hash): Add assertion for an edge case
	* sigscheme/QALog
	  - Update
	
2006-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] env.c
	
	* sigscheme/src/env.c
	  - Modify some comments
	  - (scm_validate_actuals): Simplify
	* sigscheme/QALog
	  - Update
	
2006-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] alloc.c
	
	* sigscheme/src/alloc.c
	  - Remove redundant malloc.h inclusion
	  - (scm_malloc_aligned): Simplify
	* sigscheme/src/sigschemeinternal.h
	  - Modify some comments
	* sigscheme/QALog
	  - Update
	
2006-11-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] module-srfi60.c
	
	* sigscheme/src/module-srfi60.c
	  - (BITWISE_OPERATION_BODY): Add arg 'ridentity'
	  - (scm_p_srfi60_logand):
	    * Fix invalid result of (logand). Now it returns -1 as same as the
	      reference implementation
	  - (scm_p_srfi60_logior, scm_p_srfi60_logxor): Follow the change of
	    BITWISE_OPERATION_BODY()
	  - Update copyright
	* sigscheme/test/test-srfi60.scm
	  - Update copyright
	  - Replace test names with test-name
	  - Add various tests
	* sigscheme/QALog
	  - Update
	
2006-11-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] number.c
	
	* sigscheme/src/number.c
	  - Include string.h for strspn(3)
	  - (ERRMSG_DIV_BY_ZERO, ERRMSG_FIXNUM_OVERFLOW, ERRMSG_REQ_1_ARG,
	    VALID_RADIXP, INT_VALID_VALUEP, INT_OUT_OF_RANGEP): New macro
	  - (scm_p_modulo):
	    * [R5RS] Fix broken result on no-remainder cases
	    * Simplify with the new macros
	  - (scm_p_quotient):
	    * Fix missized-cast which results a broken value on 64-bit conf
	    * Add a citation about specification of '/' from the ISO C
	      standard
	    * Simplify with the new macros
	  - (scm_p_string2number):
	    * [R5RS] Reject invalid number strings such as "0xa" and " 1"
	    * Fix a broken conditional compilation
	    * Add SCM_ASSERT()s as preconditions
	    * Simplify with the new macros
	    * Fix useless error message on overflow
	    * Enclose into #if SCM_USE_STRING_CORE
	  - (scm_p_add, scm_p_subtract, scm_p_abs):
	    * Add overflow check
	    * Simplify with the new macros
	  - (scm_p_divide):
	    * Simplify (with the new macros)
	  - (scm_p_max, scm_p_min, scm_p_remainder): Simplify with the new
	    macros
	  - (scm_p_number2string): Enclose into #if SCM_USE_STRING_CORE
	  - (prepare_radix, scm_int2string):
	    * Simplify with the new macros
	    * Enclose into #if SCM_USE_STRING_CORE
	* sigscheme/src/read.c
	  - (INT_LITERAL_LEN_MAX): Fix '0' prefix incapability on a
	    maximum-length binary number
	* sigscheme/src/sigscheme.h
	  - (scm_int2string, scm_p_number2string, scm_p_string2number):
	    Enclose into #if SCM_USE_STRING_CORE
	  - Make ScmValueFormat enable even if !SCM_USE_FORMAT
	* sigscheme/test/unittest.scm
	  - (sigscheme?, fixnum-bits): New variable
	  - (assert-fail): New procedure
	  - (assert-error): Add arg validation
	* sigscheme/test/test-number-arith.scm
	* sigscheme/test/test-number-cmp.scm
	* sigscheme/test/test-number-pred.scm
	  - New file
	  - Complete all required tests for these procedures I'm aware of
	    (including 64-bit)
	* sigscheme/test/test-number-conv.scm
	  - New file copied from test-num.scm
	  - Remove tests other than number->string and string->number
	  - Complete all required tests for these procedures I'm aware of
	    (including 64-bit)
	* sigscheme/test/test-formal-syntax.scm
	  - Remove integer literal tests and replaced with
	    test-number-literal.scm
	* sigscheme/test/test-number-literal.scm
	  - New file
	  - Complete all required tests for these procedures I'm aware of
	    (including 64-bit)
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-number-{arith,cmp,conv,literal,pred}.scm
	* sigscheme/doc/spec.txt
	  - Describe spec of numbers
	* sigscheme/QALog
	  - Update
	
2006-10-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string-core.scm
	  - Remove the tests for string-copy which make no sense
	  - Complete all required tests for these procedures I'm aware of
	* sigscheme/test/test-symbol.scm
	  - Remove a FIXME comment
	* sigscheme/src/sigscheme.c
	  - (builtin_features): Add "multibyte-char" and "utf-8"
	* sigscheme/QALog
	  - Update
	
2006-10-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_stringp, scm_p_string_length, scm_p_stringequalp,
	    scm_p_string_append, scm_p_string_copy): Enclose into #if
	    SCM_USE_STRING_CORE
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-string-{core,null}.scm
	* sigscheme/test/test-string.scm
	  - Split some tests off into test-string-{core,null}.scm
	* sigscheme/test/test-string-null.scm
	  - New file copied from test-string.scm
	  - Move string tests that contain NUL character from test-string.scm
	* sigscheme/test/test-string-core.scm
	  - New file copied from test-string.scm
	  - Move tests for the core string procedures from test-string.scm
	
2006-10-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Replace testnames with test-name
	  - (cp): New alias to string-copy
	  - Replace string-copy to make mutable strings with the alias cp
	  - Comment out tests that contain NUL to avoid test abort when
	    !SCM_USE_NULL_CAPABLE_STRING
	
2006-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/QALog
	  - Fix mis-recorded deep-cadrs.c status. Correct commit log of
	    r3903 is "[QA] deep-cadrs.c"
	
2006-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit separate core procedures of R5RS strings. First
	  SigScheme-based uim will contain only these core string
	  procedures. Both char.c and string.c will be disabled in the release
	
	* sigscheme/configure.in
	  - Add string-core.c -related configuration
	* sigscheme/src/string-core.c
	  - New file copied from string.c
	  - (scm_p_stringp, scm_p_string_length, scm_p_stringequalp,
	    scm_p_string_append, scm_p_string_copy): Moved from string.c
	* sigscheme/src/string.c
	  - (scm_p_stringp, scm_p_string_length, scm_p_stringequalp,
	    scm_p_string_append, scm_p_string_copy): Move to string-core.c
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SRCS): Add string-core.c
	* sigscheme/QALog
	  - Add string-core.c entry
	
2006-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] list.c
	
	* sigscheme/src/sigscheme.c
	  - (builtin_features): Add lacking "deep-cadrs"
	* sigscheme/test/test-pair.scm
	  - Fix broken conditional tests enabler for deep-cadr procedures
	* sigscheme/QALog
	  - Update
	
2006-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] list.c
	
	* sigscheme/src/list.c
	  - (MEMBER_BODY, ASSOC_BODY): Display entire list on error
	* sigscheme/test/test-member.scm
	  - New file
	  - Moved and modified R5RS example tests for memq and member from
	    test-list.scm
	  - Add all required tests I'm aware of
	* sigscheme/test/test-assoc.scm
	  - New file
	  - Moved and modified R5RS example tests for assq and assoc from
	    test-list.scm
	  - Add all required tests I'm aware of
	* sigscheme/test/test-list.scm
	  - Move R5RS example tests to test-{member,assoc}.scm
	  - Add improper arguments test for 'list'
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-{member,assoc}.scm
	* sigscheme/QALog
	  - Update
	
2006-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] list.c
	
	* sigscheme/src/list.c
	  - (scm_p_append): Make proper termination check for each list
	    optional with CHECK_PROPER_LIST_TERMINATION()
	  - (scm_p_reverse): Fix improper list acceptance
	  - (scm_p_list_tail): Fix error message
	  - (scm_p_list_ref):
	    * Ditto
	    * Fix broken improper tail handling of 'list-ref'
	* sigscheme/src/sigscheme.h
	  - (SCM_ENSURE_PROPER_LIST_TERMINATION,
	    SCM_CHECK_PROPER_LIST_TERMINATION): Move to sigschemeinternal.h
	    temporarily
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ENSURE_PROPER_LIST_TERMINATION,
	    SCM_CHECK_PROPER_LIST_TERMINATION): Moved from sigscheme.h
	* sigscheme/test/test-list.scm
	  - Add tests for append, reverse, list-tail, list-ref
	* sigscheme/QALog
	  - Update
	
2006-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (test-skip): New procedure
	  - (eval-counter): Removed
	* sigscheme/test/test-srfi1.scm
	  - Skip entire test if SRFI-1 is not enabled
	
2006-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_LISTLEN_DOTTED): Add SCM_ASSERT() as precondition
	  - (SCM_LISTLEN_PROPER_MAX, SCM_LISTLEN_DOTTED_MAX, SCM_LISTLEN_MAX):
	    New macro
	
2006-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit change definition of dotted list length to SRFI-1's from
	  SigScheme-speciific one. SCM_LISTLEN_DOTTED(), SCM_DOTTED_LISTP()
	  and other dotted list-related macros and functions have been changed
	  so
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_LISTLEN_ENCODE_DOTTED): Follow the specification changes
	* sigscheme/src/sigscheme.h
	  - (SCM_DOTTED_LISTP, SCM_LISTLEN_DOTTED): Ditto
	  - (SCM_LISTLEN_BEFORE_DOT): Removed
	* sigscheme/src/list.c
	  - (TERMINATOR_LEN): Removed
	  - (scm_finite_length, scm_length): Follow the specification changes
	* sigscheme/src/env.c
	  - (scm_valid_environment_extension_lengthp, scm_validate_formals):
	    Ditto
	* sigscheme/src/module-sscm-ext.c
	  - (scm_p_lengthstar): Ditto
	* sigscheme/test-c2/test-length.c
	  - (SCM_LISTLEN_DOTTED, SCM_LISTLEN_ENCODE_DOTTED, SCM_DOTTED_LISTP,
	    scm_finite_length, scm_length): Follow the specification changes
	  - (SCM_LISTLEN_BEFORE_DOT): Removed
	* sigscheme/NEWS
	* sigscheme/QALog
	  - Update
	
2006-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/test-length.c
	  - Add tests for SCM_LISTLEN_ENCODE_DOTTED(),
	    SCM_LISTLEN_ENCODE_CIRCULAR() and SCM_LISTLEN_ENCODE_ERROR()
	* sigscheme/QALog
	  - Update
	
2006-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] list.c, sigscheme.h, syntax.c
	
	* sigscheme/src/sigscheme.h
	  - (SCM_WRITE_SS_ENABLEDP): New macro
	* sigscheme/src/list.c
	  - (scm_p_length): Fix passing circular list into error object when
	    SRFI-38 is not enabled
	* sigscheme/src/syntax.c
	  - (scm_s_quote): Fix infinite loop of SCM_UNWRAP_SYNTAX() by error
	    objects that contain circular list
	* sigscheme/test/test-list.scm
	  - Add tests for 'length' to test-list.scm and complete all required
	    'length'-related tests I'm aware of
	* sigscheme/test-c2/test-length.c
	  - New file
	  - Complete all required 'length'-related tests for functions and
	    macros of sigscheme.h and list.c I'm aware of
	* sigscheme/test-c2/Makefile.am
	  - (EXTRA_DIST): Add test-gc.c and test-length.c
	  - (TESTS): Add test-test-length-coll
	  - (check_PROGRAMS): Replace tests with $(TESTS)
	* sigscheme/QALog
	  - Update
	
2006-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/sscm-test.h
	  - Add description-less test macros
	  - (tst_count): New static variable
	  - (tst_name): New static function
	  - (TST_NAME, TST_TRUE, TST_FALSE, TST_TN_SAVE, TST_TN_NAME,
	    TST_TN_TRUE, TST_TN_FALSE, TST_TN_EQ_INT, TST_TN_EQ_UINT,
	    TST_TN_NEQ_INT, TST_TN_NEQ_UINT, TST_TN_EQ_STR, TST_TN_NEQ_STR,
	    TST_TN_EQ_PTR, TST_TN_NEQ_PTR, TST_TN_EQ_OBJ, TST_TN_NEQ_OBJ,
	    TST_TN_EQ_FPTR, TST_TN_NEQ_FPTR, TST_TN_EQ, TST_TN_NEQ): New macro
	
2006-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c, list.c
	
	* sigscheme/test/test-bool.scm
	  - Fix boolean? tests. Since the predicates must return exact #t if
	    true as described in "6.3.1 Booleans" of R5RS, assert-true is
	    insufficient
	* sigscheme/test/test-misc.scm
	  - Likewise for procedure? with "6.4 Control features"
	* sigscheme/test/test-pair.scm
	  - Likewise for pair? with "6.3.2 Pairs and lists"
	* sigscheme/test/test-symbol.scm
	  Likewise for symbol? with "6.3.3 Symbols"
	* sigscheme/test/test-eq.scm
	  Likewise for eq? with "6.1 Equivalence predicates"
	* sigscheme/test/test-eqv.scm
	  Likewise for eq? with "6.1 Equivalence predicates"
	* sigscheme/test/test-equal.scm
	  Likewise for eq? with "6.1 Equivalence predicates"
	* sigscheme/QALog
	  - Update
	
2006-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] list.c
	
	* sigscheme/test/test-list.scm
	  - Fix and complete tests for null? and list?. Since the predicates
	    must return exact #t if true as described in R5RS, assert-true is
	    insufficient
	  - Define circular lists for the tests
	* sigscheme/QALog
	  - Update
	
2006-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] list.c deep-cadrs.c
	
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-pair.scm
	* sigscheme/test/test-pair.scm
	  - New file copied from test-list.scm
	  - Moved R5RS example tests for cons, car, cdr from test-list.scm
	  - Moved tests that I wrote for set-car! and set-cdr!
	  - Add tests for pair?, cons, car, cdr, set-car!, set-cdr!
	  - Add tests for all c[ad]+r procedures
	* sigscheme/test/test-list.scm
	  - Move R5RS example tests for pair? to test-obsolete.scm
	  - Move some tests to test-pair.scm as described above
	  - Fix a testname typo
	* sigscheme/test/test-obsolete.scm
	  - Moved R5RS example tests for pair? from test-list.scm
	* sigscheme/src/sigscheme.c
	  - (builtin_features): Add "compat-siod" to detect set-car! and
	    set-cdr! behavior
	* sigscheme/src/list.c
	* sigscheme/src/deep-cadrs.c
	  - Cosmetic changes
	* sigscheme/QALog
	  - Update
	
2006-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-misc.scm
	* sigscheme/test/test-symbol.scm
	* sigscheme/test/test-bool.scm
	  - Add (cons #t #t) for primitive predicate tests
	
2006-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	* sigscheme/src/list.c
	  - Move code positions (no code changes)
	
2006-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-list.scm
	  - Cosmetic change
	
2006-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/Makefile.am
	  - Enclose *.html generation into "if MAINTAINER_MODE"
	
	* sigscheme/test/test-num.scm
	  - Replace test names with test-name
	  - Move integer literal tests to test-obsolete.scm
	* sigscheme/test/test-obsolete.scm
	  - Moved integer literal tests from test-num.scm
	* sigscheme/test/test-formal-syntax.scm
	  - Add FIXME comments about integer literals
	
	* sigscheme/test/test-list.scm
	* sigscheme/test/test-vector.scm
	  - Replace test names with test-name
	
2006-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-map-2.scm
	  - Rename to test-map.scm
	* sigscheme/test/test-map.scm
	  - Renamed from test-map-2.scm
	
	* sigscheme/test/test-exp.scm
	  - Rename to test-obsolete.scm
	* sigscheme/test/test-obsolete.scm
	  - Renamed from test-exp.scm
	
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Follow the file renamings
	* sigscheme/QALog
	  - Update
	
2006-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-map.scm
	  - Removed
	  - Move all tests to test-exp.scm
	* sigscheme/test/test-exp.scm
	  - Add all 'map' tests from test-map.scm
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Remove test-map.scm
	
2006-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Split R5RS syntax tests off to test-syntax.scm
	  - Only obsolete miscellaneous tests remain
	* sigscheme/test/test-syntax.scm
	  - New file copied from test-exp.scm
	  - Replace some test names to test-name
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-syntax.scm
	
2006-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-syntax.scm
	  - Rename to test-formal-syntax.scm
	* sigscheme/test/test-formal-syntax.scm
	  - Renamed from test-syntax.scm
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Replace test-syntax.scm with test-formal-syntax.scm
	
2006-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c, continuation.c, eval.c
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_NESTED_CONTINUATION_ONLY): Moved from continuation.c
	  - (scm_values_applier): New variable decl
	  - (scm_push_trace_frame, scm_pop_trace_frame): Enclose into #if
	    SCM_DEBUG
	  - (scm_tailcall): Removed
	* sigscheme/src/procedure.c
	  - (scm_p_call_with_values): Fix improper tail recursion and tested
	    with rec-call-with-values-2 of test-tail-rec.scm
	  - (scm_p_call_with_current_continuation): Remove unneeded argument
	    type check
	  - (scm_p_dynamic_wind): Add a comment
	* sigscheme/src/eval.c
	  - (scm_tailcall): Removed. This interface is a design error and
	    may produce invalid result
	  - (call): Add handlings for the pseudo procedure scm_values_applier
	  - (scm_p_eval, scm_p_apply): Add comments about proper tail
	    recursion
	* sigscheme/src/continuation.c
	  - (SCM_NESTED_CONTINUATION_ONLY): Move to sigschemeinternal.h
	  - (wind_onto_dynamic_extent, enter_dynamic_extent,
	    continuation_stack_pop): Simplify
	  - (exit_dynamic_extent):
	    * Fix improperly deferred dynamic extent stack pop (i.e. make pop
	      before scm_call())
	    * Simplify
	  - (scm_call_with_current_continuation):
	    * Fix proper tail recursion handling for
	      !SCM_NESTED_CONTINUATION_ONLY
	    * Replace invalid ret_val with SCM_UNDEF to make the meaning
	      appropriate
	    * Cosmetic change
	  - (scm_call_continuation):
	    * Replace 1 with scm_true to make the meaning appropriate
	    * Modify error message
	    * Cosmetic change
	  - (scm_push_trace_frame): Enclose into #if SCM_DEBUG
	  - (scm_pop_trace_frame):
	    * Ditto
	    * Add SCM_ASSERT()
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal):
	    * Add initialization of scm_values_applier
	    * Provide "nested-continuation-only"
	* sigscheme/test/test-continuation.scm
	  - Replace test names with test-name
	  - Add some tests
	* sigscheme/test/test-exp.scm
	  - Split dynamic-wind tests off to test-dyn-extent.scm
	* sigscheme/test/test-dyn-extent.scm
	  - New file copied from test-exp.scm
	  - Add some dynamic-wind tests
	* sigscheme/test/test-tail-rec.scm
	  - (rec-by-eval, rec-by-apply, rec-by-apply-with-apply,
	    rec-by-cond-3rd-with-=>): New procedure
	  - Add tests for '=>' clause of 'cond', 'apply' and 'eval'
	  - Fix inappropriate error handlings on unexpected terminations
	  - All tests except for rec-by-eval have been passed again
	* sigscheme/runtest-tail-rec.sh
	  - Fix error message appropriately
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-dyn-extent.scm, test-map-2.scm,
	    test-misc.scm, test-symbol.scm, test-values.scm
	* sigscheme/doc/spec.txt
	  - Add description about proper tail recursion of 'eval'
	* sigscheme/TODO
	* sigscheme/QALog
	  - Update
	
2006-09-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c
	
	* sigscheme/src/procedure.c
	  - (scm_p_call_with_values): Remove unneeded typecheck for procedure
	    args
	* sigscheme/test/test-values.scm
	  - New file
	  - complete all required tests for 'values' and 'call-with-values'
	    I'm aware of
	* sigscheme/test/test-exp.scm
	  - Remove incomplete tests for 'values' and 'call-with-values'
	* sigscheme/QALog
	  - Update
	
2006-09-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/procedure.c
	  - (map_multiple_args): Rename variables
	
2006-09-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c
	
	* sigscheme/src/procedure.c
	  - (ERRMSG_UNEVEN_MAP_ARGS): New macro
	  - (map_single_arg): Fix improper list acceptance on single-arg map
	  - (map_multiple_args): Add uneven-length lists rejection (as error)
	    on multiple-args map. Although such forms are not allowed by R5RS,
	    causing the error is SigScheme-specific implementation
	* sigscheme/test/test-map-2.scm
	  - New file
	  - complete all required tests for 'map' and 'for-each' I'm aware of
	* sigscheme/QALog
	  - Update
	
2006-09-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c
	
	* sigscheme/test/test-misc.scm
	  - New file
	  - complete all required tests for procedure? I'm aware of
	* sigscheme/test/test-exp.scm
	  - Remove incomplete and invalidly SigScheme-specific tests
	* sigscheme/QALog
	  - Update
	
2006-09-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c
	
	* sigscheme/test/test-symbol.scm
	  - New file
	  - complete all required tests I'm aware of
	* sigscheme/test/test-syntax.scm
	  - Add a comment
	* sigscheme/QALog
	  - Update
	
2006-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-syntax.scm
	  - Replace test-name strings with (tn)
	
2006-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-equation.scm
	* sigscheme/test/test-delay-force.scm
	  - Removed since insufficient to test R5RS conformance
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST):
	    * Add test-{bool,eq,eqv,equal}.scm
	    * Remove test-{delay-force,equation}.scm
	
r3869:
 
	
	[QA] procedure.c
	
	* sigscheme/test/test-bool.scm
	  - New file
	  - Complete R5RS conformance tests
	* sigscheme/QALog
	  - Update
	
2006-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c
	
	* sigscheme/src/storage.c
	  - (scm_type): Fix lacking macro-related type handling. This fixes
	    broken (equal? macro1 macro2) on storage-compact
	* sigscheme/test/unittest.scm
	  - (eof): New procedure
	* sigscheme/test/test-equation.scm
	  - Comment as deprecated
	* sigscheme/test/test-eq.scm
	* sigscheme/test/test-eqv.scm
	* sigscheme/test/test-equal.scm
	  - New file
	  - Complete R5RS conformance tests
	* sigscheme/QALog
	  - Update
	
2006-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[QA] procedure.c
	
	* sigscheme/src/storage.c
	  - (scm_type): Fix lacking macro-related type handling. This fixes
	    broken (equal? macro1 macro2) on storage-compact
	* sigscheme/test/unittest.scm
	  - (eof): New procedure
	* sigscheme/test/test-equation.scm
	  - Comment as deprecated
	* sigscheme/test/test-eq.scm
	* sigscheme/test/test-eqv.scm
	* sigscheme/test/test-equal.scm
	  - New file
	  - Complete R5RS conformance tests
	* sigscheme/QALog
	  - Update
	
2006-09-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/eval.c
	  - (call): Cosmetic change
	* sigscheme/QALog
	  - Update
	
2006-09-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/eval.c
	  - (SCM_ERRMSG_WRONG_NR_ARG): Removed
	  - (SCM_ERRMSG_NON_R5RS_ENV): Remove header space
	  - (scm_p_scheme_report_environment, scm_p_null_environment): Follow
	    the change of SCM_ERRMSG_NON_R5RS_ENV
	  - (call): Fix broken eval_state passing on the last dispatch
	  - (call_closure): Optimize
	  - (reduce): Cosmetic change
	* sigscheme/test/test-eval.scm
	  - Add tests for eval returns multiple values,
	    scheme-report-environment and null-environment
	* sigscheme/test/test-apply.scm
	  - Add tests for invalid forms, single-argument, multi-aruguments and
	    returns multiple values
	
2006-09-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - Add description about SIZEOF_SCMOBJ
	
2006-07-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ALIGN_CELL): Removed
	* sigscheme/src/storage-gc.c
	  - (within_heapp): Fix broken assumption over heap alignment. Thanks
	    Jun
	* sigscheme/src/alloc.c
	  - (scm_malloc_aligned): Ditto
	
2006-07-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/alloc.c
	  - (scm_malloc_aligned): Fix allocation error handling for
	    posix_memalign(3). Thanks Jun
	
2006-07-10 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/test-c2/test-storage-compact.c
	  - (SCM_CONS_INIT, SCM_SYMBOL_INIT): follow the SAL->ISAL renaming
	
	* sigscheme/test-c2/test-gc.c
	  - new file.
	
	* sigscheme/test-c2/sscm-test.h
	  - (TST_PARAMS, TST_PARAMS_DECL): new macros.
	  - (TST_CASE): use the foregoing macros.
	  - (tst_main): add prototype.
	
	* sigscheme/test-c2/Makefile.am
	  - add test-gc-coll.
	
	* sigscheme/configure.in
	  - add check for memalign ().
	
	* sigscheme/src/sigschemeinternal.h
	  - (EQVP): use SCM_EQVP ().
	
	* sigscheme/src/procedure.c
	  - (scm_p_eqvp): use SCM_EQVP() if available.
	
	* sigscheme/src/sigscheme.h
	  - (SCM_HAS_EQVP, SCM_EQVP): new macros.
	  - remove trailing whitespace
	
2006-07-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_SCMOBJ_ALIGNED): New macro
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add check for memalign(3)
	* sigscheme/src/alloc.c
	  - Include malloc.h if needed for memalign(3)
	  - (scm_malloc_aligned):
	    * Fix the header comment
	    * Support memalign(3)
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-gc.c
	  - (initialize_heap): Fix integer constant suffix appropriately
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-gc.c
	  - (initialize_heap): Fix never-effective l_heaps_lowest. Thanks Jun
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ALIGN_CELL): New macro
	* sigscheme/src/storage-gc.c
	  - (within_heapp): Fix incorrect condition for systems that have
	    8-byte aligned malloc(3) such as Cygwin. Thanks Jun
	* sigscheme/src/alloc.c
	  - (ALIGN_CELL, ALIGN_HEAP): Removed. Since these names mislead
	    developers about SigScheme's memory alignment constraints, the new
	    macro SCM_ALIGN_CELL is having opposite meaning of ALIGN_CELL to
	    fix it. Be careful
	  - (scm_malloc_aligned):
	    * Replace ALIGN_CELL with sizeof(ScmCell)
	    * Replace ALIGN_HEAP with SCM_ALIGN_CELL
	  - (scm_align_str): Replace ALIGN_CELL with sizeof(ScmCell)
	* sigscheme/NEWS
	  - Update
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c_data_aligned.m4
	  - Update @version
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Fix inappropriate message for $ax_cv_c_data_aligned. Thanks NIIBE
	    Yutaka
	* sigscheme/m4/ax_c_data_aligned.m4
	  - Add alignment check for long-char-long ordering on stack
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add lacking AC_PROG_LN_S
	  - Fix -g option appending to CFLAGS without gcc detection
	  - Remove -O2 addition to CFLAGS without gcc detection
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/COPYING
	  - Add lacking license indication for test-r4rs.scm
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - Cosmetic changes
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/QALog
	  - Add status summary
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/QALog
	  - Fix typos
	
2006-07-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[qa] syntax.c
	
	* See QALog for summary and further details
	
	* sigscheme/src/libtool-version.mk
	  - (libsscm_version): Update to 1:0:0 because of the API changes
	* sigscheme/src/config-old.h
	  - Undef SCM_STRICT_DEFINE_PLACEMENT
	  - (SCM_USE_INTERNAL_DEFINITIONS, SCM_STRICT_TOPLEVEL_DEFINITIONS):
	    New macro
	* sigscheme/src/sigscheme.h
	  - (SCM_ASSERTION_MSG, SCM_DEFINABLE_TOPLEVELP): New macro
	  - (SCM_ASSERT): Make condition printable using SCM_ASSERTION_MSG()
	  - (enum ScmNestState): New type
	  - (struct ScmEvalState_): Add new member 'nest'
	  - (SCM_EVAL_STATE_INIT, SCM_EVAL_STATE_INIT2): Add 'nest' handling
	  - (SCM_EVAL_STATE_INIT3): New macro
	  - (scm_s_cond): Rename an arg
	  - (scm_s_let): Add arg 'body'
	  - (scm_s_define): Replace env with eval_state
	  - (scm_s_delay, scm_p_force): Enclose into #if SCM_USE_PROMISE
	  - (scm_p_current_environment): New function
	  - (scm_p_the_environment): Removed
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_INTERACTION_ENV_INDEFINABLE): New macro
	  - (scm_s_cond_internal): Remove 'case_key' arg
	  - (scm_s_body): define as scm_s_begin if !SCM_USE_INTERNAL_DEFINITIONS
	* sigscheme/src/eval.c
	  - (scm_eval): Add strict toplevel definition handling
	* sigscheme/src/env.c
	  - (scm_symbol_value): Add SCM_UNBOUND check for internal definitions
	  - (scm_validate_formals): Add comment about duplicate variable names
	* sigscheme/src/syntax.c
	  - (ERRMSG_BAD_DEFINE_PLACEMENT): Modify message
	  - (ERRMSG_CLAUSE_REQUIRED, ERRMSG_EXPRESSION_REQUIRED,
	    ERRMSG_INVALID_BINDINGS, ERRMSG_INVALID_BINDING,
	    ERRMSG_SYNTAX_AS_VALUE, ERRMSG_DUPLICATE_VARNAME,
	    ERRMSG_BAD_DEFINE_FORM, FORBID_TOPLEVEL_DEFINITIONS): New macro
	  - Replace all SCM_STRICT_DEFINE_PLACEMENT with
	    SCM_USE_INTERNAL_DEFINITIONS
	  - (l_sym_define, scm_init_syntax): Enable and init l_sym_define
	    regardless of SCM_USE_INTERNAL_DEFINITIONS
	  - (scm_s_lambda):
	    * Replace error message
	    * Add comments
	  - (scm_s_setx): Logical cleanup
	  - (scm_s_cond_internal):
	    * Remove 'case_key' arg
	    * Split 'case' handling off
	    * Add strict toplevel definition handling
	    * Fix proper tail recursion incapability of '=>' form
	  - (scm_s_cond):
	    * Change an argument name
	    * Follow the interface change of scm_s_cond_internal()
	  - (scm_s_case):
	    * Replace scm_s_cond_internal() with dedicated implementation
	    * Add strict toplevel definition handling
	    * Remove '=>' form handling which is not defined in R5RS
	  - (scm_s_and, scm_s_or): Add strict toplevel definition handling
	  - (scm_s_let):
	    * Add arg 'body'
	    * Add optional duplicate variable check
	    * Add syntax binding rejection
	    * Fix usage of scm_add_environment() interface
	  - (scm_s_letstar):
	    * Add optional duplicate variable check
	    * Add syntax binding rejection
	    * Remove unneeded env extension for null bindings
	  - (scm_s_letrec):
	    * Add optional duplicate variable check
	    * Add syntax binding rejection
	  - (filter_definitions):
	    * Fix invalid acceptance of <body> that contains definitions and
	      expressions intermixed
	  - (scm_s_body):
	    * Fix invalid no-expressions <body> acceptance
	    * Remove unneeded env extension for no-definitions <body>
	    * Simplify
	  - (scm_s_begin):
	    * Fix invalid '(begin)' as expression acceptance (i.e. '(begin)'
	      is valid only at where definitions are allowed)
	    * Add strict toplevel definition handlings
	  - (scm_s_do):
	    * Fix broken per-iteration env isolation
	    * Add strict toplevel definition handlings
	    * Add optional duplicate variable check
	    * Add syntax binding rejection
	  - (scm_s_delay): Removed because completely invalid against R5RS
	  - (define_internal):
	    * Add syntax binding rejection
	    * Remove unneeded toplevel definition detection (it is performed
	      in scm_s_define())
	    * Remove broken internal definition on
	      !SCM_STRICT_DEFINE_PLACEMENT. Since it breaks the R5RS internal
	      definitions semantics, the macro is replaced with
	      SCM_USE_INTERNAL_DEFINITIONS and the feature is made exclusively
	      selectable from only 'completely valid' or 'disabled'. The
	      broken internal definitions have been withdrawn
	  - (scm_s_define):
	    * Fix invalid toplevel definitions acceptance (e.g. (if #t (define
	      foo #t)))
	    * Suppress unneeded return value evaluation by scm_eval()
	
	* sigscheme/configure.in
	  - Add use_promise, USE_PROMISE and SCM_USE_PROMISE
	* sigscheme/src/Makefile.am
	  - (R5RS_SYNTAX_SRCS): Add promise.c
	* sigscheme/src/procedure.c
	  - (scm_p_force): Removed
	* sigscheme/src/promise.c
	  - New file
	  - (scm_s_delay, scm_p_force): New function as placeholder. Previous
	    implementations are completely invalid against R5RS and discarded
	* sigscheme/src/module-srfi34.c
	  - (enclose): New static function
	  - (delay): Replace scm_s_delay() with enclose() to make independent
	    of invalidly implemented scm_s_delay()
	  - (guard_handler_body):
	    * Ditto
	    * Follow the interface change of scm_s_cond_internal()
	
	* sigscheme/src/module-sscm-ext.c
	  - (scm_p_current_environment): New function
	* sigscheme/src/module-siod.c
	  - (scm_initialize_siod): Define 'the-environment' as alias to
	    %%current-environment
	  - (scm_p_the_environment): Removed
	
	* sigscheme/src/error.c
	  - (scm_die): Add a FIXME comment
	
	* sigscheme/src/sigscheme.c
	  - (builtin_features): Add "internal-definitions",
	    "strict-toplevel-definitions", "strict-null-form",
	    "strict-vector-form", "strict-encoding-check"
	
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-begin.scm, test-define-internal.scm,
	    test-do.scm, test-lambda.scm, test-let.scm
	
	* sigscheme/test/unittest.scm
	  - (cond-expand): Comment out because of syntax binding invalidation
	    in this commit. Since SRFI-34 is implicitly enabled in both
	    SigScheme and Gauche, this change does not affect actual tests
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-srfi34-2.scm
	  - Remove cond-expand for SRFI-34
	
	* sigscheme/test/test-begin.scm
	* sigscheme/test/test-let.scm
	  - New file
	  - Add various tests
	* sigscheme/test/test-define-internal.scm
	* sigscheme/test/test-do.scm
	* sigscheme/test/test-lambda.scm
	  - New file copied from test-exp.scm
	  - Add and modify various tests
	* sigscheme/test/test-exp.scm
	  - Add and modify various tests
	  - Move some tests to avobe files
	* sigscheme/test/test-define.scm
	* sigscheme/test/test-syntax.scm
	* sigscheme/test/test-quote.scm
	  - Add and modify various tests
	
	* sigscheme/test/test-list.scm
	  - Fix invalid toplevel definitions
	
	* sigscheme/tools/summarize_quality.rb
	  - Modify messages
	* sigscheme/QALog
	* sigscheme/NEWS
	* sigscheme/TODO
	  - Update
	
2006-07-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* r5rs/sigscheme/configure.in
	  - Fix wrong example in the comment
	
2006-07-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add a FIXME comment about configuration variables definition
	  - Remove unneeded --enable-storage-* and --disable-storage-*
	  - Simplify --with-storage=IMPL
	
2006-07-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-gc.c
	  - (add_heap): Revert r3658. Don't change a code without reading its
	    meaning.
	
2006-07-02 kzk <mover@hct.zaq.ne.jp>
	
	* src/storage-gc.c
	  - (add_heap): fix terminate condition
	
2006-07-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - add --enable and --disable option for each configs
	
2006-06-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (filter_definitions, scm_s_body): Move code position. No other
	    logical and cosmetic changes are applied
	
2006-06-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-eval.scm
	  - Fix typo
	
2006-06-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	[qa] qquote.c
	
	* sigscheme/src/qquote.c
	  - (struct _vector_translator): Fix 64-bit capability
	  - (scm_listran): Replace #if SCM_STRICT_R5RS with
	    SCM_STRICT_ARGCHECK for dotted list check on splicing
	  - (scm_vectran):
	    * Fix broken execution on splicing with improper list
	    * Fix side-effective macro invocation
	  - (qquote_internal):
	    * Fix SCM_USE_VECTOR handlings
	    * Suppress warnings
	    * Eliminate unneeded codes
	* sigscheme/test/test-quote.scm
	  - Add various tests
	* sigscheme/QALog
	  - Add qquote.c
	  - Update
	
	* sigscheme/tools/summarize_quality.rb
	  - Modify message
	
2006-06-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_s_quasiquote, scm_s_unquote, scm_s_unquote_splicing): Enclose
	    into #if SCM_USE_QUASIQUOTE
	* sigscheme/src/sigschemeinternal.h
	  - (enum _tr_msg, tr_msg, struct _tr_param, tr_param, struct
	    _list_translator, list_translator, struct _vector_translator,
	    vector_translator, struct _sequence_translator,
	    sequence_translator, union _translator_ret, translator_ret,
	    TR_BOOL_MSG_P, TRL_INIT, TRL_GET_ELM, TRL_NEXT, TRL_ENDP,
	    TRL_GET_SUBLS, TRL_SET_SUBLS, TRL_EXTRACT, TRL_CALL, TRL_EXECUTE,
	    TRV_INIT, TRV_GET_ELM, TRV_NEXT, TRV_GET_INDEX, TRV_GET_VEC,
	    TRV_ENDP, TRV_EXTRACT, TRV_EXECUTE, TRV_CALL, TR_CALL, TR_EXECUTE,
	    TR_GET_ELM, TR_NEXT, TR_ENDP, TR_EXTRACT, scm_vectran,
	    scm_listran): Move to qquote.c
	* sigscheme/src/syntax.c
	  - (ERRMSG_BAD_SPLICE_LIST, RETURN_OBJECT, RETURN_BOOLEAN,
	    scm_listran, REPLACED_INDEX, SPLICED_INDEX, scm_vectran,
	    qquote_internal, scm_s_quasiquote, scm_s_unquote,
	    scm_s_unquote_splicing): Move to qquote.c
	* sigscheme/src/qquote.c
	  - New file copied from syntax.c
	  - (ERRMSG_BAD_SPLICE_LIST, RETURN_OBJECT, RETURN_BOOLEAN,
	    REPLACED_INDEX, SPLICED_INDEX,
	    qquote_internal, scm_s_quasiquote, scm_s_unquote,
	    scm_s_unquote_splicing): Moved from syntax.c
	  - (scm_listran, scm_vectran):
	    * Ditto
	    * Make static
	* sigscheme/src/Makefile.am
	  - (R5RS_SYNTAX_SRCS):
	    * New variable
	    * Add syntax.c, qquote.c, macro.c
	  - (libsscm_la_SOURCES): Simplify with $R5RS_SYNTAX_SRCS and
	    $R5RS_PROC_SRCS
	
2006-06-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_QUEUE_INVALIDATE, SCM_QUEUE_VALIDP): Fix storage
	    implementation-dependent definition
	  - Fix the comment about the message for translators
	  - Enclose TRV_*() into #if SCM_USE_VECTOR
	* sigscheme/src/syntax.c
	  - (REPLACED_INDEX, SPLICED_INDEX, scm_vectran): Enclose into #if
	    SCM_USE_VECTOR
	
2006-06-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* SCM_SAL_*_INIT()s are renamed to SCM_ISAL_*_INIT() to distinguish
	  them from SAL. ISAL stands for "Internal SAL". See the comment of
	  storage.c for further information
	
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_INT_INIT, SCM_SAL_CONS_INIT, SCM_SAL_IMMUTABLE_CONS_INIT,
	    SCM_SAL_SYMBOL_INIT, SCM_SAL_CHAR_INIT, SCM_SAL_STRING_INIT,
	    SCM_SAL_MUTABLE_STRING_INIT, SCM_SAL_IMMUTABLE_STRING_INIT,
	    SCM_SAL_FUNC_INIT, SCM_SAL_CLOSURE_INIT, SCM_SAL_VECTOR_INIT,
	    SCM_SAL_MUTABLE_VECTOR_INIT, SCM_SAL_IMMUTABLE_VECTOR_INIT,
	    SCM_SAL_PORT_INIT, SCM_SAL_CONTINUATION_INIT,
	    SCM_SAL_VALUEPACKET_INIT, SCM_SAL_HMACRO_INIT,
	    SCM_SAL_FARSYMBOL_INIT, SCM_SAL_SUBPAT_INIT,
	    SCM_SAL_C_POINTER_INIT, SCM_SAL_C_FUNCPOINTER_INIT): Rename to
	    SCM_ISAL_*_INIT()
	  - (SCM_ISAL_INT_INIT, SCM_ISAL_CONS_INIT,
	    SCM_ISAL_IMMUTABLE_CONS_INIT, SCM_ISAL_SYMBOL_INIT,
	    SCM_ISAL_CHAR_INIT, SCM_ISAL_STRING_INIT,
	    SCM_ISAL_MUTABLE_STRING_INIT, SCM_ISAL_IMMUTABLE_STRING_INIT,
	    SCM_ISAL_FUNC_INIT, SCM_ISAL_CLOSURE_INIT, SCM_ISAL_VECTOR_INIT,
	    SCM_ISAL_MUTABLE_VECTOR_INIT, SCM_ISAL_IMMUTABLE_VECTOR_INIT,
	    SCM_ISAL_PORT_INIT, SCM_ISAL_CONTINUATION_INIT,
	    SCM_ISAL_VALUEPACKET_INIT, SCM_ISAL_HMACRO_INIT,
	    SCM_ISAL_FARSYMBOL_INIT, SCM_ISAL_SUBPAT_INIT,
	    SCM_ISAL_C_POINTER_INIT, SCM_ISAL_C_FUNCPOINTER_INIT): Renamed
	    from SCM_SAL_*_INIT()
	* sigscheme/src/storage.c
	  - (SCM_CONS_INIT, SCM_IMMUTABLE_CONS_INIT, SCM_CLOSURE_INIT,
	    SCM_CHAR_INIT, SCM_INT_INIT, SCM_SYMBOL_INIT, SCM_STRING_INIT,
	    SCM_MUTABLE_STRING_INIT, SCM_IMMUTABLE_STRING_INIT, SCM_FUNC_INIT,
	    SCM_VECTOR_INIT, SCM_MUTABLE_VECTOR_INIT,
	    SCM_IMMUTABLE_VECTOR_INIT, SCM_PORT_INIT, SCM_CONTINUATION_INIT,
	    SCM_C_POINTER_INIT, SCM_C_FUNCPOINTER_INIT, SCM_VALUEPACKET_INIT,
	    SCM_HMACRO_INIT, SCM_FARSYMBOL_INIT, SCM_SUBPAT_INIT): Follow the
	    renamings of SCM_SAL_*_INIT()
	
2006-06-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add files for code quality management
	
	* sigscheme/QALog
	  - New file
	* sigscheme/Makefile.am
	  - (EXTRA_DIST): Add QALog
	* sigscheme/tools/summarize_quality.rb
	  - New file
	* sigscheme/tools/Makefile.am
	  - (EXTRA_DIST): Add summarize_quality.rb
	
2006-06-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_HAS_IMMEDIATE_CHAR_ONLY): Fix misdefinition
	  - Enclose configuration-dependent features into #if SCM_USE_*
	* sigscheme/src/sigscheme.c
	  - (builtin_features): New static variable
	  - (scm_initialize_internal):
	    * Provide builtin features based on the variable
	    * Enclose scm_init_port() into #if SCM_USE_PORT
	* sigscheme/src/storage.c
	  - Replace SCM_SAL_HAS_* with SCM_HAS_*
	  - Enclose configuration-dependent features into #if SCM_USE_*
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/read.c
	* sigscheme/src/write.c
	* sigscheme/src/procedure.c
	* sigscheme/src/format.c
	  - Enclose configuration-dependent features into #if SCM_USE_*
	
2006-06-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/env.c
	  - Fix a typo. Thanks Jun, really.
	
	* sigscheme/NEWS
	  - Update
	
2006-06-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Update version number to 0.6.1
	* sigscheme/src/Makefile.am
	  - (sscm_LDADD): Fix indirect specification of libsscm.la to make
	    make distcheck passed
	  - (libsscm_la_CPPFLAGS, sscm_CPPFLAGS): Fix -I$(top_srcdir)/include
	    with $(top_builddir)/include
	* sigscheme/test-c/Makefile.am
	  - (AM_CPPFLAGS): Fix -I$(top_srcdir)/include with
	    $(top_builddir)/include
	* sigscheme/test-c2/Makefile.am
	  - (AM_CPPFLAGS): Ditto
	* sigscheme/doc/release.txt
	  - Fix configure option specification
	* sigscheme/README
	  - Update
	
2006-06-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/gauche-euc-jp.scm
	* sigscheme/lib/slib.scm
	  - Fix ChangeLog information in accordance with [Anthy-dev 2989]
	* sigscheme/TODO
	  - Update
	
2006-06-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/AUTHORS
	* sigscheme/COPYING
	* sigscheme/m4/ax_c_data_aligned.m4
	* sigscheme/m4/ax_lib_glibc.m4
	* sigscheme/src/dllentry.c
	* sigscheme/src/format.c
	* sigscheme/src/global-aggregated.c
	* sigscheme/src/global.h
	* sigscheme/src/module-srfi28.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi48.c
	* sigscheme/src/scmint.h
	* sigscheme/src/scmport-basechar.c
	* sigscheme/src/scmport-config.h
	* sigscheme/src/scmport-file.c
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-mbchar.c
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/scmport-null.c
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-str.c
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport.h
	* sigscheme/src/sigscheme-combined.h
	* sigscheme/src/strcasecmp.c
	* sigscheme/test-c/cutter-sscm.h
	* sigscheme/test-c/test_alignment.c
	* sigscheme/test-c/test_format.c
	* sigscheme/test-c/test_gc_protect_stack.c
	* sigscheme/test-c/test_global.c
	* sigscheme/test-c/test_strcasecmp.c
	* sigscheme/test/test-char-cmp.scm
	* sigscheme/test/test-formatplus.scm
	* sigscheme/test/test-srfi28.scm
	* sigscheme/test/test-srfi34-2.scm
	* sigscheme/test/test-srfi48.scm
	* sigscheme/test/test-string-cmp.scm
	* sigscheme/test/test-syntax.scm
	* sigscheme/tools/scm_decl.rb
	  - Update my signature
	
2006-06-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/COPYING
	  - New file
	  - Insert our own license, Gauche's and Bigloo's
	* sigscheme/src/list.c
	* sigscheme/src/read.c
	* sigscheme/lib/slib.scm
	* sigscheme/test/bigloo-apply.scm
	* sigscheme/test/bigloo-bchar.scm
	* sigscheme/test/bigloo-bool.scm
	* sigscheme/test/bigloo-case.scm
	* sigscheme/test/bigloo-letrec.scm
	* sigscheme/test/bigloo-list.scm
	* sigscheme/test/bigloo-quote.scm
	* sigscheme/test/bigloo-vector.scm
	* sigscheme/test/gauche-euc-jp.scm
	* sigscheme/test/gauche-primsyn.scm
	  - Insert lacking license and copyright information
	
2006-06-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit change the boolean predicate API in accordance with
	  [Anthy-dev 2982]
	
	* sigscheme/src/sigscheme.h
	  - (SCM_NFALSEP): Removed
	  - (SCM_TRUEP): Enabled
	  - (SCM_ERROBJP): Follow the boolean predicate changes
	* sigscheme/src/sigschemeinternal.h
	  - (NFALSEP): Removed
	  - (TRUEP): Enabled
	  - (EQVP, EQUALP): Follow the boolean predicate changes
	* sigscheme/src/error.c
	  - (srfi34_providedp): Simplified
	* sigscheme/src/write.c
	  - (write_obj): Ditto
	* sigscheme/src/syntax.c
	  - (scm_s_if, scm_s_cond_internal, scm_s_or, scm_s_do): Ditto
	* sigscheme/src/macro.c
	  - (compile_rec, match_rec): Ditto
	* sigscheme/src/module.c
	  - (scm_providedp, scm_use_internal): Follow the boolean predicate
	    changes
	* sigscheme/src/module-srfi1.c
	  - (scm_p_srfi1_list_copy, scm_p_srfi1_iota): Ditto
	* sigscheme/TODO
	  - Update
	
2006-06-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Update version number to 0.6.0
	* sigscheme/README
	  - Update homepage URL
	* sigscheme/NEWS
	  - Update
	
2006-06-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_UNUSED): New macro
	* sigscheme/src/encoding.c
	  - (pred_always_true, pred_always_false): Add SCM_UNUSED attribute to
	    suppress warning
	
	* sigscheme/src/module.c
	  - (scm_s_use): Suppress warning
	
	* sigscheme/src/macro.c
	  - (match_reppat): Ditto
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_TRUEP): New macro (disabled for now)
	* sigscheme/src/sigschemeinternal.h
	  - (TRUEP): New macro (disabled for now)
	* sigscheme/TODO
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - Reorder macro categories
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c___attribute__.m4
	  - Replace ((noreturn)) style attributes with ((__noreturn__))
	  - Add compile tests for ((__noinline__)) and ((__unused__))
	* sigscheme/src/sigscheme.h
	  - (SCM_NOINLINE, SCM_NORETURN): Add workaround for some buggy Linux
	    distributions
	* sigscheme/TODO
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_ERRMSG_UNHANDLED_EXCEPTION, SCM_ERRMSG_IMPROPER_ARGS,
	    SCM_ERRMSG_NULL_IN_STRING): Move to sigschemeinternal.h
	  - (scm_symbol_value, scm_eval, scm_length, scm_list_tail): Moved
	    from sigschemeinternal.h
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ERRMSG_UNHANDLED_EXCEPTION, SCM_ERRMSG_IMPROPER_ARGS,
	    SCM_ERRMSG_NULL_IN_STRING): Moved from sigscheme.h
	  - (scm_symbol_value, scm_eval, scm_length, scm_list_tail): Move to
	    sigscheme.h
	  - Reorganize macro categories. No definition is modified
	* sigscheme/TODO
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fix compile error on LP64 platform
	
	* sigscheme/src/format.c
	  - Fix improper va_list copy without C99 va_copy
	  - (enum format_arg_type, enum format_args_type): Rename
	    format_arg_type to format_args_type
	  - (struct format_args): Removed
	  - (union format_args): New type
	  - (POP_FORMAT_ARG, format_directive, format_internal, scm_lformat,
	    scm_vformat): Change argument list passing method
	
	* sigscheme/src/read.c
	  - (skip_comment_and_space): Fix inconsistent return type
	
	* sigscheme/src/encoding.h
	  - (ScmMultibyteCharInfo): Comment out unused member 'start'
	
	* sigscheme/src/sigschemeinternal.h
	  - (ENSURE_MUTABLE_CONS, ENSURE_MUTABLE_STRING,
	    ENSURE_MUTABLE_VECTOR): Define as SCM_EMPTY_EXPR if the storage
	    layer is not capable of immutable type
	
	* sigscheme/test/test-num.scm
	  - Fix least and greatest 60-bit binary number
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* uim/uim-scm.c
	  - (uim_siod_fatal): Removed
	  - (sscm_is_exit_with_fatal_error): New variable
	  - (exit_hook): Make working
	  - (uim_scm_init): Hook fatal error callback
	  - (uim_scm_quit): Add sscm_is_exit_with_fatal_error handling
	* sigscheme/TODO
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	  - (l_error_looped): New variable
	  - (scm_fatal_error): Modify error message
	  - (scm_error_internal): Add error loop detection. This prevent
	    crashing on internal bugs such as the scm_string2number() bug
	    fixed on r3558 (tested)
	* sigscheme/TODO
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/number.c
	  - (scm_string2number): Fix implementation-dependent strtol handling
	    which causes infinite loop on (+ 3333333333333333333333333333)
	* sigscheme/TODO
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/sscm-test-configure-in.diff
	  - Removed
	* sigscheme/test-c2/README
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/sscm-test.h
	  - (TST_LIST_END): Add header printing at start of the test
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/include/sigscheme/Makefile.am
	  - Fix broken link of storage-common.h
	
2006-06-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/test-minishell.c
	  - (main):
	    * Add lacking newline at end of result
	    * Remove format dependency
	
2006-06-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c2/Makefile.am
	  - (EXTRA_DIST): Add lacking files
	  - Update *-coll.c only if --enable-maintainer-mode
	
	* sigscheme/include/sigscheme/Makefile.am
	  - (BUILT_SOURCES): Add lacking storage-common.h
	
2006-06-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_FALSE): Fix lacking SCM_COMPAT_SIOD_BUGS support
	* sigscheme/test-c2/utils.c
	  - (ALIGN_HEAP): New macro
	  - (malloc_aligned_8): New function
	  - (aligned_dup): Replace scm_malloc_aligned() with
	    malloc_aligned_8() to be workable on *BSD
	* sigscheme/test-c2/test-storage.c
	  - (testcase "eq? and constants"): Test #f and '() correctly on
	    SCM_COMPAT_SIOD_BUGS
	  - (testcase "int", testcase "char"): Suppress warning
	* sigscheme/test-c2/test-storage-compact.c
	  - (SCM_CONS_INIT, SCM_SYMBOL_INIT): Copied from storage.c
	  - (testcase "tag-consistent?"):
	    * Replace scm_malloc_aligned() with malloc_aligned_8() to be
	      workable on *BSD
	    * Follow the argument order change of SCM_SYMBOL_INIT() in r3498
	
2006-06-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add --with-storage=IMPL
	  - Add 'dev' configuration to --enable-configuration for our own
	    convenience
	
2006-06-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add check for GNU sed and subst GSED
	  - Add check for sh
	  - Add test-c2/collect.sh to AC_CONFIG_FILES
	* sigscheme/test-c2/collect.sh
	  - Move to collect.sh.in
	* sigscheme/test-c2/collect.sh.in
	  - Moved from collect.sh
	  - Replace sed with @GSED@
	  - Fix i command portability
	  - Add a FIXME comment about portability
	
2006-06-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c___attribute__.m4
	  - (AX_C___ATTRIBUTE__): Quote macro name to suppress warning
	
2006-06-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add test-c2/Makefile
	* sigscheme/Makefile.am
	  - (SUBDIRS): Add test-c2
	* sigscheme/experimental/test-c
	  - Move to sigscheme/test-c2 (as temporary location)
	* sigscheme/test-c2
	  - Moved from sigscheme/experimental/test-c
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_c_data_aligned.m4
	  - New file
	* sigscheme/configure.in
	  - Add AX_C_DATA_ALIGNED check
	* sigscheme/TODO
	  - Update
	
	* sigscheme/test-c/test_alignment.c
	  - Cosmetic change
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/Makefile.am
	  - Add rule for libtest_alignment.la
	* sigscheme/test-c/test_alignment.c
	  - New file
	  - Add tests for alignment on stack
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make SCM_GCC4_READY_GC default
	
	* sigscheme/configure.in
	  - Remove all SCM_GCC4_READY_GC related handlings
	* sigscheme/src/sigscheme.h
	  - (SCM_GC_PROTECTED_CALL, SCM_GC_PROTECTED_CALL_VOID,
	    SCM_GC_PROTECTED_CALL_INTERNAL, scm_gc_current_stack_fp,
	    scm_gc_protect_stack_fp, scm_gc_current_stack,
	    scm_gc_protect_stack, scm_gc_current_stack_internal,
	    scm_gc_protect_stack_internal): Enable by default
	  - (scm_gc_protect_stack): Removed (for !SCM_GCC4_READY_GC)
	* sigscheme/src/storage-gc.c
	  - Remove #if SCM_GCC4_READY_GC guard for the global vars
	  - (scm_gc_protect_stack): Removed
	  - (scm_gc_current_stack_internal, scm_gc_protect_stack_internal):
	    Enable by default
	* sigscheme/src/sigscheme.c
	  - (scm_initialize, scm_eval_c_string): Remove SCM_GCC4_READY_GC
	    codes
	* sigscheme/src/module.c
	  - (scm_use): Ditto
	* sigscheme/src/load.c
	  - (scm_load): Ditto
	* sigscheme/src/module-sscm-ext.c
	  - (scm_require): Ditto
	* sigscheme/src/main.c
	  - (repl, main): Ditto
	* sigscheme/TODO
	  - Update
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_gc_current_stack_fp): New variable
	  - (scm_gc_current_stack): Redefine as macro
	  - (scm_gc_current_stack_internal):
	    * Renamed from scm_gc_current_stack()
	    * Add SCM_NOINLINE
	* sigscheme/src/storage-gc.c
	  - (scm_init_gc): Add initialization of scm_gc_current_stack_fp
	  - (scm_gc_current_stack, scm_gc_current_stack_internal): Rename
	    scm_gc_current_stack to scm_gc_current_stack_internal
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (sigscheme-combined.c): Add config.h as dependency
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-gc.c
	  - (scm_gc_current_stack): New function
	  - (scm_gc_protect_stack_internal): Separate stack_start aquisition
	    to scm_gc_current_stack()
	* sigscheme/src/sigscheme.h
	  - (SCM_GC_PROTECTED_CALL_INTERNAL): Follow the stack protection
	    specificationn changes
	  - (scm_gc_current_stack): New function decl
	* sigscheme/test-c/test_gc_protect_stack.c
	  - Follow the stack protection specificationn changes. All tests have
	    been passed
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/test_gc_protect_stack.c
	  - Add lacking scm_gc_unprotect_stack() for each test
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/test_gc_protect_stack.c
	  - New file
	  - Add tests for scm_gc_protect_stack(). These tests are failed and
	    show design error and broken functionality of the function. Fix
	    needed
	* sigscheme/test-c/Makefile.am
	  - Add rule for libtest_gc_protect_stack.la
	
2006-06-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-compact.h
	  - Change SCM_MISC_XALIGN(3) of VECTOR and PORT to (2) in accordance
	    with [Anthy-dev 2973]
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/alloc.c
	  - (ALIGN_HEAP, scm_malloc_aligned): Fix broken expressions
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/alloc.c
	  - (ALIGN_HEAP): New macro
	  - (scm_malloc_aligned):
	    * Fix alignment rules
	    * Support bare malloc(3) which assumes 8-bytes aligned
	  - (scm_align_str): New function (disabled)
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage.c
	  - (SCM_IMMUTABLE_CONS_INIT, SCM_CLOSURE_INIT, SCM_CHAR_INIT,
	    SCM_INT_INIT, SCM_SYMBOL_INIT, SCM_STRING_INIT,
	    SCM_MUTABLE_STRING_INIT, SCM_IMMUTABLE_STRING_INIT, SCM_FUNC_INIT,
	    SCM_VECTOR_INIT, SCM_MUTABLE_VECTOR_INIT,
	    SCM_IMMUTABLE_VECTOR_INIT, SCM_PORT_INIT, SCM_CONTINUATION_INIT,
	    SCM_C_POINTER_INIT, SCM_C_FUNCPOINTER_INIT, SCM_VALUEPACKET_INIT,
	    SCM_HMACRO_INIT, SCM_FARSYMBOL_INIT, SCM_SUBPAT_INIT): Insert
	    parens for arguments as described in style.txt
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-num.scm
	* sigscheme/test/test-srfi48.scm
	  - Add integer range tests for storage-compact
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_MAKE_INT, SCM_SAL_MAKE_CHAR): Cosmetic change
	  - (SCM_SAL_CHAR_VALUE): Fix result cast with (scm_ichar_t)
	  - (SCM_MAKE_CONST): Add lacking result cast (ScmObj)
	* sigscheme/TODO
	  - Update
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_CONS_INIT, SCM_IMMUTABLE_CONS_INIT, SCM_CLOSURE_INIT,
	    SCM_CHAR_INIT, SCM_INT_INIT, SCM_SYMBOL_INIT, SCM_STRING_INIT,
	    SCM_MUTABLE_STRING_INIT, SCM_IMMUTABLE_STRING_INIT, SCM_FUNC_INIT,
	    SCM_VECTOR_INIT, SCM_MUTABLE_VECTOR_INIT,
	    SCM_IMMUTABLE_VECTOR_INIT, SCM_PORT_INIT, SCM_CONTINUATION_INIT,
	    SCM_C_POINTER_INIT, SCM_C_FUNCPOINTER_INIT, SCM_VALUEPACKET_INIT,
	    SCM_HMACRO_INIT, SCM_FARSYMBOL_INIT, SCM_SUBPAT_INIT): Move to
	    storage.c
	* sigscheme/src/storage.c
	  - (SCM_CONS_INIT, SCM_IMMUTABLE_CONS_INIT, SCM_CLOSURE_INIT,
	    SCM_CHAR_INIT, SCM_INT_INIT, SCM_SYMBOL_INIT, SCM_STRING_INIT,
	    SCM_MUTABLE_STRING_INIT, SCM_IMMUTABLE_STRING_INIT, SCM_FUNC_INIT,
	    SCM_VECTOR_INIT, SCM_MUTABLE_VECTOR_INIT,
	    SCM_IMMUTABLE_VECTOR_INIT, SCM_PORT_INIT, SCM_CONTINUATION_INIT,
	    SCM_C_POINTER_INIT, SCM_C_FUNCPOINTER_INIT, SCM_VALUEPACKET_INIT,
	    SCM_HMACRO_INIT, SCM_FARSYMBOL_INIT, SCM_SUBPAT_INIT):
	    * Moved from sigscheminternal.h
	    * Add a FIXME comment
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-fatty.h
	  - Include storage-common.h
	  - (SCM_SAL_MAKE_VALUEPACKET): Move !SCM_USE_VALUECONS case
	    definition to storage-common.h
	  - (SCM_SAL_MAKE_INT, SCM_SAL_MAKE_CONS, SCM_SAL_MAKE_IMMUTABLE_CONS,
	    SCM_SAL_MAKE_SYMBOL, SCM_SAL_MAKE_CHAR, SCM_SAL_MAKE_STRING,
	    SCM_SAL_MAKE_STRING_COPYING, SCM_SAL_MAKE_IMMUTABLE_STRING,
	    SCM_SAL_MAKE_IMMUTABLE_STRING_COPYING, SCM_SAL_MAKE_FUNC,
	    SCM_SAL_MAKE_CLOSURE, SCM_SAL_MAKE_VECTOR,
	    SCM_SAL_MAKE_IMMUTABLE_VECTOR, SCM_SAL_MAKE_PORT,
	    SCM_SAL_MAKE_CONTINUATION, SCM_SAL_MAKE_C_POINTER,
	    SCM_SAL_MAKE_C_FUNCPOINTER, SCM_SAL_MAKE_HMACRO,
	    SCM_SAL_MAKE_FARSYMBOL, SCM_SAL_MAKE_SUBPAT, scm_make_cons,
	    scm_make_immutable_cons, scm_make_int, scm_make_symbol,
	    scm_make_char, scm_make_immutable_string,
	    scm_make_immutable_string_copying, scm_make_string,
	    scm_make_string_copying, scm_make_func, scm_make_closure,
	    scm_make_vector, scm_make_immutable_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer, scm_make_hmacro, scm_make_farsymbol,
	    scm_make_subpat, SCM_SAL_INTERACTION_ENV, SCM_SAL_R5RS_ENV,
	    SCM_SAL_NULL_ENV, SCM_SAL_ENVP, SCM_SAL_SYM_QUOTE,
	    SCM_SAL_SYM_QUASIQUOTE, SCM_SAL_SYM_UNQUOTE,
	    SCM_SAL_SYM_UNQUOTE_SPLICING, scm_sym_quote, scm_sym_quasiquote,
	    scm_sym_unquote, scm_sym_unquote_splicing): Move to storage-common.h
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_MAKE_VALUEPACKET, SCM_SAL_MAKE_INT, SCM_SAL_MAKE_CONS,
	    SCM_SAL_MAKE_IMMUTABLE_CONS, SCM_SAL_MAKE_SYMBOL,
	    SCM_SAL_MAKE_CHAR, SCM_SAL_MAKE_STRING,
	    SCM_SAL_MAKE_STRING_COPYING, SCM_SAL_MAKE_IMMUTABLE_STRING,
	    SCM_SAL_MAKE_IMMUTABLE_STRING_COPYING, SCM_SAL_MAKE_FUNC,
	    SCM_SAL_MAKE_CLOSURE, SCM_SAL_MAKE_VECTOR,
	    SCM_SAL_MAKE_IMMUTABLE_VECTOR, SCM_SAL_MAKE_PORT,
	    SCM_SAL_MAKE_CONTINUATION, SCM_SAL_MAKE_C_POINTER,
	    SCM_SAL_MAKE_C_FUNCPOINTER, SCM_SAL_MAKE_HMACRO,
	    SCM_SAL_MAKE_FARSYMBOL, SCM_SAL_MAKE_SUBPAT, scm_make_cons,
	    scm_make_immutable_cons, scm_make_int, scm_make_symbol,
	    scm_make_char, scm_make_immutable_string,
	    scm_make_immutable_string_copying, scm_make_string,
	    scm_make_string_copying, scm_make_func, scm_make_closure,
	    scm_make_vector, scm_make_immutable_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer, scm_make_hmacro, scm_make_farsymbol,
	    scm_make_subpat, SCM_SAL_INTERACTION_ENV, SCM_SAL_R5RS_ENV,
	    SCM_SAL_NULL_ENV, SCM_SAL_ENVP, SCM_SAL_SYM_QUOTE,
	    SCM_SAL_SYM_QUASIQUOTE, SCM_SAL_SYM_UNQUOTE,
	    SCM_SAL_SYM_UNQUOTE_SPLICING, scm_sym_quote, scm_sym_quasiquote,
	    scm_sym_unquote, scm_sym_unquote_splicing): Move to
	    storage-common.h
	* sigscheme/src/storage-common.h
	  - New file copied from storage-fatty.h
	  - (SCM_SAL_MAKE_VALUEPACKET, SCM_SAL_MAKE_INT, SCM_SAL_MAKE_CONS,
	    SCM_SAL_MAKE_IMMUTABLE_CONS, SCM_SAL_MAKE_SYMBOL,
	    SCM_SAL_MAKE_CHAR, SCM_SAL_MAKE_STRING,
	    SCM_SAL_MAKE_STRING_COPYING, SCM_SAL_MAKE_IMMUTABLE_STRING,
	    SCM_SAL_MAKE_IMMUTABLE_STRING_COPYING, SCM_SAL_MAKE_FUNC,
	    SCM_SAL_MAKE_CLOSURE, SCM_SAL_MAKE_VECTOR,
	    SCM_SAL_MAKE_IMMUTABLE_VECTOR, SCM_SAL_MAKE_PORT,
	    SCM_SAL_MAKE_CONTINUATION, SCM_SAL_MAKE_C_POINTER,
	    SCM_SAL_MAKE_C_FUNCPOINTER, SCM_SAL_MAKE_HMACRO,
	    SCM_SAL_MAKE_FARSYMBOL, SCM_SAL_MAKE_SUBPAT, scm_make_cons,
	    scm_make_immutable_cons, scm_make_int, scm_make_symbol,
	    scm_make_char, scm_make_immutable_string,
	    scm_make_immutable_string_copying, scm_make_string,
	    scm_make_string_copying, scm_make_func, scm_make_closure,
	    scm_make_vector, scm_make_immutable_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer, scm_make_hmacro, scm_make_farsymbol,
	    scm_make_subpat, SCM_SAL_INTERACTION_ENV, SCM_SAL_R5RS_ENV,
	    SCM_SAL_NULL_ENV, SCM_SAL_ENVP, SCM_SAL_SYM_QUOTE,
	    SCM_SAL_SYM_QUASIQUOTE, SCM_SAL_SYM_UNQUOTE,
	    SCM_SAL_SYM_UNQUOTE_SPLICING, scm_sym_quote, scm_sym_quasiquote,
	    scm_sym_unquote, scm_sym_unquote_splicing):
	    * Moved from storage-{compact,fatty}.h
	    * Add appropriate conditional compilation guard
	* sigscheme/src/storage.c
	  - (scm_make_immutable_string, scm_make_immutable_vector): Enable
	    only if the SAL has the capability
	* sigscheme/src/Makefile.am
	  - (pkginclude_HEADERS): Add storage-common.h
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ENTYPE_INT, SCM_ENTYPE_CONS, SCM_ENTYPE_SYMBOL,
	    SCM_ENTYPE_CHAR, SCM_ENTYPE_STRING, SCM_ENTYPE_FUNC,
	    SCM_ENTYPE_CLOSURE, SCM_ENTYPE_VECTOR, SCM_ENTYPE_PORT,
	    SCM_ENTYPE_CONTINUATION, SCM_ENTYPE_C_POINTER,
	    SCM_ENTYPE_C_FUNCPOINTER, SCM_ENTYPE_MACRO, SCM_ENTYPE_FARSYMBOL,
	    SCM_ENTYPE_SUBPAT, SCM_ENTYPE_VALUEPACKET, SCM_ENTYPE_FREECELL):
	    Removed
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_MAKE_HMACRO): Fix invalid 2nd argument type
	
2006-05-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_MAKE_BOOL_INTERNAL): Removed
	  - (SCM_MAKE_BOOL): Remove unneeded and improper typecheck
	
2006-05-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_TYPESAFE_MACRO): Cosmetic change
	  - (SCM_MAKE_BOOL_INTERNAL): New macro
	  - (SCM_MAKE_BOOL, SCM_MAKE_CONS, SCM_MAKE_IMMUTABLE_CONS,
	    SCM_MAKE_INT, SCM_MAKE_CHAR, SCM_MAKE_SYMBOL, SCM_MAKE_STRING,
	    SCM_MAKE_STRING_COPYING, SCM_MAKE_IMMUTABLE_STRING,
	    SCM_MAKE_IMMUTABLE_STRING_COPYING, SCM_MAKE_FUNC,
	    SCM_MAKE_CLOSURE, SCM_MAKE_VECTOR, SCM_MAKE_IMMUTABLE_VECTOR,
	    SCM_MAKE_CONTINUATION, SCM_MAKE_VALUEPACKET, SCM_MAKE_PORT,
	    SCM_MAKE_HMACRO, SCM_MAKE_FARSYMBOL, SCM_MAKE_SUBPAT,
	    SCM_MAKE_C_POINTER, SCM_MAKE_C_FUNCPOINTER): Add typecheck with
	    SCM_TYPESAFE_MACRO()
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_MAKE_CHAR): Fix improper result type to suppress warnings
	    on SCM_TYPESAFE_MACRO()
	* sigscheme/src/char.c
	  - (scm_p_integer2char): Add cast for properness
	
2006-05-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_INT_INIT): Fix improper argument type
	  - (SCM_SYMBOL_INIT): Change argument order to be compatible with
	    corresponding SCM_MAKE_*, to avoid human errors
	  - (SCM_FUNC_INIT): Fix invalid argument types
	* sigscheme/src/storage-fatty.h
	  - (SCM_SAL_SYMBOL_INIT, SCM_SAL_FUNC_INIT): Change argument order to
	    be compatible with corresponding SCM_MAKE_*, to avoid human errors
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_SYMBOL_INIT, SCM_SAL_FUNC_INIT): Ditto
	* sigscheme/src/storage.c
	  - (scm_make_symbol, scm_make_func): Follow the argument changes
	
2006-05-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_CELL_MARKEDP, SCM_CELL_UNMARKEDP, SCM_CELL_MARK,
	    SCM_CELL_UNMARK): New macro
	
	* sigscheme/src/storage-gc.c
	  - (gc_sweep): Modify a comment
	
2006-05-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit revert some part of r3402
	
	* sigscheme/src/scmport.h
	  - (scm_make_port): Removed to fix the layer violation. This
	    file should be independent from SigScheme
	* sigscheme/src/storage-fatty.h
	  - (scm_make_port): Moved back from scmint.h
	* sigscheme/src/storage-compact.h
	  - (scm_make_port): Ditto
	  - (SCM_SAL_FREECELL_NEXT): Change return type to ScmObj
	* sigscheme/src/storage-gc.c
	  - (l_freelist): Restore the type to ScmObj
	  - (scm_alloc_cell, initialize_heap, add_heap, gc_sweep): Follow the
	    type restoration
	
2006-05-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add AM_MAINTAINER_MODE
	* sigscheme/src/Makefile.am
	  - Add MAINTAINER_MODE conditionals
	  - (MAINTAINERCLEANFILES):
	    * New variable
	    * Add $(BUILT_DIST)
	
2006-05-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_VECTOR_VALID_INDEXP): Remove disabled SAL version interface
	* sigscheme/src/storage-fatty.h
	  - (SCM_SAL_VECTOR_VALID_INDEXP): Removed
	
2006-05-14 Jun Inoue <jun.lambda@gmail.com>
	
	Minor fix to the macro expander.
	
	* sigscheme/src/macro.c
	  - fix minor typo in comment.
	
	  - (scm_ellipsis): new variable.
	  - (SCM_ELLIPSIS): define to scm_ellipsis.
	  - (dbg_flag, l_dbg_mode): relocate to satisfy compiler.
	  - (init_dbg): move global var initialization to scm_init_macro().
	  - (scm_init_macro): add global variable initialization.
2006-05-12 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/m4/ax_c___attribute__.m4
	
	  - Replace with different version from libpcap.  The new one works
	    with gcc4 while the old one doesn't.
	
2006-05-11 Jun Inoue <jun.lambda@gmail.com>
	
	Alternative testing framework in experimental/test-c.
	
	* sigscheme/experimental/test-c/utils.c
	* sigscheme/experimental/test-c/test-minishell.c
	* sigscheme/experimental/test-c/test-storage.c
	* sigscheme/experimental/test-c/test-storage-compact.c
	* sigscheme/experimental/test-c/sscm-test.h
	* sigscheme/experimental/test-c/Makefile.am
	* sigscheme/experimental/test-c/sscm-test-configure-in.diff
	* sigscheme/experimental/test-c/README
	* sigscheme/experimental/test-c/collect.sh
	
	  - New files.
2006-05-11 Jun Inoue <jun.lambda@gmail.com>
	
	Re-design of storage-compact.
	
	* sigscheme/src/storage-fatty.h
	
	  - (SCM_SAL_MAKE_HYGIENIC_MACRO): rename to SCM_SAL_MAKE_HMACRO
	
	  - (SCM_SAL_MAKE_HMACRO): rename from SCM_SAL_MAKE_HYGIENIC_MACRO
	
	  - (scm_make_port): comment out prototype.
	
	  - (scm_make_hygienic_macro, scm_make_hmacro): follow rename in storage.c.
	  - (SIZEOF_SCMOBJ, SCM_SAL_INT_INIT, SCM_SAL_INT_INIT,
	     SCM_SAL_CONS_INIT, SCM_SAL_IMMUTABLE_CONS_INIT, SCM_SAL_SYMBOL_INIT,
	     SCM_SAL_CHAR_INIT, SCM_SAL_STRING_INIT, SCM_SAL_MUTABLE_STRING_INIT,
	     SCM_SAL_IMMUTABLE_STRING_INIT, SCM_SAL_FUNC_INIT,
	     SCM_SAL_CLOSURE_INIT, SCM_SAL_VECTOR_INIT,
	     SCM_SAL_MUTABLE_VECTOR_INIT, SCM_SAL_IMMUTABLE_VECTOR_INIT,
	     SCM_SAL_PORT_INIT, SCM_SAL_CONTINUATION_INIT,
	     SCM_SAL_VALUEPACKET_INIT, SCM_SAL_HMACRO_INIT, SCM_SAL_FARSYMBOL_INIT,
	     SCM_SAL_SUBPAT_INIT, SCM_SAL_C_POINTER_INIT,
	     SCM_SAL_C_FUNCPOINTER_INIT): new macros
	
	* sigscheme/src/storage.c
	
	  - (scm_init_storage): add conditional directive, use initialization
	    macro.
	
	  - (scm_make_immutable_cons, scm_make_int, scm_make_char): enclose in proper
	    conditional directives, use init macros.
	
	  - (scm_make_hygienic_macro): rename to scm_make_hmacro, use init macro.
	
	  - (scm_make_hmacro): rename from scm_make_hygienic_macro.
	
	  - (scm_make_symbol, scm_make_farsymbol, scm_make_subpat,
	     scm_make_string_internal, scm_make_func, scm_make_closure,
	     scm_make_vector, scm_make_port, scm_make_continuation,
	     scm_make_valuepacket, scm_make_cpointer, scm_make_cfunc_pointer):
	    use init macros.
	
	  - (scm_type): follow renaming of pertinent macros and constants in
	    storage-compact.h.
	
	* sigscheme/src/char.c
	
	  - (scm_p_char_upcase, scm_p_char_downcase): replace
	    SCM_CHAR_SET_VALUE() with MAKE_CHAR()
	
	* sigscheme/src/compact.h
	
	  - removed to replace storage-compact.h
	
	* sigscheme/src/macro.c
	
	  - reorder #includes
	
	  - (dbg_funcs): add sentinel
	
	  - (scm_s_syntax_rules): follow renaming of MAKE_HYGIENIC_MACRO()
	
	* sigscheme/src/sigschemeinternal.h
	
	  - (SCM_INT_INIT, SCM_INT_INIT,
	     SCM_CONS_INIT, SCM_IMMUTABLE_CONS_INIT, SCM_SYMBOL_INIT,
	     SCM_CHAR_INIT, SCM_STRING_INIT, SCM_MUTABLE_STRING_INIT,
	     SCM_IMMUTABLE_STRING_INIT, SCM_FUNC_INIT,
	     SCM_CLOSURE_INIT, SCM_VECTOR_INIT,
	     SCM_MUTABLE_VECTOR_INIT, SCM_IMMUTABLE_VECTOR_INIT,
	     SCM_PORT_INIT, SCM_CONTINUATION_INIT,
	     SCM_VALUEPACKET_INIT, SCM_HMACRO_INIT, SCM_FARSYMBOL_INIT,
	     SCM_SUBPAT_INIT, SCM_C_POINTER_INIT,
	     SCM_C_FUNCPOINTER_INIT): new macros
	
	  - (MAKE_HYGIENIC_MACRO): rename to MAKE_HMACRO
	  - (MAKE_HMACRO): rename from MAKE_HYGIENIC_MACRO
	
	  - (DECLARE_FUNCTION): update comment.
	
	  - (MUST_POP_ARG): fix.
	
	* sigscheme/src/storage-gc.c
	
	  - (l_freelist): change type to ScmCell*
	
	  - (scm_alloc_cell): update handling of l_freelist.
	
	  - (mark_obj, within_heapp, gc_sweep): update to work with the new
	    storage-compact.h
	
	  - (free_cell): use finalizer macros.
	
	* sigscheme/src/storage-compact.h
	
	  - a complete rewrite of the original header (i.e. essentially a new
	    file).
	
	* sigscheme/src/sigscheme.h
	
	  - (ScmFuncTypeCode): update comment.
	
	  - (SCM_FUNCTYPE_TAIL_REC): rename to SCM_FUNCTYPE_TAILREC for
	    consistency with SCM_DECLARE_FUNCTION()'s parameters.  Likewise
	    for other constants.
	
	  - (SCM_TYPECHECK): remove.
	
	  - (SCM_TYPESAFE_MACRO, SCM_TYPESAFE_MACRO_VOID): new macros.
	  - (SCM_MAKE_HYGIENIC_MACRO): rename to SCM_MAKE_HMACRO.
	
	  - (SCM_VECTOR_VALID_INDEXP): make it a non-SAL macro
	
	* sigscheme/src/eval.c
	
	  - (call): remove the assumption sizeof(void*) >= sizeof(ScmObj)
	
	* sigscheme/src/scmport.h
	
	  - (scm_make_port): declare.
	
	* sigscheme/test/bigloo-list.scm
	
	  - comment out a test.
2006-05-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - resolve the dependency of SCM_USE_NUMBER and SCM_USE_FORMAT
	
	* sigscheme/src/config-old.h
	  - remove dependency resolution of SCM_USE_NUMBER and SCM_USE_FORMAT
	    and move to configure.in
	
	
2006-05-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - Remove misinserted '#if SCM_USE_VALUECONS' for
	    SCM_GLOBAL_VARS_BEGIN(symbol). Thanks Jun
	
2006-05-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add include/Makefile and include/sigscheme/Makefile
	* sigscheme/Makefile.am
	  - (SUBDIRS): Add 'include'
	* sigscheme/include
	* sigscheme/include/sigscheme
	  - New directory
	* sigscheme/include/Makefile.am
	* sigscheme/include/sigscheme/Makefile.am
	  - New file
	* sigscheme/src/Makefile.am
	  - (libsscm_la_CPPFLAGS, sscm_CPPFLAGS): Add -I$(top_srcdir)/include
	* sigscheme/src/config-old.h
	  - Remove obsolete error handling
	* sigscheme/src/encoding.h
	  - Add lacking config.h inclusion
	* sigscheme/src/scmint.h
	* sigscheme/src/global.h
	* sigscheme/src/sigscheme.h
	  - Fix config.h inclusion
	* sigscheme/src/sigscheme-combined.h
	  - Ditto
	  - Fix feature restrictions for _POSIX_C_SOURCE and _XOPEN_SOURCE
	* sigscheme/test-c/Makefile.am
	  - (AM_CPPFLAGS): Add -I$(top_srcdir)/include
	* sigscheme/test-c/cutter-sscm.h
	  - Fix broken config.h inclusion
	* sigscheme/test-c/test_global.c
	* sigscheme/test-c/test_strcasecmp.c
	* sigscheme/test-c/test_format.c
	* sigscheme/test-c/test_template.c
	  - Change SigScheme header inclusion scheme
	* uim/Makefile.am
	  - (libuim_la_CPPFLAGS): Add -I$(top_srcdir)/sigscheme/include
	* sigscheme/doc/global-obj.txt
	  - Update config.h-related descriptions
	
2006-05-06 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_GC_PROTECTED_CALL_INTERNAL): remove & from func
	  - (SCM_TYPECHECK): new macro.  Guile has a macro that does the same
	    thing.  Is this okay license-wise?
	
2006-05-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_MAKE_HYGIENIC_MACRO, SCM_MAKE_FARSYMBOL, SCM_MAKE_SUBPAT):
	    Add explicit arguments to define the interface
	
	* sigscheme/doc/style.txt
	  - Fix a typo
	
2006-05-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/cutter-r20-yamaken-extension.diff
	  - Fix shebang portability of cutter-update-suite. Thanks Jun for
	    reporting
	* sigscheme/doc/test-c.txt
	  - Fix installation instruction
	
2006-04-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/README
	  - Add URLs
	
	* sigscheme/doc/index.txt
	  - New file
	* sigscheme/doc/Makefile.am
	  - (TXTS): Add index.txt
	  - (ASCIIDOC_HTMLS): Add index.html
	
2006-04-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/Makefile.am
	  - (objdir): Removed since not needed
	
2006-04-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make documents installed
	
	* sigscheme/configure.in
	  - Add --enable-docdir and --enable-htmldir
	  - AC_SUBST docdir and htmldir
	* sigscheme/doc/Makefile.am
	  - (all, BUILT_DIST): Removed
	  - (EXTRA_DIST): Remove $(BUILT_DIST) and $(TXTS)
	  - (dist_doc_DATA, dist_html_DATA, MAINTAINERCLEANFILES): New
	    variable
	  - (.PHONY, clean-html): New target
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/Makefile.am
	  - (ASCIIDOC_HTMLS): Add style.html and test-c.html
	* sigscheme/doc/style.txt
	* sigscheme/doc/test-c.txt
	  - Convert to AsciiDoc. No descriptions are changed
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add include guard to config.h
	* sigscheme/src/config-old.h
	  - (__SIGSCHEME_CONFIG_H, __SIGSCHEME_CONFIG_OLD_H): Rename
	    __SIGSCHEME_CONFIG_H to __SIGSCHEME_CONFIG_OLD_H
	* sigscheme/test-c/cutter-sscm.h
	  - Include config.h as workaround for !SCM_COMPILING_LIBSSCM
	* sigscheme/test-c/test_template.c
	* sigscheme/test-c/test_global.c
	* sigscheme/test-c/test_strcasecmp.c
	* sigscheme/test-c/test_format.c
	  - Include SigScheme headers as system-header
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Make _POSIX_C_SOURCE, _XOPEN_SOURCE and _BSD_SOURCE defined only
	    when SCM_COMPILING_LIBSSCM
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Change the filename my-stdint.h to sigscheme-stdint.h
	* sigscheme/src/Makefile.am
	* sigscheme/src/alloc.c
	* sigscheme/src/encoding.h
	* sigscheme/src/scmint.h
	* sigscheme/src/scmport.h
	* sigscheme/src/sigscheme.h
	* sigscheme/src/storage-gc.c
	* sigscheme/src/symbol.c
	* sigscheme/src/write.c
	* sigscheme/test-c/test_format.c
	  - Follow the renaming
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make installed libsscm and header files workable
	
	* sigscheme/configure.in
	  - Change config.h location to src/config.h
	* sigscheme/src/Makefile.am
	  - (nodist_pkginclude_HEADERS): Add config.h
	* sigscheme/src/scmint.h
	* sigscheme/src/global.h
	* sigscheme/src/sigscheme.h
	  - Fix broken config.h inclusion on being included as installed
	    header
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add #include "src/config.h" to config.h
	* sigscheme/src/config.h
	  - Rename to config-old.h
	* sigscheme/src/config-old.h
	  - Renamed from config.h
	* sigscheme/src/Makefile.am
	  - Follow the file renaming
	* sigscheme/src/alloc.c
	* sigscheme/src/char.c
	* sigscheme/src/continuation.c
	* sigscheme/src/deep-cadrs.c
	* sigscheme/src/encoding.c
	* sigscheme/src/env.c
	* sigscheme/src/error.c
	* sigscheme/src/eval.c
	* sigscheme/src/format.c
	* sigscheme/src/global-aggregated.c
	* sigscheme/src/global.h
	* sigscheme/src/list.c
	* sigscheme/src/load.c
	* sigscheme/src/main.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/module-srfi28.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/module-srfi48.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi60.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-sscm-ext.c
	* sigscheme/src/module.c
	* sigscheme/src/number.c
	* sigscheme/src/port.c
	* sigscheme/src/procedure.c
	* sigscheme/src/read.c
	* sigscheme/src/scmint.h
	* sigscheme/src/scmport-basechar.c
	* sigscheme/src/scmport-file.c
	* sigscheme/src/scmport-mbchar.c
	* sigscheme/src/scmport-null.c
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/scmport-str.c
	* sigscheme/src/sigscheme-combined.h
	* sigscheme/src/sigscheme.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/storage-gc.c
	* sigscheme/src/storage.c
	* sigscheme/src/strcasecmp.c
	* sigscheme/src/string.c
	* sigscheme/src/symbol.c
	* sigscheme/src/syntax.c
	* sigscheme/src/template.c
	* sigscheme/src/template.h
	* sigscheme/src/vector.c
	* sigscheme/src/write.c
	  - Replace #include "config.h" with <config.h> as described in
	    "Configuration Header Files" section of autoconf.info
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_exit):
	    * Add optional 'status' argument
	    * Add SCM_NORETURN attribute
	* sigscheme/src/module-sscm-ext.c
	  - (scm_p_exit):
	    * Add optional 'status' argument handling
	    * Cosmetic change
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Fix default value of use_dump as "no"
	  - Fix a comment
	
2006-04-29 kzk <mover@hct.zaq.ne.jp>
	
	* add exit procedure
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_exit): new function
	* sigscheme/src/module-sscm-ext.c
	  - (scm_p_exit): new function
	
	
2006-04-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/cutter-sscm.h
	  - Add comment about the testing framework
	
2006-04-29 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/compact.h
	  - fix typo (String -> Vector)
	
2006-04-29 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - use AC_DEFINE for SCM_DEBUG flag
	
2006-04-29 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - fix typo ("Defaultly" -> "By default")
	
2006-04-29 kzk <mover@hct.zaq.ne.jp>
	
	* Resolve some FIXME
	
	* sigscheme/configure.in
	  - Complement all variables such as use_continuation, use_char,
	    use_hygienic_macro and so on
	  - Fix '-DSCM_FOO'-style macro definitions with AC_DEFINE(var, val, desc) as
	    described in "Defining C Preprocessor Symbols" section of autoconf.info.
	  - Make all variables that has "use_yes" or "use_no" conditions such as
	    USE_CONTINUATION, USE_CHAR and so on configurable
	
2006-04-27 Jun Inoue <jun.lambda@gmail.com>
	
	
2006-04-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/Makefile.am
	  - (TXTS): Add release.txt
	  - (ASCIIDOC_HTMLS): Add release.html
	* sigscheme/doc/release.txt
	  - New file
	  - Describe about release procedures
	* sigscheme/Makefile.am
	  - Update comment
	
2006-04-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/Makefile.am
	  - (dist-hook): Fix broken repository check
	  - Fix release sequence in the comment
	
2006-04-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	* sigscheme/doc/Makefile.am
	  - Replace null test with 'exit 1'
	
2006-04-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Change package name to 'SigScheme' (and keep tarname 'sigscheme')
	  - Add dist-bzip2 option to AM_INIT_AUTOMAKE
	  - Replace AC_CONFIG_HEADER with more preferable AC_CONFIG_HEADERS
	  - Add check for md5 commands
	* sigscheme/Makefile.am
	  - (DISTCLEANFILES):
	    * New variable
	    * Add gnuify-changelog.pl
	  - (DIST_SUM_LIST): New variable
	  - (ChangeLog): Place gnuify-changelog.pl to builddir
	  - (distcheck-hook, distclean-local):
	    * New target
	    * Add ChangeLog handling for distcheck
	  - (sum): New target
	
2006-04-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add lacking AC_PROG_EGREP
	  - Add check for cutter.h
	  - Add AC_GNU_SOURCE as comment
	* sigscheme/test-c/Makefile.am
	  - Disable tests if Cutter is not installed
	
2006-04-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add FIXME comments
	  - Rename strict_arg_check with strict_argcheck to keep consistency
	    with corresponding C macro name STRICT_ARGCHECK. Such
	    inconsistency may cause a problem on a script processing
	  - Fix typo on USE_SYNTAX_CASE
	* sigscheme/src/config.h
	  - Add a FIXME comment
	
2006-04-24 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/README
	  - describe configure option (--enable-configuration and
	    --enable-multibyte)
	
2006-04-24 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - allow some pattern of encodings
	  - "utf8" is used as the default encoding
	
2006-04-24 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - select 'full' spec as default because most user may want to use
	    full spec of SigScheme.
	  - fixed typo
	    (use_use_sscm_format_extension -> use_sscm_format_extension)
	
2006-04-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - add --enable-configuration option
	  - add --enable-multibyte option
	
	* sigscheme/src/config.h
	  - (SCM_USE_CONTINUATION
	     SCM_USE_QUASIQUOTE
	     SCM_USE_HYGIENIC_MACRO
	     SCM_USE_SYNTAX_CASE
	     SCM_USE_UNHYGIENIC_MACRO
	     SCM_USE_INT
	     SCM_USE_RATIONAL
	     SCM_USE_REAL
	     SCM_USE_COMPLEX
	     SCM_USE_CHAR
	     SCM_USE_STRING
	     SCM_USE_VECTOR
	     SCM_USE_PORT
	     SCM_USE_READER
	     SCM_USE_WRITER
	     SCM_USE_LOAD
	     SCM_USE_DEEP_CADRS
	     SCM_USE_RAW_C_FORMAT
	     SCM_USE_S SCM_FORMAT_EXTENSION
	     SCM_USE_S SCM_EXTENSIONS
	     SCM_USE_LEGACY_MACRO
	     SCM_USE_DUMP
	     SCM_USE_EVAL_C_STRING
	     SCM_USE_SRFI1
	     SCM_USE_SRFI2
	     SCM_USE_SRFI6
	     SCM_USE_SRFI8
	     SCM_USE_SRFI22
	     SCM_USE_SRFI23
	     SCM_USE_SRFI28
	     SCM_USE_SRFI34
	     SCM_USE_SRFI38
	     SCM_USE_SRFI48
	     SCM_USE_SRFI60
	     SCM_USE_SRFI75_NAMED_CHARS
	     SCM_USE_SRFI75
	     SCM_COMPAT_SIOD
	     SCM_COMPAT_SIOD_BUGS
	     SCM_USE_UTF8
	     SCM_USE_EUCCN
	     SCM_USE_EUCJP
	     SCM_USE_EUCKR
	     SCM_USE_SJIS
	     SCM_USE_UTF8_AS_DEFAULT
	     SCM_USE_EUCCN_AS_DEFAULT
	     SCM_USE_EUCJP_AS_DEFAULT
	     SCM_USE_EUCKR_AS_DEFAULT
	     SCM_USE_SJIS_AS_DEFAULT
	     SCM_STRICT_R5RS
	     SCM_STRICT_NULL_FORM
	     SCM_STRICT_VECTOR_FORM
	     SCM_STRICT_ARGCHECK
	     SCM_STRICT_DEFINE_PLACEMENT
	     SCM_STRICT_ENCODING_CHECK
	     SCM_CONST_LIST_LITERAL
	     SCM_CONST_VECTOR_LITERAL
	     SCM_ACCESSOR_ASSERT
	     SCM_USE_VALUECONS
	     SCM_USE_NULL_CAPABLE_STRING
	     SCM_USE_WARNING_SUPPRESSOR
	     SCM_USE_STORAGE_FATTY
	     SCM_USE_STORAGE_COMPACT
	     SCM_GCC4_READY_GC
	     SCM_USE_64BIT_FIXNUM
	     SCM_USE_32BIT_FIXNUM
	     SCM_USE_INT_FIXNUM
	     SCM_USE_LONG_FIXNUM
	     SCM_USE_64BIT_SCMREF
	     SCM_USE_32BIT_SCMREF
	     SCM_USE_INTPTR_SCMREF
	     SCM_DEBUG): removed
	
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/libtool-version.mk
	  - New file
	  - (libsscm_version): New variable
	* sigscheme/src/Makefile.am
	  - Include libtool-version.mk
	  - (libsscm_la_LDFLAGS):
	    * New variable
	    * Add -version-info $(libsscm_version)
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/Makefile.am
	  - (SSCM_REPOSITORY): Fix
	  - (TAGS_REPOSITORY): New variable
	  - (dist-hook):
	    * New target
	    * Terminate make dist if the tree is not tagged
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/strcasecmp.c
	* sigscheme/src/symbol.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/read.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/error.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/storage.c
	* sigscheme/src/list.c
	* sigscheme/src/char.c
	* sigscheme/src/module.c
	* sigscheme/src/procedure.c
	* sigscheme/src/write.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/string.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/load.c
	* sigscheme/src/port.c
	* sigscheme/src/env.c
	* sigscheme/src/number.c
	* sigscheme/src/storage-gc.c
	* sigscheme/src/module-srfi60.c
	* sigscheme/src/storage-compact.h
	* sigscheme/src/module-srfi28.c
	* sigscheme/src/vector.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/syntax.c
	* sigscheme/src/eval.c
	  - Transpose inappropriately inverted "Type Definitions" and "Macro
	    Definitions" section. no code is changed
	* sigscheme/TODO
	  - Update
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/strcasecmp.c
	* sigscheme/src/scmport-file.c
	* sigscheme/src/symbol.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/read.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/error.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/scmport-str.c
	* sigscheme/src/module-srfi48.c
	* sigscheme/src/storage.c
	* sigscheme/src/list.c
	* sigscheme/src/char.c
	* sigscheme/src/scmport-mbchar.c
	* sigscheme/src/module.c
	* sigscheme/src/procedure.c
	* sigscheme/src/write.c
	* sigscheme/src/dllentry.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/string.c
	* sigscheme/src/deep-cadrs.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/template.c
	* sigscheme/src/load.c
	* sigscheme/src/port.c
	* sigscheme/src/global-aggregated.c
	* sigscheme/src/env.c
	* sigscheme/src/number.c
	* sigscheme/src/storage-gc.c
	* sigscheme/src/module-srfi60.c
	* sigscheme/src/storage-compact.h
	* sigscheme/src/scmport-null.c
	* sigscheme/src/module-srfi28.c
	* sigscheme/src/vector.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/continuation.c
	* sigscheme/src/main.c
	* sigscheme/src/syntax.c
	* sigscheme/src/module-sscm-ext.c
	* sigscheme/src/eval.c
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/format.c
	* sigscheme/src/alloc.c
	* sigscheme/src/scmport-basechar.c
	  - Replace header comments as:
	    "Macro Declarations"       -> "Macro Definitions"
	    "Struct Declarations"      -> "Type Definitions"
	    "Variable Declarations"    -> "Variable Definitions" (in *.c)
	    "Function Implementations" -> "Function Definitions"
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string-cmp.scm
	* sigscheme/test/test-srfi1.scm
	* sigscheme/test/test-srfi2.scm
	* sigscheme/test/test-syntax.scm
	* sigscheme/test/test-eval.scm
	* sigscheme/test/test-srfi6.scm
	* sigscheme/test/test-define.scm
	* sigscheme/test/test-srfi8.scm
	* sigscheme/test/test-exp.scm
	* sigscheme/test/test-quote.scm
	* sigscheme/test/test-tail-rec.scm
	* sigscheme/test/test-string.scm
	* sigscheme/test/test-srfi60.scm
	* sigscheme/test/test-map.scm
	* sigscheme/test/test-srfi28.scm
	* sigscheme/test/test-srfi48.scm
	* sigscheme/test/test-equation.scm
	* sigscheme/test/test-apply.scm
	* sigscheme/test/test-enc-utf8.scm
	* sigscheme/test/test-delay-force.scm
	* sigscheme/test/test-char-cmp.scm
	* sigscheme/test/test-formatplus.scm
	* sigscheme/test/test-num.scm
	* sigscheme/test/test-vector.scm
	* sigscheme/test/unittest.scm
	* sigscheme/test/test-enc-eucjp.scm
	* sigscheme/test/test-srfi34-2.scm
	* sigscheme/test/test-continuation.scm
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-list.scm
	* sigscheme/test/test-enc-sjis.scm
	* sigscheme/test/test-enc-eucgeneric.scm
	* sigscheme/test/test-char.scm
	* sigscheme/test/test-srfi38.scm
	* sigscheme/test/test-syntax-rules.scm
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/strcasecmp.c
	* sigscheme/src/scmport-file.c
	* sigscheme/src/symbol.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/scmport-file.h
	* sigscheme/src/config.h
	* sigscheme/src/read.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/encoding.c
	* sigscheme/src/error.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/encoding.h
	* sigscheme/src/scmport-str.c
	* sigscheme/src/encoding-config.h
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmint.h
	* sigscheme/src/module-srfi48.c
	* sigscheme/src/storage.c
	* sigscheme/src/global.h
	* sigscheme/src/list.c
	* sigscheme/src/char.c
	* sigscheme/src/scmport-mbchar.c
	* sigscheme/src/module.c
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/procedure.c
	* sigscheme/src/write.c
	* sigscheme/src/compact.h
	* sigscheme/src/dllentry.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/macro.c
	* sigscheme/src/string.c
	* sigscheme/src/deep-cadrs.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/template.c
	* sigscheme/src/load.c
	* sigscheme/src/template.h
	* sigscheme/src/port.c
	* sigscheme/src/global-aggregated.c
	* sigscheme/src/env.c
	* sigscheme/src/number.c
	* sigscheme/src/sigscheme-combined.h
	* sigscheme/src/storage-gc.c
	* sigscheme/src/module-srfi60.c
	* sigscheme/src/storage-compact.h
	* sigscheme/src/scmport-null.c
	* sigscheme/src/scmport-config.h
	* sigscheme/src/module-srfi28.c
	* sigscheme/src/vector.c
	* sigscheme/src/scmport-null.h
	* sigscheme/src/sigscheme.c
	* sigscheme/src/continuation.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/main.c
	* sigscheme/src/syntax.c
	* sigscheme/src/module-sscm-ext.c
	* sigscheme/src/eval.c
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/format.c
	* sigscheme/src/alloc.c
	* sigscheme/src/scmport.h
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-basechar.c
	* sigscheme/test-c/test_global.c
	* sigscheme/test-c/test_strcasecmp.c
	* sigscheme/test-c/test-storage-compact.c
	* sigscheme/test-c/test_format.c
	* sigscheme/test-c/test_template.c
	* sigscheme/tools/build_func_table.rb
	* sigscheme/tools/check_declare_func_typo.rb
	* sigscheme/tools/functable-header.txt
	* sigscheme/tools/scm_decl.rb
	* sigscheme/tools/check_initialize_scm_null.rb
	  - Replace 'FileName' in comment with 'Filename'
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_finalize_storage, scm_fin_storage): Rename
	    scm_finalize_storage() to scm_fin_storage()
	  - (scm_finalize_gc, scm_fin_gc): Rename scm_finalize_gc() to
	    scm_fin_gc()
	  - (scm_finalize_continuation, scm_fin_continuation): Rename
	    scm_finalize_continuation() to scm_fin_continuation()
	  - (scm_finalize_symbol, scm_fin_symbol): Rename
	    scm_finalize_symbol() to scm_fin_symbol()
	* sigscheme/src/continuation.c
	  - (scm_finalize_continuation, scm_fin_continuation): Rename
	    scm_finalize_continuation() to scm_fin_continuation()
	* sigscheme/src/symbol.c
	  - (scm_finalize_symbol, scm_fin_symbol): Rename
	    scm_finalize_symbol() to scm_fin_symbol()
	* sigscheme/src/storage.c
	  - (scm_finalize_storage): Rename to scm_fin_storage()
	  - (scm_fin_storage):
	    * Renamed from scm_finalize_storage()
	    * Follow the renamings
	* sigscheme/src/storage-gc.c
	  - (scm_finalize_gc, scm_fin_gc): Rename scm_finalize_gc() to
	    scm_fin_gc()
	* sigscheme/src/sigscheme.c
	  - (scm_finalize): Follow the renamings
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ENTYPE_INT, SCM_ENTYPE_CONS, SCM_ENTYPE_SYMBOL,
	    SCM_ENTYPE_CHAR, SCM_ENTYPE_STRING, SCM_ENTYPE_FUNC,
	    SCM_ENTYPE_CLOSURE, SCM_ENTYPE_VECTOR, SCM_ENTYPE_PORT,
	    SCM_ENTYPE_CONTINUATION, SCM_ENTYPE_VALUEPACKET, SCM_ENTYPE_MACRO,
	    SCM_ENTYPE_FARSYMBOL, SCM_ENTYPE_SUBPAT, SCM_ENTYPE_C_POINTER,
	    SCM_ENTYPE_C_FUNCPOINTER, SCM_ENTYPE_FREECELL): Enable only if
	    SCM_USE_STORAGE_COMPACT
	* sigscheme/src/storage-fatty.h
	  - (SCM_SAL_ENTYPE_INT, SCM_SAL_ENTYPE_CONS, SCM_SAL_ENTYPE_SYMBOL,
	    SCM_SAL_ENTYPE_CHAR, SCM_SAL_ENTYPE_STRING, SCM_SAL_ENTYPE_FUNC,
	    SCM_SAL_ENTYPE_CLOSURE, SCM_SAL_ENTYPE_VECTOR,
	    SCM_SAL_ENTYPE_PORT, SCM_SAL_ENTYPE_CONTINUATION,
	    SCM_SAL_ENTYPE_VALUEPACKET, SCM_SAL_ENTYPE_MACRO,
	    SCM_SAL_ENTYPE_FARSYMBOL, SCM_SAL_ENTYPE_SUBPAT,
	    SCM_SAL_ENTYPE_C_POINTER, SCM_SAL_ENTYPE_C_FUNCPOINTER,
	    SCM_SAL_ENTYPE_FREECELL): Removed
	  - (SCM_SAL_MAKE_VALUEPACKET, SCM_SAL_VALUEPACKET_VALUES,
	    SCM_SAL_RECLAIM_CELL): Follow the macros removal
	* sigscheme/src/storage.c
	  - (scm_init_storage, scm_make_cons, scm_make_immutable_cons,
	    scm_make_int, scm_make_symbol, scm_make_char, scm_make_char,
	    scm_make_hygienic_macro, scm_make_farsymbol, scm_make_subpat,
	    scm_make_string_internal, scm_make_func, scm_make_closure,
	    scm_make_vector, scm_make_port, scm_make_continuation,
	    scm_make_value_packet, scm_make_cpointer, scm_make_cfunc_pointer):
	    Ditto
	* sigscheme/src/write.c
	  - (write_obj, write_ss_scan): Ditto
	
2006-04-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/gc-protection.txt
	  - Update with current implementation
	* sigscheme/doc/Makefile.am
	  - (ASCIIDOC_HTMLS): Add gc-protection.html
	* sigscheme/TODO
	  - Update
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-protection.c
	  - Removed
	* sigscheme/doc/gc-protection.txt
	  - New file
	  - Move descriptions from storage-protection.c
	* sigscheme/doc/Makefile.am
	  - (TXTS): Add gc-protection.txt
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (sigscheme-combined.c): Make perl-independent
	* sigscheme/doc/global-obj.txt
	  - Reflect the perl-independency
	
	* sigscheme/doc/spec.txt
	  - Update about hygienic macros
	* sigscheme/NEWS
	* sigscheme/TODO
	  - Update
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (DISTCLEANFILES): Add my-stdint.h
	
	* uim/Makefile.am
	  - (sigscheme-combined): New target to build sigscheme-combined.c
	  - (BUILT_SOURCES):
	    * New variable
	    * Add sigscheme-combined
	  - (.PHONY):
	    * New target
	    * Add sigscheme-combined
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/global-obj.txt
	  - Replace listing blocks with C code filters
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/global.h
	  - (SCM_GLOBAL_VARS_FIN): New macro
	* sigscheme/src/symbol.c
	  - (scm_finalize_symbol): Add SCM_GLOBAL_VARS_FIN()
	* sigscheme/src/storage.c
	  - (scm_finalize_storage): Ditto
	* sigscheme/src/module.c
	  - (scm_fin_module): Ditto
	* sigscheme/src/storage-gc.c
	  - (scm_finalize_gc): Ditto
	* sigscheme/src/sigscheme.c
	  - (scm_finalize): Ditto
	* sigscheme/src/continuation.c
	  - (scm_finalize_continuation): Ditto
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_s_expand_macro, scm_s_syntax_rules, scm_s_match,
	    scm_unwrap_syntaxx, scm_unwrap_keyword): Add SCM_EXPORT
	* sigscheme/src/sigschemeinternal.h
	  - (scm_lookup_frame, scm_pack_env, scm_unpack_env, scm_subenvp,
	    scm_identifierequalp, scm_wrap_identifier, scm_vectran,
	    scm_listran, scm_init_macro, scm_expand_macro, scm_p_reversex,
	    scm_macro_bad_scope, scm_list_tail): Ditto
	* sigscheme/src/macro.c
	  - (debug_mode): Renamed to l_debug_mode
	  - (l_debug_mode):
	    * Renamed from debug_mode
	    * Rewrite for global.h
	  - (dbg_print, scm_p_set_macro_debug_flagsx): Follow the renaming
	  - (init_dbg): Add initialization of l_debug_mode
	  - (scm_init_macro, scm_macro_bad_scope, scm_expand_macro,
	    scm_s_expand_macro, scm_s_syntax_rules, scm_s_match,
	    scm_unwrap_syntaxx, scm_unwrap_keyword, scm_p_reversex): Add
	    SCM_EXPORT
	* sigscheme/src/env.c
	  - (scm_pack_env, scm_unpack_env, scm_identifierequalp,
	    scm_wrap_identifier, scm_lookup_frame): Ditto
	* sigscheme/src/syntax.c
	  - (scm_listran, scm_vectran): Ditto
	* sigscheme/src/list.c
	  - (scm_list_tail): Ditto
	* sigscheme/src/storage-fatty.h
	  - (scm_make_hygienic_macro, scm_make_farsymbol, scm_make_subpat):
	    Ditto
	* sigscheme/src/storage.c
	  - (scm_make_hygienic_macro, scm_make_farsymbol, scm_make_subpat):
	    Ditto
	* sigscheme/TODO
	  - Update
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/global-obj.txt
	  - Descrie about functions (forgotten)
	  - Add description about contidional compilation
	  - Move "Combined-source mode with exported API symbols" section
	
2006-04-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme-combined.h
	  - Remove description about combined-source and merged into
	    global-obj.txt
	* sigscheme/doc/global-obj.txt
	  - New file
	  - Describe about combined-source mode and aggregated global
	    variables
	* sigscheme/doc/spec.txt
	* sigscheme/doc/design.txt
	  - Remove obsolete comment
	* sigscheme/doc/Makefile.am
	  - (TXTS): Add global-obj.txt
	  - (ASCIIDOC_HTMLS): Add global-obj.html
	* sigscheme/TODO
	  - Update
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Add test-syntax-rules.scm
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit remove the texinfo documents in accordance with
	  [Anthy-dev 2861]
	
	* sigscheme/doc/Makefile.am
	  - (EXTRA_DIST): Remove $(TEXIS)
	  - (TEXIS, pdf, .PHONY): Removed
	  - (html): Remove texi2html processing
	* sigscheme/doc/sscm-doc.texi
	* sigscheme/doc/indexfn.texi
	* sigscheme/doc/features.texi
	* sigscheme/doc/coresyntax.texi
	* sigscheme/doc/introduction.texi
	* sigscheme/doc/references.texi
	* sigscheme/doc/coreprocedures.texi
	  - Removed
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Fix Makefile generation
	* sigscheme/tools/Makefile.am
	  - (EXTRA_DIST): Add scm-obj-compact-gdbinit
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Fix broken file listing
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/experimental
	* sigscheme/experimental/Makefile.am
	* sigscheme/misc
	* sigscheme/misc/Makefile.am
	  - Removed
	* sigscheme/misc/scm-obj-compact-gdbinit
	  - Move to tools
	* sigscheme/tools/scm-obj-compact-gdbinit
	  - Moved from misc
	* sigscheme/tools/Makefile.am
	  - (EXTRA_DIST): Add scm-obj-compact-gdbinit
	* sigscheme/Makefile.am
	  - (SUBDIRS):
	    * Remove misc and experimental
	    * Add lib
	  - (EXTRA_DIST): Remove slib.scm
	* sigscheme/lib
	  - New directory
	* sigscheme/Makefile.am
	  - New file
	  - (EXTRA_DIST): Add slib.scm
	* sigscheme/lib/slib.scm
	  - Moved from topdir
	* sigscheme/slib.scm
	  - Move to lib
	* sigscheme/TODO
	  - Update
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (pkginclude_HEADERS): Move my-stdint.h to nodist_pkginclude_HEADERS
	  - (nodist_pkginclude_HEADERS): Moved my-stdint.h from pkginclude_HEADERS
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-symbol.c
	  - Rename to symbol.c
	* sigscheme/src/symbol.c
	  - Renamed from storage-symbol.c
	* sigscheme/src/storage-continuation.c
	  - Rename to continuation.c
	* sigscheme/src/continuation.c
	  - Renamed from storage-continuation.c
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Follow the renamings
	* sigscheme/src/sigscheme.h
	* sigscheme/src/sigschemeinternal.h
	  - Ditto
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/template.h
	* sigscheme/src/template.c
	  - Remove place indicators for #include
	  - Add '#include "config.h"'
	* sigscheme/src/compact.h
	* sigscheme/src/encoding.h
	* sigscheme/src/global.h
	* sigscheme/src/scmint.h
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport.h
	* sigscheme/src/sigscheme.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/alloc.c
	* sigscheme/src/char.c
	* sigscheme/src/deep-cadrs.c
	* sigscheme/src/encoding.c
	* sigscheme/src/env.c
	* sigscheme/src/error.c
	* sigscheme/src/eval.c
	* sigscheme/src/format.c
	* sigscheme/src/global-aggregated.c
	* sigscheme/src/list.c
	* sigscheme/src/load.c
	* sigscheme/src/main.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/module-srfi28.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/module-srfi48.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi60.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-sscm-ext.c
	* sigscheme/src/module.c
	* sigscheme/src/number.c
	* sigscheme/src/port.c
	* sigscheme/src/procedure.c
	* sigscheme/src/read.c
	* sigscheme/src/scmport-basechar.c
	* sigscheme/src/scmport-file.c
	* sigscheme/src/scmport-mbchar.c
	* sigscheme/src/scmport-null.c
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/scmport-str.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/storage-continuation.c
	* sigscheme/src/storage-gc.c
	* sigscheme/src/storage-protection.c
	* sigscheme/src/storage-symbol.c
	* sigscheme/src/storage.c
	* sigscheme/src/strcasecmp.c
	* sigscheme/src/string.c
	* sigscheme/src/syntax.c
	* sigscheme/src/vector.c
	* sigscheme/src/write.c
	  - Remove place indicators for #include
	
2006-04-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/compact.h
	* sigscheme/src/encoding-config.h
	* sigscheme/src/encoding.h
	* sigscheme/src/scmint.h
	* sigscheme/src/scmport-config.h
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport.h
	* sigscheme/src/sigscheme-combined.h
	* sigscheme/src/sigscheme.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/storage-fatty.h
	  - Shift 'extern "C" {' to post '#inclde's
	
2006-04-19 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/src/compact.h
	  - New implementation of storage-compact.h.  Committed only to share
	    workload.  Detailed log will be written when it's more or less
	    stable.
	
2006-04-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - (USE_HYGIENIC_MACRO): Enable
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Make macro.c addition clean
	
2006-04-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/dllentry.c
	  - Fix Symbian EKA2 platform support
	
2006-04-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_HAVE_WRITABLE_GLOBAL_VARS): Sense BREW
	  - (SCM_USE_AGGREGATED_GLOBAL_VARS): Support the case
	    SCM_HAVE_WRITABLE_GLOBAL_VARS is enabled and
	    SCM_USE_AGGREGATED_GLOBAL_VARS is not defined
	* sigscheme/src/sigscheme-combined.h
	  - (SCM_EXPORT_API): New macro
	* sigscheme/src/global.h
	  - (SCM_EXTERN, SCM_EXPORT):
	    * Support combined-source with exported API symbols
	    * Support Symbian, BREW and Windows
	* sigscheme/src/dllentry.c
	  - New file
	  - (E32Dll): New function
	* sigscheme/src/Makefile.am
	  - (EXTRA_DIST): Add dllentry.c
	  - (libsscm_la_CPPFLAGS): Add -DSCM_COMPILING_LIBSSCM=1
	* sigscheme/TODO
	  - Update
	
2006-04-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add experimental support for Symbian OS and BREW
	
	* sigscheme/src/config.h
	  - (SCM_USE_WARNING_SUPPRESSOR): New macro
	  - Add global.h -related handlings
	* sigscheme/src/template.h
	  - Fix inappropriate position of extern "C"
	* sigscheme/src/global.h
	  - Ditto
	  - (SCM_GLOBAL_STRUCT_WARNING_SUPPRESSOR): Use SCM_USE_WARNING_SUPPRESSOR
	  - (SCM_AGGREGATED_GLOBAL_VARS_END): Remove unneeded variable
	    definition
	  - (SCM_DECLARE_AGGREGATED_GLOBAL_VARS,
	    SCM_DEFINE_AGGREGATED_GLOBAL_VARS, SCM_AGGREGATED_GLOBAL_VARS_FIN,
	    SCM_AGGREGATED_GLOBAL_VARS_INSTANCE): Add support for Symbian and
	    BREW
	  - (SCM_AGGREGATED_GLOBAL_VARS_INIT):
	    * Ditto
	    * Fix impossible initialization method for writable global vars
	      platforms
	  - (SCM_DEFINE_STATIC_VARS, SCM_GLOBAL_VARS_INIT,
	    SCM_GLOBAL_VARS_INSTANCE, SCM_DECLARE_EXPORTED_VARS,
	    SCM_DEFINE_EXPORTED_VARS): Replace with new instance access method
	  - (SCM_DEFINE_GLOBAL_VARS_INSTANCE_ACCESSOR): New macro
	  - (SCM_EXTERN, SCM_EXPORT): Add placeholder for future revision
	  - (scm_aggregated_global_vars_init, scm_aggregated_global_vars_fin):
	    New function decl
	* sigscheme/src/global-aggregated.c
	  - New file
	  - (scm_aggregated_global_vars_init): New function for Symbian, BREW
	    and generic writable global variable platforms
	  - (scm_aggregated_global_vars_fin): New function for Symbian
	* sigscheme/src/sigscheme.c
	  - (scm_initialize, scm_finalize): Add aggregated global variable
	    handling
	* sigscheme/src/main.c
	  - Add experimental BREW support
	  - (struct g_sscm, struct _CSSCMApplet, CSSCMApplet): New type
	  - (SCM_BREW_USER_APPLET_T): New macro
	  - (sscm):
	    * New macro for BREW platform
	    * New static variable for other platforms
	  - (l_sscm_lib_path, l_feature_id_siod): Removed and replaced with
	    the 'sscm'
	  - (show_promptp, main): Replace the global variables
	* sigscheme/src/Makefile.am
	  - (lib, combined, clean-combined): New phony target
	  - (sigscheme-combined.c): Add aggregated global variable code
	    generation
	  - (EXTRA_DIST): Add global-aggregated.c
	  - (BUILT_SOURCES): Remove sigscheme-combined.c
	* sigscheme/TODO
	  - Update
	
2006-04-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_unwrap_syntaxd, scm_unwrap_syntaxx): Rename
	    scm_unwrap_syntaxd() to scm_unwrap_syntaxx()
	  - (SCM_UNWRAP_SYNTAX): Follow the renaming
	* sigscheme/src/sigschemeinternal.h
	  - (scm_p_reversed, scm_p_reversex): Rename scm_p_reversed() to
	    scm_p_reversex()
	* sigscheme/src/macro.c
	  - (scm_unwrap_syntaxd, scm_unwrap_syntaxx):
	    * Rename scm_unwrap_syntaxd() to scm_unwrap_syntaxx()
	    * Follow the renamings
	  - (scm_p_reversed, scm_p_reversex): Rename scm_p_reversed() to
	    scm_p_reversex()
	  - (scm_p_set_macro_debug_flagsd, scm_p_set_macro_debug_flagsx):
	    Rename scm_p_set_macro_debug_flagsd() to
	    scm_p_set_macro_debug_flagsx()
	  - (unwrap_listd, unwrap_listx):
	    * Rename unwrap_listd() to unwrap_listx()
	    * Follow the renamings
	  - (unwrap_vectord, unwrap_vectorx): Rename unwrap_vectord() to
	    unwrap_vectorx()
	  - (dbg_funcs, match_reppat, unwrap_dispatch): Follow the renamings
	
2006-04-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/write.c
	  - (write_obj): Change continuation representation
	
2006-04-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_EMPTY_EXPR):
	    * Move to more appropriate place
	    * Add duplicate definition guard
	* sigscheme/src/scmint.h
	  - (SCM_EMPTY_EXPR): Copied from sigscheme.h
	  - (SCM_BOOL_DEFINED, SCM_ICHAR_T_DEFINED, SCM_BYTE_T_DEFINED):
	    Removed
	  - (SCM_USE_LONG_FIXNUM, SCM_USE_INTPTR_SCMREF): Give value '1'
	* sigscheme/src/encoding-config.h
	  - (SCM_ENCODING_ASSERT, SCM_ENCODING_CDBG, SCM_ENCODING_DBG): Fill
	    with SCM_EMPTY_EXPR
	* sigscheme/src/encoding.h
	  - (SCM_MBCINFO_CLEAR_STATE, SCM_MBCINFO_SET_STATE,
	    SCM_MBS_SET_STATE, SCM_MBS_CLEAR_STATE): Ditto
	* sigscheme/src/encoding.c
	  - (EXPECT_SIZE): Ditto
	
2006-04-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/module-srfi34.c
	  - (l_syn_raw_quote): New static variable
	  - (raw_quote): New static function
	  - (scm_initialize_srfi34): Add initialization of l_syn_raw_quote
	  - (delay): Replace SYM_QUOTE with l_syn_raw_quote for the convention
	    of hygienic macros
	
2006-04-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/module-siod.c
	  - (scm_p_symbol_value): Fix SCM_NULL with SCM_INTERACTION_ENV
	
2006-04-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/env.c
	  - (scm_lookup_environment): Fix unequal rewrite of r3286
	
2006-04-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/macro.c
	  - Replace license header with standard-formatted one
	  - Cosmetic changes
	* sigscheme/src/env.c
	* sigscheme/src/syntax.c
	  - Ditto
	
2006-04-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/write.c
	  - (write_farsymbol): Fix format directive
	
	* sigscheme/src/sigschemeinternal.h
	  - (NO_MORE_ARG): Remove unneeded SCM_EMPTY_EXPR
	
	* sigscheme/src/sigscheme.h
	  - (enum ScmObjType):
	    * Renumber macro-related members
	    * Add ScmNumber, ScmProc, ScmAny for future extension
	
2006-04-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/tools/scm_decl.rb
	  - (SCM_DECL_RE): Revert r3277
	  - (scan_scm_decl):
	    * Ditto
	    * Fix inverted block args 'prototype' and 'scope' which
	      causes scan error on a decl without SCM_EXPORT
	
2006-04-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/global.h
	  - (SCM_AGGREGATED_GLOBAL_VARS): Fix excessive semicolon
	
2006-04-11 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/test/test-syntax-rules.scm
	  - add new test cases
	
	* sigscheme/src/macro.c
	  - fix some bugs and confine the debugging facility code to macro.c
	  - (INIT_DBG): new macro.
	  - (DBG_EXPANDER): new constant.
	  - (scm_p_set_macro_debug_flagsd): make static and register it as a
	    scheme function in init_dbg() rather than by DECLARE_FUNCTION().
	  - (dbg_funcs): new data.
	  - (init_dbg): register scm_p_set_macro_debug_flagsd().
	  - (DBG_PRINT): use SCM_EMPTY_EXPR.
	  - (scm_expand_macro): add debug print.
	  - (match_rec): fix conditional.
	  - (scm_unwrap_syntaxd, scm_unwrap_keyword): stricter condition for
	    debug print.
	
	* sigscheme/src/env.c
	  - (scm_identifierequalp): make it work properly.
	  
	* sigscheme/src/sigscheme.h
	  - (SCM_EMPTY_EXPR): new macro.
	  - (SCM_ASSERT, SCM_DBG, SCM_CDBG): use SCM_EMPTY_EXPR.
	  - (scm_s_match, scm_s_syntax_rules): enable by default.
	
	* sigscheme/src/syntax.c
	  - (scm_s_cond_internal): fix unwrapping.
	  - (define_internal): add far symbol handling.
	
	* sigscheme/runtest.sh
	  - add capability for selective testing.
	
2006-04-09 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/src/macro.c
	  - (debug_mode): disable debug by default
	
2006-04-09 Jun Inoue <jun.lambda@gmail.com>
	
	Forgot to svn add in last commit.
	
	* sigscheme/src/macro.c
	  - new source file
	  - (UPTO_LAST_PAIR, RECURSE_ALWAYS_APPEND, RECURSE,
	     DEFAULT_INDEX_BUF_SIZE, MISMATCH, MATCH_REC, DBG_PRINT, DEFINE,
	     DBG_PRINT, REPPATP, REPPAT_PVCOUNT, REPPAT_PAT, MAKE_REPPAT, PVARP,
	     PVAR_INDEX, MAKE_PVAR, ELLIPSISP, SYM_SYNTAX_RULES,
	     SYM_ELLIPSIS): local macros
	  - (list_find_index, unwrap_vectord, unwrap_listd, unwrap_dispatch,
	     unwrap_farsymbol, transcribe_reppat, transcribe_rec, transcribe,
	     merge_subs, match_reppat, match_rec, match, compile_rec, compile,
	     expand_hygienic_macro, init_dbg, dbg_print): local functions
	  - (scm_unwrap_syntaxd, scm_unwrap_keyword, scm_unwrap_syntaxd,
	     scm_s_match, scm_s_syntax_rules, scm_s_expand_macro,
	     scm_expand_macro, scm_init_macro, scm_p_set_macro_debug_flagsd,
	     scm_macro_bad_scope): public functions
	  - (scm_p_reversed): public function, needs to be relocated
	  - (enum dbg_flag): local type
	  - (debug_mode): local state
	
2006-04-08 Jun Inoue <jun.lambda@gmail.com>
	
	This commit adds preliminary support for R5RS hygienic macros.  Right
	now it works only with storage-fatty and some hygienicity tests fail.
	
	* sigscheme/test/unittest.scm
	  - quote ()
	
	* sigscheme/test/test-syntax-rules.scm
	  - new test
	
	* sigscheme/src/storage-fatty.h
	  - (ScmCell_.obj.hmacro, ScmCell_.obj.farsym, ScmCell_.obj.subpat):
	    new members
	  - (SCM_SAL_SUBPAT_SET_META, SCM_SAL_SUBPAT_SET_OBJ,
	     SCM_SAL_SUBPAT_META, SCM_SAL_SUBPAT_OBJ, SCM_SAL_SUBPATP,
	     SCM_SAL_ENTYPE_SUBPAT, SCM_SAL_FARSYMBOL_SET_ENV,
	     SCM_SAL_FARSYMBOL_ENV, SCM_SAL_FARSYMBOL_SET_SYM,
	     SCM_SAL_FARSYMBOL_SYM, SCM_SAL_FARSYMBOLP, SCM_SAL_ENTYPE_FARSYMBOL,
	     SCM_SAL_HMACRO_SET_ENV, SCM_SAL_HMACRO_ENV, SCM_SAL_HMACRO_SET_RULES,
	     SCM_SAL_HMACRO_RULES, SCM_SAL_HMACROP, SCM_SAL_HMACROP,
	     SCM_SAL_ENTYPE_MACRO, SCM_SAL_MACROP, SCM_SAL_MAKE_SUBPAT,
	     SCM_SAL_MAKE_FARSYMBOL, SCM_SAL_MAKE_HYGIENIC_MACRO): new macros
	  - (scm_make_hygienic_macro, scm_make_farsymbol, scm_make_subpat):
	    new prototypes
	
	* sigscheme/src/module-srfi2.c
	  - (scm_s_srfi2_and_letstar): change SYMBOLP() to IDENTIFIERP()
	
	* sigscheme/src/config.h
	  - (SCM_USE_HYGIENIC_MACRO, SCM_USE_SYNTAX_CASE,
	     SCM_USE_UNHYGIENIC_MACRO): new macros
	  - (SCM_DEBUG_MACRO): new macro
	
	* sigscheme/src/read.c
	  - remove trailing whitespaces
	  - (read_number_or_symbol): eliminate uninitialized buffer access
	
	* sigscheme/src/error.c
	  - (scm_predefined_debug_categories): enable SCM_DBG_MACRO if SCM_DEBUG_MACRO
	  - (scm_show_backtrace): use IDENTIFIERP() instead of SYMBOLP()
	
	* sigscheme/src/storage.c
	  - (scm_make_hygienic_macro, scm_make_farsymbol, scm_make_subpat):
	    new functions
	
	* sigscheme/src/list.c
	  - (list_tail): rename to scm_list_tail and make public
	  - (scm_list_tail): renamed from list_tail
	  - (scm_p_list_ref, scm_p_list_tail): follow renaming
	
	* sigscheme/src/write.c
	  - (write_farsymbol): new function (needs refinement)
	  - (write_obj): add switches for ScmMacro, ScmFarsymbol and ScmSubpat.
	
	* sigscheme/src/sigschemeinternal.h
	  - (TR_EXTRACT, TR_ENDP, TR_NEXT, TR_GET_ELM, TR_CALL, TRV_CALL,
	     TRV_EXECUTE, TRV_EXTRACT, TRV_ENDP, TRV_GET_VEC,
	     TRV_GET_INDEX, TRV_NEXT, TRV_GET_ELM, TRV_INIT, TRL_EXECUTE,
	     TRL_CALL, TRL_EXTRACT, TRL_SET_SUBLS, TRL_GET_SUBLS, TRL_ENDP,
	     TRL_NEXT, TRL_GET_ELM, TRL_INIT): move from syntax.c
	
	  - (TR_BOOL_MSG_P, ENSURE_IDENTIFIER, IDENTIFIERP, SUBPATP, TR_EXECUTE,
	     FARSYMBOLP, HMACROP, MAKE_SUBPAT, MAKE_FARSYMBOL, MAKE_HYGIENIC_MACRO,
	     SCM_ENTYPE_SUBPAT, SCM_ENTYPE_FARSYMBOL, SCM_ENTYPE_MACRO): new macros
	
	  - (FOR_EACH_WHILE): remove POP() because it covertly adds dependency
	    to DECLARE_FUNCTION(), which is a real pain sometimes.
	
	  - (enum _tr_msg, tr_msg, struct _tr_param, tr_param, struct
	     _list_translator, list_translator, struct _vector_translator,
	     vector_translator, struct _sequence_translator, sequence_translator,
	     union _translator_ret, translator_ret): move from syntax.c
	
	  - (scm_list_tail, scm_macro_bad_scope, scm_p_reversed,
	     scm_expand_macro, scm_init_macro, scm_listran, scm_vectran,
	     scm_wrap_identifier, scm_identifierequalp, scm_subenvp,
	     scm_unpack_env, scm_pack_env, scm_lookup_frame): add prototypes.
	* sigscheme/src/env.c
	  - (lookup_frame): rename to scm_lookup_frame() and make public
	  - (scm_lookup_frame): renamed from lookup_frame()
	  - (scm_wrap_identifier, scm_identifierequalp, lookup_n_frames,
	     scm_unpack_env, scm_pack_env): new functions
	  - (scm_symbol_value): move from eval.c and add support for farsymbol
	  - (scm_lookup_environment): add farsymbol handling
	  - (scm_validate_formals): replace SYMBOLP() with IDENTIFIERP()
	
	* sigscheme/src/storage-gc.c
	  - (mark_obj): add cases for ScmMacro, ScmFarsymbol, ScmSubpat.
	
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): call scm_init_macro()
	
	* sigscheme/src/sigscheme.h
	  - (ScmMacro, ScmFarsymbol, ScmSubpat): new type codes.
	  - (ScmPackedEnv): new type.
	  - (SCM_PENV_EQ): new macro.
	  - (SCM_UNWRAP_KEYWORD, SCM_UNWRAP_SYNTAX, SCM_UNWRAP_KEYWORD,
	     SCM_UNWRAP_SYNTAX, SCM_IDENTIFIERP, SCM_IDENTIFIERP,
	     SCM_SUBPAT_SET_META, SCM_SUBPAT_SET_OBJ, SCM_SUBPAT_META,
	     SCM_SUBPAT_OBJ, SCM_SUBPATP, SCM_FARSYMBOL_SET_ENV, SCM_FARSYMBOL_ENV,
	     SCM_FARSYMBOL_SET_SYM, SCM_FARSYMBOL_SYM, SCM_FARSYMBOLP,
	     SCM_HMACRO_SET_ENV, SCM_HMACRO_ENV, SCM_HMACRO_SET_RULES,
	     SCM_HMACRO_RULES, SCM_HMACROP, SCM_AS_SUBPAT, SCM_AS_FARSYMBOL,
	     SCM_AS_HMACRO, SCM_MAKE_SUBPAT, SCM_MAKE_FARSYMBOL,
	     SCM_MAKE_HYGIENIC_MACRO): new macros
	
	  - (scm_s_match, scm_s_syntax_rules, scm_p_set_macro_debug_flagsd,
	     scm_s_expand_macro, scm_unwrap_syntaxd, scm_unwrap_keyword): add
	    prototypes
	
	* sigscheme/src/syntax.c
	  - (TR_EXTRACT, TR_ENDP, TR_NEXT, TR_GET_ELM, TR_CALL, TRV_CALL,
	     TRV_EXECUTE, TRV_EXTRACT, TRV_ENDP, TRV_GET_VEC,
	     TRV_GET_INDEX, TRV_NEXT, TRV_GET_ELM, TRV_INIT, TRL_EXECUTE,
	     TRL_CALL, TRL_EXTRACT, TRL_SET_SUBLS, TRL_GET_SUBLS, TRL_ENDP,
	     TRL_NEXT, TRL_GET_ELM, TRL_INIT): move to sigschemeinternal.h
	  - (qquote_internal): use tr_param and abolish qquote_result.  Add
	    SCM_UNWRAP_SYNTAX()
	  - (listran): rename to scm_listran and change return type
	  - (vectran): rename to scm_vectran and change return type
	  - (scm_s_let, scm_s_letrec, scm_s_letstar): replace SYMBOLP() with
	    IDENTIFIERP()
	  - (scm_s_quasiquote):
	  - (scm_s_quote): add SCM_UNWRAP_SYNTAX()
	  - (scm_cond_internal): add SCM_UNWRAP_KEYWORD()
	
	* sigscheme/src/eval.c
	  - (scm_symbol_value): move to env.c.
	  - (call): replace SYMBOLP() with IDENTIFIERP().  Add macro expansion.
	  - (scm_eval): replace SYMBOLP() with IDENTIFIERP().
	
	* sigscheme/src/Makefile.am
	  - (functable-r5rs-syntax.c): add macro.c
	  - (libsscm_la_SOURCES, libsscm_la_SOURCES): add macro.c
	  - (ETAGS_ARGS): add sigschemeinternal.h because the ever-so-often
	    "No tags containing foo" message is driving me nuts.
	
	* sigscheme/tools/scm_decl.rb
	  - (SCM_DECL_RE): Fix.
	  - (scan_scm_decl): Fix.
	
2006-04-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make ChangeLog included in distribution
	
	* sigscheme/Makefile.am
	  - (UIM_REPOSITORY, SSCM_REPOSITORY): New variable
	  - (ChangeLog, FORCE): New target
	  - (.PHONY): Add FORCE
	
2006-04-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Make ruby not required here
	  - Add check for perl, asciidoc, cutter
	* sigscheme/src/Makefile.am
	  - (BUILD_FUNCTBL_CMD, sigscheme-combined-trim.h): Replace commands
	    with configured one
	  - (BUILT_DIST): New variable
	  - (EXTRA_DIST, BUILT_SOURCES): Rewrite with $BUILT_DIST
	  - Add dist-hook to check ruby and perl existence
	* sigscheme/doc/Makefile.am
	  - (TXTS, BUILT_DIST): New variable
	  - (EXTRA_DIST): Rewrite with $BUILT_DIST and $TXTS
	  - Change asciidoc backend from html4 to xhtml11
	  - Make asciidoc not required
	  - Add dist-hook to check asciidoc existence
	* sigscheme/test-c/Makefile.am
	  - Replace 'cutter' with configured one
	* sigscheme/TODO
	  - Update
	
2006-04-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi28.scm
	* sigscheme/test/test-srfi48.scm
	  - Suppress duplicated result printing on invoked from other tests
	
2006-04-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/write.c
	  - (INTERESTINGP): Add ERROBJP() for future errobj representation
	    change
	  - (write_list, write_ss_scan): Simplify
	  - (hash_lookup): Replace abort(3) with SCM_ASSERT(scm_false)
	* sigscheme/src/error.c
	  - (scm_make_error_obj): Cosmetic change
	
2006-04-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/spec.txt
	* sigscheme/doc/features.texi
	  - Update about SRFI-38
	
2006-04-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/write.c
	  - (write_ss_scan): Fix invalid error object handling which causes
	    unneeded shared index printing
	
2006-04-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/spec.txt
	  - Update and add several sections
	* sigscheme/doc/features.texi
	  - Import the changes of spec.txt
	  - Update "SRFIs" section with sigscheme/README
	
2006-04-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/doc/coreprocedures.texi
	  - add descriptions about map and for-each
	
2006-04-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/doc/coreprocedures.texi
	  - more example
	
2006-04-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/doc/Makefile.am
	  - asciidoc 7.0.0 needs to specify -b option
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_fin_module): New function decl
	* sigscheme/src/module.c
	  - (struct module_info): Add member 'finalizer'
	  - (module_info_table): Add finalizers as NULL
	  - (lookup_module_info): New static function
	  - (scm_fin_module): New function
	  - (scm_s_use): Simplify with lookup_module_info()
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	  - (show_arg): Limit format capability
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	* sigscheme/src/storage-continuation.c
	  - Cosmetic change
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/gauche-euc-jp.scm
	  - Comment out SRFI-13 tests
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Fix silent error enbuged in r3255
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (MSG_SRFI48_DIRECTIVE_HELP): Modify a message
	* sigscheme/test/test-srfi48.scm
	  - (help-str): Follow the change
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_gc_protect_stack): Removed the global variable since this
	    name is conflicted with the function-form macro on non-gcc
	    platform
	  - (scm_gc_protect_stack_fp): New variable decl with global.h
	  - (scm_gc_protect_stack): Follow the change (on the function-form
	    macro)
	* sigscheme/src/storage-gc.c
	  - (scm_gc_protect_stack): Removed
	  - Add SCM_DEFINE_EXPORTED_VARS(gc)
	  - (scm_init_gc): Follow the changes
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/global.h
	  - (SCM_AGGREGATED_GLOBAL_VARS_BEGIN, SCM_AGGREGATED_GLOBAL_VARS,
	    SCM_AGGREGATED_GLOBAL_VARS_END,
	    SCM_DECLARE_AGGREGATED_GLOBAL_VARS,
	    SCM_DEFINE_AGGREGATED_GLOBAL_VARS,
	    SCM_AGGREGATED_GLOBAL_VARS_INIT,
	    SCM_AGGREGATED_GLOBAL_VARS_INSTANCE, SCM_DEFINE_STATIC_VARS,
	    SCM_GLOBAL_VARS_BEGIN, SCM_DEFINE_EXPORTED_VARS,
	    SCM_DECLARE_EXPORTED_VARS): Change internal prefix 'scm_v_' to
	    'scm_g_'
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_OBJ_COMPACT): Removed
	  - (SCM_USE_STORAGE_FATTY, SCM_USE_STORAGE_COMPACT): New macro
	  - Follow the changes
	* sigscheme/src/sigscheme.h
	* sigscheme/src/storage.c
	* sigscheme/src/storage-gc.c
	  - Replace SCM_OBJ_COMPACT with the new two macros
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit ensure all global variables zero-cleared on
	  re-initialization (i.e. scm_initialize() after scm_finalize())
	
	* sigscheme/src/encoding.c
	  - (scm_encoding_init): Add SCM_GLOBAL_VARS_INIT()
	* sigscheme/src/scmport-sbchar.c
	  - (scm_sbcport_init): Ditto
	* sigscheme/src/scmport-mbchar.c
	  - (scm_mbcport_init): Ditto
	* sigscheme/src/sigschemeinternal.h
	  - (scm_init_load): New function decl
	* sigscheme/src/load.c
	  - (scm_init_load): New function
	* sigscheme/src/storage.c
	  - (scm_init_storage): Ditto
	* sigscheme/src/storage-gc.c
	  - (scm_init_gc): Ditto
	* sigscheme/src/storage-symbol.c
	  - (scm_init_symbol): Ditto
	* sigscheme/src/storage-continuation.c
	  - (scm_init_continuation): Ditto
	* sigscheme/src/error.c
	  - (scm_init_error): Ditto
	* sigscheme/src/syntax.c
	  - (scm_init_syntax): Ditto
	* sigscheme/src/port.c
	  - (scm_init_port): Ditto
	* sigscheme/src/write.c
	  - (scm_init_writer): Ditto
	* sigscheme/src/module.c
	  - (scm_init_module): Ditto
	* sigscheme/src/module-siod.c
	  - (scm_initialize_siod): Ditto
	* sigscheme/src/module-srfi34.c
	  - (scm_initialize_srfi34): Ditto
	* sigscheme/src/main.c
	  - (main): Ditto
	* sigscheme/src/format.c
	  - (l_format_initialized): Removed
	  - (scm_init_format):
	    * Add SCM_GLOBAL_VARS_INIT()
	    * Remove l_format_initialized guard because it does not work on
	      re-initialization
	* sigscheme/src/module-srfi28.c
	* sigscheme/src/module-srfi48.c
	  - (scm_initialize_srfi48): Add a FIXME comment
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal):
	    * Ditto
	    * Add SCM_GLOBAL_VARS_INIT()
	    * Add scm_init_load()
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/global.h
	  - (SCM_GLOBAL_VARS_INSTANCE): New macro
	  - (SCM_GLOBAL_VAR): Make configuration-independent with
	    SCM_GLOBAL_VARS_INSTANCE()
	* sigscheme/src/module-srfi34.c
	  - (N_GLOBAL_SCMOBJ): New macro
	  - (srfi34_global_var_list): Removed
	  - (scm_initialize_srfi34): Change gc_protect process for the static
	    variables
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - Echo that the file is generating on the rules sigscheme-combined.c
	    and sigscheme-combined-trim.h
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-gc.c
	  - (n_heaps, heaps, heaps_lowest, heaps_highest, freelist,
	    save_regs_buf, stack_start_pointer, protected_vars,
	    protected_vars_size, n_empty_protected_vars): Rename to l_* to
	    avoid conflict
	  - Follow the renamings on all functions
	* sigscheme/src/error.c
	  - (debug_mask, srfi34_is_provided, fatal_error_looped,
	    cb_fatal_error, str_srfi34): Ditto
	* sigscheme/src/module-siod.c
	  - (sscm_verbose_level, null_port, saved_output_port,
	    saved_error_port): Ditto
	* sigscheme/src/storage-continuation.c
	  - (current_dynamic_extent, continuation_stack): Ditto
	* sigscheme/src/scmport-sbchar.c
	  - (sbc_codec, ScmSingleByteCharPort_vtbl): Ditto
	* sigscheme/src/scmport-mbchar.c
	  - (ScmMultiByteCharPort_vtbl): Ditto
	* sigscheme/src/storage.c
	  - (null_cell, true_cell, false_cell, eof_cell, unbound_cell,
	    undef_cell): Ditto
	* sigscheme/src/syntax.c
	  - (sym_else, sym_yields, sym_define, sym_begin, syn_lambda): Ditto
	* sigscheme/src/module.c
	  - (features): Ditto
	* sigscheme/src/load.c
	  - (scm_lib_path): Ditto
	* sigscheme/src/write.c
	  - (write_ss_ctx): Ditto
	* sigscheme/src/format.c
	  - (format_initialized, sym_pretty_print): Ditto
	* sigscheme/src/module-srfi34.c
	  - (current_exception_handlers, errmsg_unhandled_exception,
	    errmsg_handler_returned, errmsg_fallback_exhausted, sym_error,
	    sym_raise, sym_lex_env, sym_cond_catch, sym_body, sym_condition,
	    sym_guard_k, sym_handler_k, syn_apply, proc_values,
	    syn_set_cur_handlers, proc_fallback_handler,
	    proc_with_exception_handlers, syn_guard_internal,
	    syn_guard_handler, syn_guard_handler_body, syn_guard_body): Ditto
	* sigscheme/src/sigscheme.c
	  - (scm_initialized, scm_return_value_cache): Ditto
	* sigscheme/src/main.c
	  - (sscm_lib_path, feature_id_siod): Ditto
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage.c
	* sigscheme/src/storage-gc.c
	* sigscheme/src/storage-continuation.c
	* sigscheme/src/module-srfi6.c
	  - Exclude unneeded string.h
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make all static variables global.h-managed definition
	
	* sigscheme/src/storage-gc.c
	  - (heap_size, heap_alloc_threshold, n_heaps_max): Rename to l_* to
	    avoid conflict
	  - (l_heap_size, l_heap_alloc_threshold, n_heaps, l_n_heaps_max,
	    heaps, heaps_lowest, heaps_highest, freelist, save_regs_buf,
	    stack_start_pointer, protected_vars, protected_vars_size,
	    n_empty_protected_vars): Rewrit with global.h
	  - (initialize_heap, add_heap, finalize_heap, gc_mark_and_sweep,
	    within_heapp, gc_sweep): Follow the renamings
	* sigscheme/src/error.c
	  - (err_obj_tag): Rename to l_err_obj_tag to avoid conflict
	  - (debug_mask, srfi34_is_provided, fatal_error_looped,
	    cb_fatal_error, str_srfi34, l_err_obj_tag): Rewrite with global.h
	  - (scm_init_error, scm_p_error_objectp, scm_make_error_obj): Follow
	    the renaming
	* sigscheme/src/module-siod.c
	  - (sscm_verbose_level, null_port, saved_output_port,
	    saved_error_port): Rewrite with global.h
	  - (scm_p_closure_code): Eliminate local var sym_begin to avoid
	    conflict
	
	* sigscheme/src/storage-continuation.c
	  - (trace_stack): Rename to l_trace_stack to avoid conflict
	  - (current_dynamic_extent, continuation_stack, l_trace_stack):
	  - (scm_init_continuation, scm_call_with_current_continuation,
	    scm_push_trace_frame, scm_pop_trace_frame, scm_trace_stack):
	    Follow the renaming
	* sigscheme/src/scmport-sbchar.c
	  - (sbc_codec, ScmSingleByteCharPort_vtbl): Rewrite with global.h
	* sigscheme/src/scmport-mbchar.c
	  - (ScmMultiByteCharPort_vtbl): Ditto
	* sigscheme/src/storage.c
	  - (null_cell, true_cell, false_cell, eof_cell, unbound_cell,
	    undef_cell): Ditto
	* sigscheme/src/syntax.c
	  - (sym_else, sym_yields, sym_define, sym_begin, syn_lambda): Ditto
	* sigscheme/src/module.c
	  - (features): Ditto
	* sigscheme/src/load.c
	  - (scm_lib_path): Ditto
	* sigscheme/src/write.c
	  - (write_ss_ctx): Ditto
	* sigscheme/src/format.c
	  - (format_initialized, sym_pretty_print): Ditto
	* sigscheme/src/module-srfi34.c
	  - (current_exception_handlers, errmsg_unhandled_exception,
	    errmsg_handler_returned, errmsg_fallback_exhausted, sym_error,
	    sym_raise, sym_lex_env, sym_cond_catch, sym_body, sym_condition,
	    sym_guard_k, sym_handler_k, syn_apply, proc_values,
	    syn_set_cur_handlers, proc_fallback_handler,
	    proc_with_exception_handlers, syn_guard_internal,
	    syn_guard_handler, syn_guard_handler_body, syn_guard_body): Ditto
	* sigscheme/src/sigscheme.c
	  - (scm_initialized, scm_return_value_cache): Ditto
	* sigscheme/src/main.c
	  - (sscm_lib_path, feature_id_siod): Ditto
	
	* sigscheme/src/sigscheme.h
	  - (scm_gc_protect_stack): Modify the comment
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/Makefile.am
	  - (EXTRA_DIST): Add TODO
	
2006-04-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/design.txt
	* sigscheme/doc/spec.txt
	  - Convert into AsciiDoc as experimental solution. No actual
	    description is changed
	* sigscheme/doc/Makefile.am
	  - Add html generation rules for the AsciiDoc documents
	  - Add .PHONY specification
	  - (ASCIIDOC_HTMLS):
	    * New variable
	    * Add design.html and spec.html
	  - (EXTRA_DIST): Add $(ASCIIDOC_HTMLS)
	
2006-04-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/features.texi
	  - Add a comment about spec.txt
	  - Resurrect original texts from spec.txt
	  - Add lacking "SRFI conformance" section recently added to spec.txt
	* sigscheme/doc/spec.txt
	  - Add a NOTE about update
	
	* sigscheme/doc/introduction.texi
	  - Add a comment about design.txt
	  - Resurrect original texts from design.txt
	* sigscheme/doc/design.txt
	
2006-04-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-04-04 kzk <mover@hct.zaq.ne.jp>
	
	* Commit SigScheme User's manual
	
	* doc/TODO
	* doc/sscm-doc.texi
	* doc/indexfn.texi
	* doc/features.texi
	* doc/coresyntax.texi
	* doc/introduction.texi
	* doc/references.texi
	* doc/coreprocedures.texi
	  - new file
	
	* doc/Makefile.am
	  - new target "html" and "pdf"
	
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make all rest C functions global.h-managed
	  definition. All function and variable symbols have been turned into
	  local on SCM_COMBINED_SOURCE and we retrieved clean libuim with
	  SigScheme
	
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-null.c
	  - (scm_nullport_init, ScmNullPort_new): Add SCM_EXPORT prefix
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-file.c
	  - (scm_fileport_init, ScmFilePort_new, ScmFilePort_new_shared,
	    ScmFilePort_open_input_file, ScmFilePort_open_output_file): Ditto
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport-str.c
	  - (scm_strport_init, ScmInputStrPort_new,
	    ScmInputStrPort_new_copying, ScmInputStrPort_new_const,
	    ScmInputStrPort_ref_opaque, ScmOutputStrPort_new,
	    ScmOutputStrPort_str, ScmOutputStrPort_c_strlen,
	    ScmOutputStrPort_ref_opaque): Ditto
	* sigscheme/src/scmport.h
	* sigscheme/src/scmport-basechar.c
	  - (ScmBaseCharPort_construct, ScmBaseCharPort_inspect,
	    ScmBaseCharPort_line_number): Ditto
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-sbchar.c
	  - (scm_sbcport_init, ScmSingleByteCharPort_construct,
	    ScmSingleByteCharPort_new): Ditto
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/scmport-mbchar.c
	  - (scm_mbcport_init, ScmMultiByteCharPort_construct,
	    ScmMultiByteCharPort_new, ScmMultiByteCharPort_set_codec): Ditto
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make rest C functions other than scmport-related ones
	  global.h-managed definition. The symbols are turned into local on
	  SCM_COMBINED_SOURCE
	
	* sigscheme/src/encoding.h
	* sigscheme/src/encoding.c
	  - (scm_encoding_init, scm_mb_strlen, scm_mb_bare_c_strlen,
	    scm_mb_substring, scm_mb_find_codec, scm_charcodec_read_char): Add
	    SCM_EXPORT prefix
	* sigscheme/src/sigschemeinternal.h
	  - (scm_error_with_implicit_func, scm_lbuf_init, scm_lbuf_free,
	    scm_lbuf_alloc, scm_lbuf_realloc, scm_lbuf_extend,
	    scm_lbuf_f_linear, scm_lbuf_f_exponential): Ditto
	* sigscheme/src/port.c
	  - (scm_special_char_table): Ditto
	* sigscheme/src/error.c
	  - (scm_error_with_implicit_func): Ditto
	* sigscheme/src/alloc.c
	  - (scm_lbuf_init, scm_lbuf_free, scm_lbuf_alloc, scm_lbuf_realloc,
	    scm_lbuf_extend, scm_lbuf_f_linear, scm_lbuf_f_exponential): Ditto
	* sigscheme/src/storage-fatty.h
	  - (scm_make_cons, scm_make_immutable_cons, scm_make_int,
	    scm_make_symbol, scm_make_char, scm_make_immutable_string,
	    scm_make_immutable_string_copying, scm_make_string,
	    scm_make_string_copying, scm_make_func, scm_make_closure,
	    scm_make_vector, scm_make_immutable_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer): Ditto
	* sigscheme/src/storage-compact.h
	* sigscheme/src/storage.c
	  - (scm_make_cons, scm_make_immutable_cons, scm_make_int,
	    scm_make_symbol, scm_make_char, scm_make_immutable_string,
	    scm_make_immutable_string_copying, scm_make_string,
	    scm_make_string_copying, scm_make_func, scm_make_closure,
	    scm_make_vector, scm_make_immutable_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer, scm_type): Ditto
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/encoding.c
	  - (eucjp_ccs, eucjp_char_len, euc_char_len, euccn_ccs, euckr_ccs,
	    utf8_ccs, utf8_char_len, sjis_ccs, sjis_char_len, unibyte_ccs,
	    unibyte_char_len): Add lacking static specifier
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make all C functions listed in sigscheme{,internal}.h
	  global.h-managed definition (functions in other files are still
	  remained). The symbols are turned into local on SCM_COMBINED_SOURCE
	
	* sigscheme/src/sigscheme.h
	  -(scm_initialize, scm_finalize, scm_eval_c_string, scm_return_value,
	    scm_provide, scm_providedp, scm_use, scm_register_func,
	    scm_register_funcs, scm_define_alias, scm_malloc_aligned,
	    scm_malloc, scm_calloc, scm_realloc, scm_strdup, scm_gc_protect,
	    scm_gc_protect_with_init, scm_gc_unprotect,
	    scm_gc_protect_stack_internal, scm_gc_protect_stack,
	    scm_gc_unprotect_stack, scm_intern, scm_symbol_bound_to,
	    scm_debug_categories, scm_set_debug_categories,
	    scm_predefined_debug_categories, scm_categorized_debug, scm_debug,
	    scm_die, scm_plain_error, scm_error, scm_error_obj,
	    scm_show_backtrace, scm_make_error_obj, scm_raise_error,
	    scm_fatal_error, scm_set_fatal_error_callback, scm_call,
	    scm_int2string, scm_make_shared_file_port, scm_port_close,
	    scm_port_codec, scm_port_inspect, scm_port_get_char,
	    scm_port_peek_char, scm_port_char_readyp, scm_port_puts,
	    scm_port_put_char, scm_port_newline, scm_port_flush, scm_read,
	    scm_read_char, scm_write, scm_display, scm_write_ss,
	    scm_set_lib_path, scm_load, scm_pretty_print, scm_lformat,
	    scm_vformat, scm_format, scm_initialize_sscm_extensions,
	    scm_require, scm_initialize_siod, scm_get_verbose_level,
	    scm_set_verbose_level, scm_initialize_srfi1, scm_initialize_srfi2,
	    scm_initialize_srfi6, scm_initialize_srfi8, scm_initialize_srfi23,
	    scm_initialize_srfi28, scm_initialize_srfi34,
	    scm_initialize_srfi38, scm_initialize_srfi48,
	    scm_initialize_srfi60): Add SCM_EXPORT prefix
	* sigscheme/src/sigscheme.c
	  - (scm_initialize, scm_finalize, scm_eval_c_string,
	    scm_return_value): Ditto
	  - (scm_interpret_argv, scm_free_argv): Ditto
	* sigscheme/src/module.c
	  - (scm_provide, scm_providedp, scm_use, scm_register_func,
	    scm_register_funcs, scm_define_alias): Ditto
	  - (scm_init_module): Ditto
	* sigscheme/src/alloc.c
	  - (scm_malloc_aligned, scm_malloc, scm_calloc, scm_realloc,
	    scm_strdup): Ditto
	* sigscheme/src/storage-gc.c
	  - (scm_gc_protect, scm_gc_protect_with_init, scm_gc_unprotect,
	    scm_gc_protect_stack_internal, scm_gc_protect_stack,
	    scm_gc_unprotect_stack): Ditto
	  - (scm_init_gc, scm_finalize_gc, scm_alloc_cell): Ditto
	* sigscheme/src/storage-symbol.c
	  - (scm_intern, scm_symbol_bound_to): Ditto
	  - (scm_init_symbol, scm_finalize_symbol): Ditto
	* sigscheme/src/error.c
	  - (scm_debug_categories, scm_set_debug_categories,
	    scm_predefined_debug_categories, scm_categorized_debug, scm_debug,
	    scm_die, scm_plain_error, scm_error, scm_error_obj,
	    scm_show_backtrace, scm_make_error_obj, scm_raise_error,
	    scm_fatal_error, scm_set_fatal_error_callback): Ditto
	  - (scm_init_error): Ditto
	* sigscheme/src/eval.c
	  - (scm_call): Ditto
	  - (scm_symbol_value, scm_tailcall, scm_eval): Ditto
	* sigscheme/src/number.c
	  - (scm_int2string): Ditto
	  - (scm_string2number): Ditto
	* sigscheme/src/port.c
	  - (scm_make_shared_file_port, scm_port_close, scm_port_codec,
	    scm_port_inspect, scm_port_get_char, scm_port_peek_char,
	    scm_port_char_readyp, scm_port_puts, scm_port_put_char,
	    scm_port_newline, scm_port_flush): Ditto
	  - (scm_init_port, scm_prepare_port, scm_make_char_port): Ditto
	* sigscheme/src/read.c
	  - (scm_read, scm_read_char): Ditto
	* sigscheme/src/write.c
	  - (scm_write, scm_display, scm_write_ss): Ditto
	  - (scm_init_writer, scm_display_errobj_ss): Ditto
	* sigscheme/src/load.c
	  - (scm_set_lib_path, scm_load): Ditto
	* sigscheme/src/format.c
	  - (scm_pretty_print, scm_lformat, scm_vformat, scm_format): Ditto
	  - (scm_init_format): Ditto
	* sigscheme/src/module-sscm-ext.c
	  - (scm_initialize_sscm_extensions, scm_require): Ditto
	* sigscheme/src/module-siod.c
	  - (scm_initialize_siod, scm_get_verbose_level,
	    scm_set_verbose_level): Ditto
	* sigscheme/src/module-srfi1.c
	  - (scm_initialize_srfi1): Ditto
	* sigscheme/src/module-srfi2.c
	  - (scm_initialize_srfi2): Ditto
	* sigscheme/src/module-srfi6.c
	  - (scm_initialize_srfi6): Ditto
	* sigscheme/src/module-srfi8.c
	  - (scm_initialize_srfi8): Ditto
	* sigscheme/src/module-srfi23.c
	  - (scm_initialize_srfi23): Ditto
	* sigscheme/src/module-srfi28.c
	  - (scm_initialize_srfi28): Ditto
	* sigscheme/src/module-srfi34.c
	  - (scm_initialize_srfi34): Ditto
	* sigscheme/src/module-srfi38.c
	  - (scm_initialize_srfi38): Ditto
	* sigscheme/src/module-srfi48.c
	  - (scm_initialize_srfi48): Ditto
	* sigscheme/src/module-srfi60.c
	  - (scm_initialize_srfi60): Ditto
	* sigscheme/src/sigschemeinternal.h
	  -(scm_strcasecmp, scm_init_storage, scm_finalize_storage,
	    scm_init_gc, scm_finalize_gc, scm_alloc_cell,
	    scm_init_continuation, scm_finalize_continuation,
	    scm_destruct_continuation, scm_call_with_current_continuation,
	    scm_call_continuation, scm_dynamic_wind, scm_push_trace_frame,
	    scm_pop_trace_frame, scm_trace_stack, scm_init_symbol,
	    scm_finalize_symbol, scm_toplevel_environmentp,
	    scm_extend_environment, scm_replace_environment,
	    scm_update_environment, scm_add_environment,
	    scm_lookup_environment, scm_valid_environmentp,
	    scm_valid_environment_extensionp,
	    scm_valid_environment_extension_lengthp, scm_validate_formals,
	    scm_validate_actuals, scm_symbol_value, scm_tailcall, scm_eval,
	    scm_init_syntax, scm_init_error, scm_finite_length, scm_length,
	    scm_string2number, scm_init_port, scm_prepare_port,
	    scm_make_char_port, scm_init_writer, scm_display_errobj_ss,
	    scm_init_format, scm_init_module, scm_interpret_argv,
	    scm_free_argv): Ditto
	* sigscheme/src/strcasecmp.c
	  - (scm_strcasecmp): Ditto
	* sigscheme/src/storage.c
	  - (scm_init_storage,
	    scm_finalize_storage): Ditto
	* sigscheme/src/storage-continuation.c
	  - (scm_init_continuation, scm_finalize_continuation,
	    scm_destruct_continuation, scm_call_with_current_continuation,
	    scm_call_continuation, scm_dynamic_wind, scm_push_trace_frame,
	    scm_pop_trace_frame, scm_trace_stack): Ditto
	* sigscheme/src/env.c
	  - (scm_toplevel_environmentp, scm_extend_environment,
	    scm_replace_environment, scm_update_environment,
	    scm_add_environment, scm_lookup_environment,
	    scm_valid_environmentp, scm_valid_environment_extensionp,
	    scm_valid_environment_extension_lengthp, scm_validate_formals,
	    scm_validate_actuals): Ditto
	* sigscheme/src/syntax.c
	  - (scm_init_syntax): Ditto
	* sigscheme/src/list.c
	  - (scm_finite_length, scm_length): Ditto
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make all procedures and syntaxes global.h-managed
	  definition. The symbols are turned into local on SCM_COMBINED_SOURCE
	
	* sigscheme/tools/scm_decl.rb
	  - (SCM_DECL_RE, String#scan_scm_decl): Support SCM_EXPORT specifier
	* sigscheme/src/sigscheme.h
	  - (scm_s_use, scm_p_error_objectp, scm_p_fatal_error,
	    scm_p_inspect_error, scm_p_backtrace, scm_p_eval, scm_p_apply,
	    scm_p_scheme_report_environment, scm_p_null_environment,
	    scm_p_interaction_environment, scm_s_quote, scm_s_lambda,
	    scm_s_if, scm_s_setx, scm_s_cond, scm_s_case, scm_s_and, scm_s_or,
	    scm_s_let, scm_s_letstar, scm_s_letrec, scm_s_begin, scm_s_do,
	    scm_s_delay, scm_s_quasiquote, scm_s_unquote,
	    scm_s_unquote_splicing, scm_s_define, scm_p_eqp, scm_p_eqvp,
	    scm_p_equalp, scm_p_not, scm_p_booleanp, scm_p_symbolp,
	    scm_p_symbol2string, scm_p_string2symbol, scm_p_procedurep,
	    scm_p_map, scm_p_for_each, scm_p_force,
	    scm_p_call_with_current_continuation, scm_p_values,
	    scm_p_call_with_values, scm_p_dynamic_wind, scm_p_car, scm_p_cdr,
	    scm_p_pairp, scm_p_cons, scm_p_set_carx, scm_p_set_cdrx,
	    scm_p_caar, scm_p_cadr, scm_p_cdar, scm_p_cddr, scm_p_caddr,
	    scm_p_cdddr, scm_p_list, scm_p_nullp, scm_p_listp, scm_p_length,
	    scm_p_append, scm_p_reverse, scm_p_list_tail, scm_p_list_ref,
	    scm_p_memq, scm_p_memv, scm_p_member, scm_p_assq, scm_p_assv,
	    scm_p_assoc, scm_p_add, scm_p_subtract, scm_p_multiply,
	    scm_p_divide, scm_p_equal, scm_p_less, scm_p_less_equal,
	    scm_p_greater, scm_p_greater_equal, scm_p_numberp, scm_p_integerp,
	    scm_p_zerop, scm_p_positivep, scm_p_negativep, scm_p_oddp,
	    scm_p_evenp, scm_p_max, scm_p_min, scm_p_abs, scm_p_quotient,
	    scm_p_modulo, scm_p_remainder, scm_p_number2string ,
	    scm_p_string2number, scm_p_charp, scm_p_char_equalp,
	    scm_p_char_lessp, scm_p_char_greaterp, scm_p_char_less_equalp,
	    scm_p_char_greater_equalp, scm_p_char_ci_equalp,
	    scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase, scm_p_stringp,
	    scm_p_make_string, scm_p_string, scm_p_string_length,
	    scm_p_string_ref, scm_p_string_setx, scm_p_stringequalp,
	    scm_p_string_ci_equalp, scm_p_string_greaterp, scm_p_string_lessp,
	    scm_p_string_greater_equalp, scm_p_string_less_equalp,
	    scm_p_string_ci_greaterp, scm_p_string_ci_lessp,
	    scm_p_string_ci_greater_equalp, scm_p_string_ci_less_equalp,
	    scm_p_substring, scm_p_string_append, scm_p_string2list,
	    scm_p_list2string, scm_p_string_copy, scm_p_string_fillx,
	    scm_p_vectorp, scm_p_make_vector, scm_p_vector,
	    scm_p_vector_length, scm_p_vector_ref, scm_p_vector_setx,
	    scm_p_vector2list, scm_p_list2vector, scm_p_vector_fillx,
	    scm_p_caaar, scm_p_caadr, scm_p_cadar, scm_p_cdaar, scm_p_cdadr,
	    scm_p_cddar, scm_p_caaaar, scm_p_caaadr, scm_p_caadar,
	    scm_p_caaddr, scm_p_cadaar, scm_p_cadadr, scm_p_caddar,
	    scm_p_cadddr, scm_p_cdaaar, scm_p_cdaadr, scm_p_cdadar,
	    scm_p_cdaddr, scm_p_cddaar, scm_p_cddadr, scm_p_cdddar,
	    scm_p_cddddr, scm_p_call_with_input_file,
	    scm_p_call_with_output_file, scm_p_input_portp,
	    scm_p_output_portp, scm_p_current_input_port,
	    scm_p_current_output_port, scm_p_with_input_from_file,
	    scm_p_with_output_to_file, scm_p_open_input_file,
	    scm_p_open_output_file, scm_p_close_input_port,
	    scm_p_close_output_port, scm_p_read_char, scm_p_peek_char,
	    scm_p_eof_objectp, scm_p_char_readyp, scm_p_newline,
	    scm_p_write_char, scm_p_read, scm_p_write, scm_p_display,
	    scm_p_load, scm_p_symbol_boundp, scm_p_least_fixnum,
	    scm_p_greatest_fixnum, scm_p_load_path, scm_p_require,
	    scm_p_provide, scm_p_providedp, scm_p_lengthstar,
	    scm_p_symbol_value, scm_p_set_symbol_valuex, scm_p_siod_equal,
	    scm_p_the_environment, scm_p_closure_code, scm_p_verbose,
	    scm_p_eof_val, scm_s_undefine, scm_p_srfi1_xcons,
	    scm_p_srfi1_consstar, scm_p_srfi1_make_list,
	    scm_p_srfi1_list_tabulate, scm_p_srfi1_list_copy,
	    scm_p_srfi1_circular_list, scm_p_srfi1_iota,
	    scm_p_srfi1_proper_listp, scm_p_srfi1_circular_listp,
	    scm_p_srfi1_dotted_listp, scm_p_srfi1_not_pairp,
	    scm_p_srfi1_null_listp, scm_p_srfi1_listequal, scm_p_srfi1_first,
	    scm_p_srfi1_second, scm_p_srfi1_third, scm_p_srfi1_fourth,
	    scm_p_srfi1_fifth, scm_p_srfi1_sixth, scm_p_srfi1_seventh,
	    scm_p_srfi1_eighth, scm_p_srfi1_ninth, scm_p_srfi1_tenth,
	    scm_p_srfi1_carpluscdr, scm_p_srfi1_take, scm_p_srfi1_drop,
	    scm_p_srfi1_take_right, scm_p_srfi1_drop_right, scm_p_srfi1_takex,
	    scm_p_srfi1_drop_rightx, scm_p_srfi1_split_at,
	    scm_p_srfi1_split_atx, scm_p_srfi1_last, scm_p_srfi1_last_pair,
	    scm_p_srfi1_lengthplus, scm_p_srfi1_concatenate,
	    scm_s_srfi2_and_letstar, scm_p_srfi6_open_input_string,
	    scm_p_srfi6_open_output_string, scm_p_srfi6_get_output_string,
	    scm_s_srfi8_receive, scm_p_srfi23_error, scm_p_srfi28_format,
	    scm_p_srfi34_with_exception_handler, scm_s_srfi34_guard,
	    scm_p_srfi34_raise, scm_p_srfi38_write_with_shared_structure,
	    scm_p_srfi48_format, scm_p_formatplus, scm_p_srfi60_logand,
	    scm_p_srfi60_logior, scm_p_srfi60_logxor, scm_p_srfi60_lognot,
	    scm_p_srfi60_bitwise_if, scm_p_srfi60_logtest): Add SCM_EXPORT
	    prefix
	* sigscheme/src/sigschemeinternal.h
	  -(scm_s_body, scm_s_cond_internal): Ditto
	* sigscheme/src/module.c
	  - (scm_s_use, scm_p_error_objectp, scm_p_fatal_error,
	    scm_p_inspect_error, scm_p_backtrace): Ditto
	* sigscheme/src/eval.c
	  - (scm_p_eval, scm_p_apply, scm_p_scheme_report_environment,
	    scm_p_null_environment, scm_p_interaction_environment): Ditto
	* sigscheme/src/syntax.c
	  - (scm_s_quote, scm_s_lambda, scm_s_if, scm_s_setx, scm_s_cond,
	    scm_s_case, scm_s_and, scm_s_or, scm_s_let, scm_s_letstar,
	    scm_s_letrec, scm_s_begin, scm_s_do, scm_s_delay,
	    scm_s_quasiquote, scm_s_unquote, scm_s_unquote_splicing,
	    scm_s_define): Ditto
	  -(scm_s_body, scm_s_cond_internal): Ditto
	* sigscheme/src/procedure.c
	  - (scm_p_eqp, scm_p_eqvp, scm_p_equalp, scm_p_not, scm_p_booleanp,
	    scm_p_symbolp, scm_p_symbol2string, scm_p_string2symbol,
	    scm_p_procedurep, scm_p_map, scm_p_for_each, scm_p_force,
	    scm_p_call_with_current_continuation, scm_p_values,
	    scm_p_call_with_values, scm_p_dynamic_wind): Ditto
	* sigscheme/src/list.c
	  - (scm_p_car, scm_p_cdr, scm_p_pairp, scm_p_cons, scm_p_set_carx,
	    scm_p_set_cdrx, scm_p_caar, scm_p_cadr, scm_p_cdar, scm_p_cddr,
	    scm_p_caddr, scm_p_cdddr, scm_p_list, scm_p_nullp, scm_p_listp,
	    scm_p_length, scm_p_append, scm_p_reverse, scm_p_list_tail,
	    scm_p_list_ref, scm_p_memq, scm_p_memv, scm_p_member, scm_p_assq,
	    scm_p_assv, scm_p_assoc): Ditto
	* sigscheme/src/number.c
	  - (scm_p_add, scm_p_subtract, scm_p_multiply, scm_p_divide,
	    scm_p_equal, scm_p_less, scm_p_less_equal, scm_p_greater,
	    scm_p_greater_equal, scm_p_numberp, scm_p_integerp, scm_p_zerop,
	    scm_p_positivep, scm_p_negativep, scm_p_oddp, scm_p_evenp,
	    scm_p_max, scm_p_min, scm_p_abs, scm_p_quotient, scm_p_modulo,
	    scm_p_remainder, scm_p_number2string , scm_p_string2number): Ditto
	* sigscheme/src/char.c
	  - (scm_p_charp, scm_p_char_equalp, scm_p_char_lessp,
	    scm_p_char_greaterp, scm_p_char_less_equalp,
	    scm_p_char_greater_equalp, scm_p_char_ci_equalp,
	    scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase): Ditto
	* sigscheme/src/string.c
	  - (scm_p_stringp, scm_p_make_string, scm_p_string,
	    scm_p_string_length, scm_p_string_ref, scm_p_string_setx,
	    scm_p_stringequalp, scm_p_string_ci_equalp, scm_p_string_greaterp,
	    scm_p_string_lessp, scm_p_string_greater_equalp,
	    scm_p_string_less_equalp, scm_p_string_ci_greaterp,
	    scm_p_string_ci_lessp, scm_p_string_ci_greater_equalp,
	    scm_p_string_ci_less_equalp, scm_p_substring, scm_p_string_append,
	    scm_p_string2list, scm_p_list2string, scm_p_string_copy,
	    scm_p_string_fillx): Ditto
	* sigscheme/src/vector.c
	  - (scm_p_vectorp, scm_p_make_vector, scm_p_vector,
	    scm_p_vector_length, scm_p_vector_ref, scm_p_vector_setx,
	    scm_p_vector2list, scm_p_list2vector, scm_p_vector_fillx): Ditto
	* sigscheme/src/deep-cadrs.c
	  - (scm_p_caaar, scm_p_caadr, scm_p_cadar, scm_p_cdaar, scm_p_cdadr,
	    scm_p_cddar, scm_p_caaaar, scm_p_caaadr, scm_p_caadar,
	    scm_p_caaddr, scm_p_cadaar, scm_p_cadadr, scm_p_caddar,
	    scm_p_cadddr, scm_p_cdaaar, scm_p_cdaadr, scm_p_cdadar,
	    scm_p_cdaddr, scm_p_cddaar, scm_p_cddadr, scm_p_cdddar,
	    scm_p_cddddr, scm_p_call_with_input_file,
	    scm_p_call_with_output_file, scm_p_input_portp,
	    scm_p_output_portp, scm_p_current_input_port,
	    scm_p_current_output_port, scm_p_with_input_from_file,
	    scm_p_with_output_to_file, scm_p_open_input_file,
	    scm_p_open_output_file, scm_p_close_input_port,
	    scm_p_close_output_port, scm_p_read_char, scm_p_peek_char,
	    scm_p_eof_objectp, scm_p_char_readyp, scm_p_newline,
	    scm_p_write_char): Ditto
	* sigscheme/src/read.c
	  - (scm_p_read, scm_p_write, scm_p_display): Ditto
	* sigscheme/src/load.c
	  - (scm_p_load): Ditto
	* sigscheme/src/module-sscm-ext.c
	  - (scm_p_symbol_boundp, scm_p_least_fixnum, scm_p_greatest_fixnum,
	    scm_p_load_path, scm_p_require, scm_p_provide, scm_p_providedp,
	    scm_p_lengthstar): Ditto
	* sigscheme/src/module-siod.c
	  - (scm_p_symbol_value, scm_p_set_symbol_valuex, scm_p_siod_equal,
	    scm_p_the_environment, scm_p_closure_code, scm_p_verbose,
	    scm_p_eof_val, scm_s_undefine): Ditto
	* sigscheme/src/module-srfi1.c
	  - (scm_p_srfi1_xcons, scm_p_srfi1_consstar, scm_p_srfi1_make_list,
	    scm_p_srfi1_list_tabulate, scm_p_srfi1_list_copy,
	    scm_p_srfi1_circular_list, scm_p_srfi1_iota,
	    scm_p_srfi1_proper_listp, scm_p_srfi1_circular_listp,
	    scm_p_srfi1_dotted_listp, scm_p_srfi1_not_pairp,
	    scm_p_srfi1_null_listp, scm_p_srfi1_listequal, scm_p_srfi1_first,
	    scm_p_srfi1_second, scm_p_srfi1_third, scm_p_srfi1_fourth,
	    scm_p_srfi1_fifth, scm_p_srfi1_sixth, scm_p_srfi1_seventh,
	    scm_p_srfi1_eighth, scm_p_srfi1_ninth, scm_p_srfi1_tenth,
	    scm_p_srfi1_carpluscdr, scm_p_srfi1_take, scm_p_srfi1_drop,
	    scm_p_srfi1_take_right, scm_p_srfi1_drop_right, scm_p_srfi1_takex,
	    scm_p_srfi1_drop_rightx, scm_p_srfi1_split_at,
	    scm_p_srfi1_split_atx, scm_p_srfi1_last, scm_p_srfi1_last_pair,
	    scm_p_srfi1_lengthplus, scm_p_srfi1_concatenate): Ditto
	* sigscheme/src/module-srfi2.c
	  - (scm_s_srfi2_and_letstar): Ditto
	* sigscheme/src/module-srfi6.c
	  - (scm_p_srfi6_open_input_string, scm_p_srfi6_open_output_string,
	    scm_p_srfi6_get_output_string): Ditto
	* sigscheme/src/module-srfi8.c
	  - (scm_s_srfi8_receive): Ditto
	* sigscheme/src/module-srfi23.c
	  - (scm_p_srfi23_error): Ditto
	* sigscheme/src/module-srfi28.c
	  - (scm_p_srfi28_format): Ditto
	* sigscheme/src/module-srfi34.c
	  - (scm_p_srfi34_with_exception_handler, scm_s_srfi34_guard,
	    scm_p_srfi34_raise): Ditto
	* sigscheme/src/module-srfi38.c
	  - (scm_p_srfi38_write_with_shared_structure): Ditto
	* sigscheme/src/module-srfi48.c
	  - (scm_p_srfi48_format, scm_p_formatplus): Ditto
	* sigscheme/src/module-srfi60.c
	  - (scm_p_srfi60_logand, scm_p_srfi60_logior, scm_p_srfi60_logxor,
	    scm_p_srfi60_lognot, scm_p_srfi60_bitwise_if,
	    scm_p_srfi60_logtest): Ditto
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/global.h
	  - (SCM_NO_GLOBAL_STRUCT_WARNING_SUPPRESSOR,
	    SCM_GLOBAL_STRUCT_WARNING_SUPPRESSOR): New macro
	  - (SCM_AGGREGATED_GLOBAL_VARS_BEGIN, SCM_GLOBAL_VARS_BEGIN): Add
	    SCM_GLOBAL_STRUCT_WARNING_SUPPRESSOR
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (format_internal): Add 'FALLTHROUGH' comment
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/Makefile.am
	  - (EXTRA_DIST): Add lacking README and cutter-r20-yamaken-extension.diff
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/Makefile.am
	  - (LIBS): New variable
	  - (TEST_SRCS, libtest_strcasecmp_la_LIBADD,
	    libtest_global_la_LIBADD, libtest_format_la_LIBADD): Removed
	  - Rewrite the rule for update-suites without TEST_SRCS
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make the exported global variables global.h-managed
	  definition. The symbols are turned into local in SCM_COMBINED_SOURCE
	
	* sigscheme/src/encoding.h
	  - Include global.h
	  - (scm_current_char_codec): Rewrite with global.h
	* sigscheme/src/scmport.h
	  - Include global.h
	  - (ScmBaseCharPort_vptr): Rewrite with global.h
	* sigscheme/src/scmport-basechar.c
	  - (ScmBaseCharPort_vptr): Ditto
	* sigscheme/src/encoding.c
	  - (scm_current_char_codec): Ditto
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-null.c
	  - (ScmNullPort_vptr): Ditto
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-file.c
	  - (ScmFilePort_vptr): Ditto
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport-str.c
	  - (ScmInputStrPort_vptr, ScmOutputStrPort_vptr): Ditto
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-sbchar.c
	  - (ScmSingleByteCharPort_vptr): Ditto
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/scmport-mbchar.c
	  - (ScmMultiByteCharPort_vptr): Ditto
	* sigscheme/src/sigscheme.h
	  - Include global.h
	  - (scm_gc_protect_stack): Add a FIXME comment
	* sigscheme/src/sigschemeinternal.h
	  - Include global.h
	  - (scm_err_funcname, scm_identifier_codec, scm_in, scm_out, scm_err,
	    scm_special_char_table, scm_write_ss_func, scm_null_values,
	    scm_symbol_hash, scm_symbol_hash_size): Rewrite with global.h
	* sigscheme/src/storage-symbol.c
	  - (scm_symbol_hash, scm_symbol_hash_size): Ditto
	* sigscheme/src/error.c
	  - (scm_err_funcname): Ditto
	* sigscheme/src/procedure.c
	  - (scm_identifier_codec): Ditto
	* sigscheme/src/write.c
	  - (scm_write_ss_func): Ditto
	* sigscheme/src/port.c
	  - (scm_in, scm_out, scm_err): Ditto
	* sigscheme/src/storage-compact.h
	  - (scm_type): Remove unneeded extern specifier
	  - (scm_sym_quote, scm_sym_quasiquote, scm_sym_unquote,
	    scm_sym_unquote_splicing): Rewrite with global.h
	* sigscheme/src/storage-fatty.h
	  - (scm_const_null, scm_const_true, scm_const_false, scm_const_eof,
	    scm_const_unbound, scm_const_undef, scm_sym_quote,
	    scm_sym_quasiquote, scm_sym_unquote, scm_sym_unquote_splicing):
	    Ditto
	* sigscheme/src/storage.c
	  - (scm_null_values, scm_const_null, scm_const_true, scm_const_false,
	    scm_const_eof, scm_const_unbound, scm_const_undef): Ditto
	* sigscheme/src/syntax.c
	  - (scm_sym_quote, scm_sym_quasiquote, scm_sym_unquote,
	    scm_sym_unquote_splicing): Ditto
	* uim/uim-scm.c
	  - (scm_out, scm_err): Replace extern decl with macro with
	    SCM_GLOBAL_VAR()
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/global.h
	  - (SCM_DECLARE_EXPORTED_VARS):
	    * Fix static definition handling on SCM_COMBINED_SOURCE
	    * Fix lacking declaration on !SCM_COMBINED_SOURCE
	  - (SCM_DEFINE_EXPORTED_VARS):
	    * Fix to empty on SCM_COMBINED_SOURCE
	    * Fix miswritten static on !SCM_COMBINED_SOURCE
	  - (SCM_EXTERN): Fix empty statement error on SCM_COMBINED_SOURCE
	
2006-04-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (pkginclude_HEADERS): Add global.h
	* sigscheme/src/global.h
	  - New file
	  - (SCM_AGGREGATED_GLOBAL_VARS_BEGIN, SCM_AGGREGATED_GLOBAL_VARS,
	    SCM_AGGREGATED_GLOBAL_VARS_END,
	    SCM_DECLARE_AGGREGATED_GLOBAL_VARS,
	    SCM_DEFINE_AGGREGATED_GLOBAL_VARS,
	    SCM_AGGREGATED_GLOBAL_VARS_INIT, SCM_AGGREGATED_GLOBAL_VARS_FIN,
	    SCM_AGGREGATED_GLOBAL_VARS_INSTANCE, SCM_DEFINE_STATIC_VARS,
	    SCM_GLOBAL_VARS_INIT, SCM_GLOBAL_VAR, SCM_GLOBAL_VARS_BEGIN,
	    SCM_GLOBAL_VARS_END, SCM_DECLARE_EXPORTED_VARS,
	    SCM_DEFINE_EXPORTED_VARS, SCM_EXTERN, SCM_EXPORT): New macro
	* sigscheme/test-c/Makefile.am
	  - (TEST_SRCS): Add test_global.c
	  - (noinst_LTLIBRARIES): Add libtest_global.la
	  - (libtest_global_la_SOURCES, libtest_global_la_LIBADD): New
	    variable
	* sigscheme/test-c/test_global.c
	  - New file
	  - Add basic tests for global.h
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit prepare scope control for combined-source version of
	  SigScheme
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_symbol_hash, scm_symbol_hash_size): Moved decl from
	    storage-gc.c
	* sigscheme/src/storage-gc.c
	  - (scm_symbol_hash, scm_symbol_hash_size): Move decl to
	    sigschemeinternal.h
	* sigscheme/src/load.c
	  - (scm_lib_path): Make static
	  - (scm_p_load_path): Moved from module-sscm-ext.c
	* sigscheme/src/module-sscm-ext.c
	  - (scm_lib_path): Removed decl
	  - (scm_p_load_path): Move to load.c
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/Makefile.am
	  - (EXTRA_DIST): Remove define.scm, for-each,.scm io.scm
	* sigscheme/test/define.scm
	* sigscheme/test/for-each.scm
	* sigscheme/test/io.scm
	  - Removed
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add {doc,misc,test,bench,experimental}/Makefile
	* sigscheme/Makefile.am
	  - (SUBDIRS): Add doc, misc, test, bench, experimental
	  - (EXTRA_DIST): Add TODO, autogen.sh, compare-scm.sh, runbench.sh,
	    runtest.sh, runtest-tail-rec.sh, slib.scm
	* sigscheme/doc/Makefile.am
	* sigscheme/test/Makefile.am
	* sigscheme/bench/Makefile.am
	* sigscheme/misc/Makefile.am
	  - New file
	  - (EXTRA_DIST): New variable
	* sigscheme/experimental/Makefile.am
	  - New file
	  - (EXTRA_DIST, SUBDIRS): New variable with empty value
	* sigscheme/TODO
	  - Update
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/script/scm_decl.rb
	* sigscheme/src/script/build_func_table.rb
	* sigscheme/src/script/check_declare_func_typo.rb
	* sigscheme/src/script/check_initialize_scm_null.rb
	* sigscheme/src/script/functable-header.txt
	* sigscheme/src/script/functable-footer.txt
	  - Move to sigscheme/tools
	* sigscheme/src/Makefile.am
	  - (SCRIPT_DIR): Follow the directory move
	  - (BUILD_FUNCTBL_CMD): New variable
	  - Replace BUILD_FUNCTBL with BUILD_FUNCTBL_CMD for functable-*.c rules
	* sigscheme/tools
	  - New directory
	* sigscheme/tools/scm_decl.rb
	* sigscheme/tools/check_declare_func_typo.rb
	* sigscheme/tools/check_initialize_scm_null.rb
	* sigscheme/tools/functable-header.txt
	* sigscheme/tools/functable-footer.txt
	  - Moved from sigscheme/tools
	* sigscheme/tools/build_func_table.rb
	  - Moved from sigscheme/tools
	  - Strip include path prefix from require
	  - (DATA_DIR): Follow the directory move
	* sigscheme/tools/Makefile.am
	  - New file
	* sigscheme/configure.in
	  - Add tools/Makefile
	* sigscheme/Makefile.am
	  - (SUBDIRS): Add tools
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - Fix the rule for sigscheme-combined-trim.h for distribution-time
	    generation
	  - (EXTRA_DIST): Remove forgotten test-compact.c
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/Makefile.am
	  - (EXTRA_DIST): Add test-storage-compact.c
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/test-compact.c
	  - Rename to test-c/test-storage-compact.c
	* sigscheme/test-c/test-storage-compact.c
	  - Renamed from src/test-compact.c
	  - Add a FIXME comment
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - Add rule for sigscheme-combined-trim.h
	  - Include sigscheme-combined-trim.h in sigscheme-combined.c
	  - (EXTRA_DIST, BUILT_SOURCES): Add sigscheme-combined-trim.h
	* uim/uim-scm.c
	  - Remove undef of FALSEP and FALSEP
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit change the naming convention for corresponding C
	  function for "foobar!" -style procedure and syntax. Thanks Jun for
	  the proposal
	
	* sigscheme/src/syntax.c
	  - (scm_s_setd, scm_s_setx): Rename scm_s_setd to scm_s_setx
	  - (scm_p_set_card, scm_p_set_carx): Rename scm_p_set_card to scm_p_set_carx
	  - (scm_p_set_cdrd, scm_p_set_cdrx): Rename scm_p_set_cdrd to
	    scm_p_set_cdrx
	  - (scm_p_string_setd, scm_p_string_setx): Rename scm_p_string_setd
	    to scm_p_string_setx
	  - (scm_p_string_filld, scm_p_string_fillx): Rename
	    scm_p_string_filld to scm_p_string_fillx
	  - (scm_p_vector_setd, scm_p_vector_setx): Rename scm_p_vector_setd
	    to scm_p_vector_setx
	  - (scm_p_vector_filld, scm_p_vector_fillx): Rename
	    scm_p_vector_filld to scm_p_vector_fillx
	  - (scm_p_set_symbol_valued, scm_p_set_symbol_valuex): Rename
	    scm_p_set_symbol_valued to scm_p_set_symbol_valuex
	  - (scm_p_srfi1_taked, scm_p_srfi1_takex): Rename scm_p_srfi1_taked
	    to scm_p_srfi1_takex
	  - (scm_p_srfi1_drop_rightd, scm_p_srfi1_drop_rightx): Rename
	    scm_p_srfi1_drop_rightd to scm_p_srfi1_drop_rightx
	  - (scm_p_srfi1_split_atd, scm_p_srfi1_split_atx): Rename
	    scm_p_srfi1_split_atd to scm_p_srfi1_split_atx
	* sigscheme/src/syntax.c
	  - (scm_s_setd, scm_s_setx): Rename scm_s_setd to scm_s_setxRename
	    scm_s_setd to scm_s_setx
	* sigscheme/src/list.c
	  - (scm_p_set_card, scm_p_set_carx): Rename scm_p_set_card to
	    scm_p_set_carx
	  - (scm_p_set_cdrd, scm_p_set_cdrx): Rename scm_p_set_cdrd to
	    scm_p_set_cdrx
	* sigscheme/src/string.c
	  - (scm_p_string_setd, scm_p_string_setx): Rename scm_p_string_setd
	    to scm_p_string_setx
	  - (scm_p_string_filld, scm_p_string_fillx): Rename
	    scm_p_string_filld to scm_p_string_fillx
	* sigscheme/src/vector.c
	  - (scm_p_vector_setd, scm_p_vector_setx): Rename scm_p_vector_setd
	    to scm_p_vector_setx
	  - (scm_p_vector_filld, scm_p_vector_fillx): Rename
	    scm_p_vector_filld to scm_p_vector_fillx
	* sigscheme/src/module-siod.c
	  - (scm_p_set_symbol_valued, scm_p_set_symbol_valuex): Rename
	    scm_p_set_symbol_valued to scm_p_set_symbol_valuex
	* sigscheme/src/module-srfi1.c
	  - (scm_p_srfi1_taked, scm_p_srfi1_takex): Rename scm_p_srfi1_taked
	    to scm_p_srfi1_takex
	  - (scm_p_srfi1_drop_rightd, scm_p_srfi1_drop_rightx): Rename
	    scm_p_srfi1_drop_rightd to scm_p_srfi1_drop_rightx
	  - (scm_p_srfi1_split_atd, scm_p_srfi1_split_atx):
	    * Rename scm_p_srfi1_split_atd to scm_p_srfi1_split_atx
	    * Follow the renamings
	* sigscheme/src/script/scm_decl.rb
	  - Add an usage example
	
2006-04-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/write.c
	  - (write_obj): Fix invalid format directive for scm_int_t
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit remove last .data section variables. All other data are
	  stored in .rodata and .bss
	
	* sigscheme/src/encoding.h
	  - (scm_encoding_init): New function decl
	* sigscheme/src/encoding.c
	  - (scm_current_char_codec): Remove initialization value
	  - (scm_encoding_init):
	    * New function
	    * Initialize scm_current_char_codec here
	* sigscheme/src/sigschemeinternal.h
	  - (scm_init_writer): New function decl
	* sigscheme/src/write.c
	  - (scm_write_ss_func): Remove initialization value
	  - (scm_init_writer):
	    * New function
	    * Initialize scm_write_ss_func and write_ss_ctx here
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Add scm_encoding_init() and
	    scm_init_writer()
	* sigscheme/src/module-siod.c
	  - (sscm_verbose_level): Remove initialization value
	  - (scm_initialize_siod): Initialize sscm_verbose_level here
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit turn rest reference-only global data into readonly
	
	* sigscheme/src/encoding.c
	  - (available_codecs): Make pointers const
	  - (scm_mb_find_codec): Follow the change
	* sigscheme/src/scmport.h
	* sigscheme/src/scmport-basechar.c
	  - (ScmBaseCharPort_vptr): Make pointer const
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-null.c
	  - (ScmNullPort_vptr): Ditto
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-file.c
	  - (ScmFilePort_vptr): Ditto
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport-str.c
	  - (ScmInputStrPort_vptr, ScmOutputStrPort_vptr): Ditto
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/scmport-mbchar.c
	  - (ScmMultiByteCharPort_vptr): Ditto
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme-combined.h
	  - Undef _POSIX_C_SOURCE and _XOPEN_SOURCE
	  - Describe about combined-source version of SigScheme
	* uim/uim-scm.c
	  - Include sigscheme-combined.h to suppress autoconf-defined macro
	    conflict between libsscm and libuim, as temporary solution
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme-combined.h
	  - New file
	  - Include config.h
	  - (PACKAGE, PACKAGE_BUGREPORT, PACKAGE_NAME, PACKAGE_STRING,
	    PACKAGE_TARNAME, PACKAGE_VERSION, VERSION): Undefined to avoid
	    conflict
	  - (SCM_COMBINED_SOURCE): Moved from sigscheme-combined.c
	* sigscheme/src/Makefile.am
	  - (sigscheme-combined.c):
	    * Include sigscheme-combined.h
	    * Move SCM_COMBINED_SOURCE to sigscheme-combined.h
	  - (EXTRA_DIST): Add sigscheme-combined.h
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/template.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/encoding-config.h
	* sigscheme/src/scmport-config.h
	  - Fix lacking extern "C" guard
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add make rule for sigscheme-combined.c as first step of
	  symbol hiding control in portable way (i.e. not using
	  -export-symbols-regex)
	
	* sigscheme/src/Makefile.am
	  - Add rule for sigscheme-combined.c
	  - (SCM_COMBINED_SOURCE): New macro in sigscheme-combined.c
	  - (BUILT_SOURCES, CLEANFILES): Add sigscheme-combined.c
	* sigscheme/src/encoding.c
	  - (ERR, CDBG, DBG): Removed
	  - (scm_mb_strlen, scm_charcodec_read_char): Replace the conflicted
	    macros with SCM_ENCODING_*()
	* sigscheme/src/format.c
	  - (initialized, format_initialized): Rename initialized to
	    format_initialized
	  - (read_number, read_width): Rename the conflicted read_number() to
	    read_width()
	  - (scm_init_format, read_number_prefix): Follow the renamings
	* sigscheme/src/module-srfi34.c
	  - (global_var_list, srfi34_global_var_list): Rename global_var_list
	    to srfi34_global_var_list
	  - (scm_initialize_srfi34): Follow the renaming
	* sigscheme/src/scmport-sbchar.c
	  - (codec, sbc_codec): Rename codec to sbc_codec
	  - (scm_sbcport_init, sbcport_codec): Follow the renaming
	* sigscheme/src/main.c
	  - (lib_path, sscm_lib_path): Rename lib_path to sscm_lib_path
	  - (main): Follow the renaming
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add -Wredundant-decls to CFLAGS
	* sigscheme/src/sigscheme.h
	  - (scm_p_char_greaterp): Remove duplicated decl
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (enum ScmFuncTypeCode):
	    * Fix the value of SCM_FUNCTYPE_INVALID which conflicts with
	      SCM_SYNTAX_FIXED_0
	    * Add new member SCM_FUNCTYPE_PROCEDURE
	* sigscheme/TODO
	  - Update
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit remove type-checked registration functions. The code
	  size has been reduced approximately 2K bytes on x86
	
	* sigscheme/src/sigscheme.h
	  - (scm_register_reduction_operator, scm_register_syntax_fixed_0,
	    scm_register_syntax_fixed_1, scm_register_syntax_fixed_2,
	    scm_register_syntax_fixed_3, scm_register_syntax_fixed_4,
	    scm_register_syntax_fixed_5, scm_register_syntax_fixed_tailrec_0,
	    scm_register_syntax_fixed_tailrec_1,
	    scm_register_syntax_fixed_tailrec_2,
	    scm_register_syntax_fixed_tailrec_3,
	    scm_register_syntax_fixed_tailrec_4,
	    scm_register_syntax_fixed_tailrec_5,
	    scm_register_syntax_variadic_0, scm_register_syntax_variadic_1,
	    scm_register_syntax_variadic_2, scm_register_syntax_variadic_3,
	    scm_register_syntax_variadic_4, scm_register_syntax_variadic_5,
	    scm_register_syntax_variadic_tailrec_0,
	    scm_register_syntax_variadic_tailrec_1,
	    scm_register_syntax_variadic_tailrec_2,
	    scm_register_syntax_variadic_tailrec_3,
	    scm_register_syntax_variadic_tailrec_4,
	    scm_register_syntax_variadic_tailrec_5,
	    scm_register_procedure_fixed_0, scm_register_procedure_fixed_1,
	    scm_register_procedure_fixed_2, scm_register_procedure_fixed_3,
	    scm_register_procedure_fixed_4, scm_register_procedure_fixed_5,
	    scm_register_procedure_fixed_tailrec_0,
	    scm_register_procedure_fixed_tailrec_1,
	    scm_register_procedure_fixed_tailrec_2,
	    scm_register_procedure_fixed_tailrec_3,
	    scm_register_procedure_fixed_tailrec_4,
	    scm_register_procedure_fixed_tailrec_5,
	    scm_register_procedure_variadic_0,
	    scm_register_procedure_variadic_1,
	    scm_register_procedure_variadic_2,
	    scm_register_procedure_variadic_3,
	    scm_register_procedure_variadic_4,
	    scm_register_procedure_variadic_5,
	    scm_register_procedure_variadic_tailrec_0,
	    scm_register_procedure_variadic_tailrec_1,
	    scm_register_procedure_variadic_tailrec_2,
	    scm_register_procedure_variadic_tailrec_3,
	    scm_register_procedure_variadic_tailrec_4,
	    scm_register_procedure_variadic_tailrec_5): Removed
	* sigscheme/src/module.c
	  - (scm_register_reduction_operator, scm_register_syntax_fixed_0,
	    scm_register_syntax_fixed_1, scm_register_syntax_fixed_2,
	    scm_register_syntax_fixed_3, scm_register_syntax_fixed_4,
	    scm_register_syntax_fixed_5, scm_register_syntax_fixed_tailrec_0,
	    scm_register_syntax_fixed_tailrec_1,
	    scm_register_syntax_fixed_tailrec_2,
	    scm_register_syntax_fixed_tailrec_3,
	    scm_register_syntax_fixed_tailrec_4,
	    scm_register_syntax_fixed_tailrec_5,
	    scm_register_syntax_variadic_0, scm_register_syntax_variadic_1,
	    scm_register_syntax_variadic_2, scm_register_syntax_variadic_3,
	    scm_register_syntax_variadic_4, scm_register_syntax_variadic_5,
	    scm_register_syntax_variadic_tailrec_0,
	    scm_register_syntax_variadic_tailrec_1,
	    scm_register_syntax_variadic_tailrec_2,
	    scm_register_syntax_variadic_tailrec_3,
	    scm_register_syntax_variadic_tailrec_4,
	    scm_register_syntax_variadic_tailrec_5,
	    scm_register_procedure_fixed_0, scm_register_procedure_fixed_1,
	    scm_register_procedure_fixed_2, scm_register_procedure_fixed_3,
	    scm_register_procedure_fixed_4, scm_register_procedure_fixed_5,
	    scm_register_procedure_fixed_tailrec_0,
	    scm_register_procedure_fixed_tailrec_1,
	    scm_register_procedure_fixed_tailrec_2,
	    scm_register_procedure_fixed_tailrec_3,
	    scm_register_procedure_fixed_tailrec_4,
	    scm_register_procedure_fixed_tailrec_5,
	    scm_register_procedure_variadic_0,
	    scm_register_procedure_variadic_1,
	    scm_register_procedure_variadic_2,
	    scm_register_procedure_variadic_3,
	    scm_register_procedure_variadic_4,
	    scm_register_procedure_variadic_5,
	    scm_register_procedure_variadic_tailrec_0,
	    scm_register_procedure_variadic_tailrec_1,
	    scm_register_procedure_variadic_tailrec_2,
	    scm_register_procedure_variadic_tailrec_3,
	    scm_register_procedure_variadic_tailrec_4,
	    scm_register_procedure_variadic_tailrec_5): Removed
	* sigscheme/src/scm_functype_mand_max15.diff
	  - Removed
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make the function table registration
	  typecheck-less. Since MAKE_FUNC() can bypass the registration-time
	  typecheck for the C function, The registration functions with
	  typecheck (scm_register_procedure_*() and so on) does not ensure
	  type-safety. So the functions will be removed soon.
	
	* sigscheme/src/sigscheme.h
	  - (enum ScmFuncTypeCode): Add member SCM_FUNCTYPE_INVALID
	  - (ScmRegisterFunc): Removed
	  - (struct scm_func_registration_info): Change 3rd member reg_func
	    with enum ScmFuncTypeCode typecode
	* sigscheme/src/module.c
	  - (scm_register_funcs): Follow revised scm_func_registration_info
	* sigscheme/src/script/build_func_table.rb
	  - (terminal_entry): Ditto
	* sigscheme/src/script/functable-header.txt
	  - Include stddef.h for NULL
	  - Include sigscheme.h for other types
	* sigscheme/src/script/scm_decl.rb
	  - Update outdated description of the regex
	  - (SCM_DECL_RE): Fix broken functype_prefix and functype_spec
	  - (String#scan_scm_decl): Add new member :functype_code and
	    :functype_whole to return value
	  - (scm_func_table_entry): Follow revised scm_func_registration_info
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_ASSERT_FUNCTYPE, SCM_REGISTER_FUNC, SCM_SYNTAX_FIXED_0,
	    SCM_SYNTAX_FIXED_TAILREC_0, SCM_SYNTAX_VARIADIC_0,
	    SCM_SYNTAX_VARIADIC_TAILREC_0, SCM_PROCEDURE_FIXED_0,
	    SCM_PROCEDURE_FIXED_TAILREC_0, SCM_PROCEDURE_VARIADIC_0,
	    SCM_PROCEDURE_VARIADIC_TAILREC_0, SCM_SYNTAX_FIXED_1,
	    SCM_SYNTAX_FIXED_TAILREC_1, SCM_SYNTAX_VARIADIC_1,
	    SCM_SYNTAX_VARIADIC_TAILREC_1, SCM_PROCEDURE_FIXED_1,
	    SCM_PROCEDURE_FIXED_TAILREC_1, SCM_PROCEDURE_VARIADIC_1,
	    SCM_PROCEDURE_VARIADIC_TAILREC_1, SCM_SYNTAX_FIXED_2,
	    SCM_SYNTAX_FIXED_TAILREC_2, SCM_SYNTAX_VARIADIC_2,
	    SCM_SYNTAX_VARIADIC_TAILREC_2, SCM_PROCEDURE_FIXED_2,
	    SCM_PROCEDURE_FIXED_TAILREC_2, SCM_PROCEDURE_VARIADIC_2,
	    SCM_PROCEDURE_VARIADIC_TAILREC_2, SCM_SYNTAX_FIXED_3,
	    SCM_SYNTAX_FIXED_TAILREC_3, SCM_SYNTAX_VARIADIC_3,
	    SCM_SYNTAX_VARIADIC_TAILREC_3, SCM_PROCEDURE_FIXED_3,
	    SCM_PROCEDURE_FIXED_TAILREC_3, SCM_PROCEDURE_VARIADIC_3,
	    SCM_PROCEDURE_VARIADIC_TAILREC_3, SCM_SYNTAX_FIXED_4,
	    SCM_SYNTAX_FIXED_TAILREC_4, SCM_SYNTAX_VARIADIC_4,
	    SCM_SYNTAX_VARIADIC_TAILREC_4, SCM_PROCEDURE_FIXED_4,
	    SCM_PROCEDURE_FIXED_TAILREC_4, SCM_PROCEDURE_VARIADIC_4,
	    SCM_PROCEDURE_VARIADIC_TAILREC_4, SCM_SYNTAX_FIXED_5,
	    SCM_SYNTAX_FIXED_TAILREC_5, SCM_SYNTAX_VARIADIC_5,
	    SCM_SYNTAX_VARIADIC_TAILREC_5, SCM_PROCEDURE_FIXED_5,
	    SCM_PROCEDURE_FIXED_TAILREC_5, SCM_PROCEDURE_VARIADIC_5,
	    SCM_PROCEDURE_VARIADIC_TAILREC_5): New macro
	  - (ScmRegisterFunc, struct scm_func_registration_info,
	    scm_register_funcs): Moved from sigschemeinternal.h
	  - (scm_register_func): Moved decl from module.c
	  - (scm_reduction_operator, scm_syntax_fixed_0,
	    scm_syntax_fixed_tailrec_0, scm_syntax_variadic_0,
	    scm_syntax_variadic_tailrec_0, scm_procedure_fixed_0,
	    scm_procedure_fixed_tailrec_0, scm_procedure_variadic_0,
	    scm_procedure_variadic_tailrec_0, scm_syntax_fixed_1,
	    scm_syntax_fixed_tailrec_1, scm_syntax_variadic_1,
	    scm_syntax_variadic_tailrec_1, scm_procedure_fixed_1,
	    scm_procedure_fixed_tailrec_1, scm_procedure_variadic_1,
	    scm_procedure_variadic_tailrec_1, scm_syntax_fixed_2,
	    scm_syntax_fixed_tailrec_2, scm_syntax_variadic_2,
	    scm_syntax_variadic_tailrec_2, scm_procedure_fixed_2,
	    scm_procedure_fixed_tailrec_2, scm_procedure_variadic_2,
	    scm_procedure_variadic_tailrec_2, scm_syntax_fixed_3,
	    scm_syntax_fixed_tailrec_3, scm_syntax_variadic_3,
	    scm_syntax_variadic_tailrec_3, scm_procedure_fixed_3,
	    scm_procedure_fixed_tailrec_3, scm_procedure_variadic_3,
	    scm_procedure_variadic_tailrec_3, scm_syntax_fixed_4,
	    scm_syntax_fixed_tailrec_4, scm_syntax_variadic_4,
	    scm_syntax_variadic_tailrec_4, scm_procedure_fixed_4,
	    scm_procedure_fixed_tailrec_4, scm_procedure_variadic_4,
	    scm_procedure_variadic_tailrec_4, scm_syntax_fixed_5,
	    scm_syntax_fixed_tailrec_5, scm_syntax_variadic_5,
	    scm_syntax_variadic_tailrec_5, scm_procedure_fixed_5,
	    scm_procedure_fixed_tailrec_5, scm_procedure_variadic_5,
	    scm_procedure_variadic_tailrec_5): New type
	* sigscheme/src/sigschemeinternal.h
	  - (ScmRegisterFunc, struct scm_func_registration_info,
	    scm_register_funcs): Move to sigscheme.h. They should be public to
	    implement user-modules
	* sigscheme/src/module.c
	  - (scm_register_func):
	    * Make exported
	    * Return created procedure/syntax
	* sigscheme/src/module-srfi34.c
	  - (scm_initialize_srfi34):
	    * Add compile-time function type check
	    * Simplify with the new function type code macros
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make all reference-only global data const. It is
	  required to support some platforms that do not support writable
	  global variables, such as BREW and Symbian
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_register_funcs): Add const qualifier to the arg
	* sigscheme/src/module.c
	  - (module_info_table): Make const
	  - (scm_s_use, scm_register_funcs): Follow the const qualifier
	    addition
	* sigscheme/src/script/build_func_table.rb
	  - (table_header): Add const qualifier to the table contents
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/encoding.c
	  - Fix include order of encoding-config.h
	
	* sigscheme/src/read.c
	  - (read_sexpression): Modify an error message
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Define SCM_SCMPORT_USE_WITH_SIGSCHEME
	* sigscheme/src/scmport.h
	  - Exclude scmport-config.h
	  - (SCM_PORT_MALLOC, SCM_PORT_CALLOC, SCM_PORT_REALLOC,
	    SCM_PORT_STRDUP, SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR): Move to
	    scmport-config.h
	* sigscheme/src/scmport-config.h
	  - (SCM_PORT_MALLOC, SCM_PORT_CALLOC, SCM_PORT_REALLOC,
	    SCM_PORT_STRDUP, SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR): Moved
	    non-SigScheme version of the macros from scmport.h
	* sigscheme/src/scmport-null.c
	* sigscheme/src/scmport-file.c
	* sigscheme/src/scmport-str.c
	* sigscheme/src/scmport-basechar.c
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/scmport-mbchar.c
	* sigscheme/src/module-srfi6.c
	  - Include scmport-config.h
	  - Exclude unneeded header
	* sigscheme/src/sigscheme.c
	* sigscheme/src/main.c
	  - Include scmport-config.h
	* sigscheme/src/load.c
	  - Include lacking stdlib.h
	  - Include scmport-config.h
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-compact.h
	  - Add a comment about scmport.h
	
	* sigscheme/src/write.c
	* sigscheme/src/format.c
	  - Include lacking stdlib.h
	
	* sigscheme/src/syntax.c
	  - (vectran): Fix malloc(3) with scm_malloc()
	
2006-03-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make encofing.[hc] SigScheme-independent
	
	* sigscheme/configure.in
	  - Define SCM_ENCODING_USE_WITH_SIGSCHEME
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Add encoding-config.h
	* sigscheme/src/encoding.h
	  - (SCM_ENCODING_USE_WITH_SIGSCHEME): Removed
	* sigscheme/src/encoding-config.h
	  - New file
	  - (SCM_ENCODING_ASSERT, SCM_ENCODING_ERROR, SCM_ENCODING_CDBG,
	    SCM_ENCODING_DBG, SCM_USE_UTF8, SCM_USE_EUCJP, SCM_USE_EUCCN,
	    SCM_USE_EUCKR, SCM_USE_SJIS, SCM_USE_UTF8_AS_DEFAULT,
	    SCM_USE_EUCCN_AS_DEFAULT, SCM_USE_EUCJP_AS_DEFAULT,
	    SCM_USE_EUCKR_AS_DEFAULT, SCM_USE_SJIS_AS_DEFAULT): New macro
	* sigscheme/src/encoding.c
	  - Include encoding-config.h
	  - Exclude sigscheme.h and sigschemeinternal.h
	  - (SCM_USE_UTF8, SCM_USE_EUCJP, SCM_USE_EUCCN, SCM_USE_EUCKR,
	    SCM_USE_SJIS, SCM_USE_UTF8_AS_DEFAULT): Removed
	  - (CDBG): Redefine to SCM_ENCODING_CDBG
	  - (ERR, DBG): New macro
	  - (scm_charcodec_read_char): Make independent of SigScheme
	
2006-03-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit resolve the include-order problem on overriding
	  SCM_PORT_*() macros, and make scmport codes SigScheme-independent
	
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Add scmport-config.h
	* sigscheme/src/scmport.h
	  - Include scmport-config.h
	  - (SCM_PORT_STRDUP): New macro
	* sigscheme/src/scmport-config.h
	  - New file
	  - (SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR, SCM_PORT_MALLOC,
	    SCM_PORT_CALLOC, SCM_PORT_REALLOC): Moved from sigschemeinternal.h
	  - (SCM_PORT_STRDUP): New macro
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR, SCM_PORT_MALLOC,
	    SCM_PORT_CALLOC, SCM_PORT_REALLOC): Move to scmport-config.h
	* sigscheme/src/scmport-null.c
	  - Exclude sigscheme.h and sigschemeinternal.h
	  - (nullport_inspect): Replace SigScheme-dependent scm_strdup() with
	    SCM_PORT_STRDUP()
	* sigscheme/src/scmport-file.c
	  - Exclude sigscheme.h and sigschemeinternal.h
	  - (fileport_new_internal, fileport_inspect): Replace
	    SigScheme-dependent scm_strdup() with SCM_PORT_STRDUP()
	* sigscheme/src/scmport-str.c
	  - Exclude sigscheme.h and sigschemeinternal.h
	  - (ScmInputStrPort_new_copying, istrport_inspect, ostrport_inspect):
	    Replace SigScheme-dependent scm_strdup() with SCM_PORT_STRDUP()
	* sigscheme/src/scmport-basechar.c
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/scmport-mbchar.c
	  - Exclude sigscheme.h and sigschemeinternal.h
	
	* sigscheme/src/storage-compact.h
	  - (struct ScmCharPort_): Removed since unneeded
	
2006-03-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/scmport.h
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-mbchar.h
	  - Rename include guard macros to follow the file renamings in r3196
	
2006-03-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/baseport.h
	* sigscheme/src/nullport.h
	* sigscheme/src/nullport.c
	* sigscheme/src/fileport.h
	* sigscheme/src/fileport.c
	* sigscheme/src/strport.h
	* sigscheme/src/strport.c
	* sigscheme/src/basecport.c
	* sigscheme/src/sbcport.h
	* sigscheme/src/sbcport.c
	* sigscheme/src/mbcport.h
	* sigscheme/src/mbcport.c
	  - Rename to scmport*.[hc]
	* sigscheme/src/scmport.h
	* sigscheme/src/scmport-null.h
	* sigscheme/src/scmport-null.c
	* sigscheme/src/scmport-file.h
	* sigscheme/src/scmport-file.c
	* sigscheme/src/scmport-str.h
	* sigscheme/src/scmport-str.c
	* sigscheme/src/scmport-basechar.c
	* sigscheme/src/scmport-sbchar.h
	* sigscheme/src/scmport-sbchar.c
	* sigscheme/src/scmport-mbchar.h
	* sigscheme/src/scmport-mbchar.c
	  - Renamed from *port.[hc] as follows
	    svn mv baseport.h  scmport.h
	    svn mv nullport.h  scmport-null.h
	    svn mv nullport.c  scmport-null.c
	    svn mv fileport.h  scmport-file.h
	    svn mv fileport.c  scmport-file.c
	    svn mv strport.h   scmport-str.h
	    svn mv strport.c   scmport-str.c
	    svn mv basecport.c scmport-basechar.c
	    svn mv sbcport.h   scmport-sbchar.h
	    svn mv sbcport.c   scmport-sbchar.c
	    svn mv mbcport.h   scmport-mbchar.h
	    svn mv mbcport.c   scmport-mbchar.c
	  - Follow the renamings
	* sigscheme/src/Makefile.am
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/port.c
	* sigscheme/src/load.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/main.c
	  - Follow the renamings
	
2006-03-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (pkginclude_HEADERS): Add scmint.h
	* sigscheme/src/sigscheme.h
	  - Include scmint.h
	  - (scm_bool, scm_false, scm_true, SCM_BOOL_DEFINED, scm_int_t,
	    scm_uint_t, SIZEOF_SCM_INT_T, SIZEOF_SCM_UINT_T, SCM_INT_T_MAX,
	    SCM_INT_T_MIN, SCM_UINT_T_MAX, SCM_USE_LONG_FIXNUM, scm_intref_t,
	    scm_uintref_t, SIZEOF_SCM_INTREF_T, SIZEOF_SCM_UINTREF_T,
	    SCM_USE_INTPTR_SCMREF, scm_intobj_t, scm_uintobj_t,
	    SIZEOF_SCM_INTOBJ_T, SIZEOF_SCM_UINTOBJ_T, scm_ichar_t,
	    SIZEOF_SCM_ICHAR_T, SCM_ICHAR_T_MAX, SCM_ICHAR_T_MIN,
	    SCM_ICHAR_T_DEFINED, SCM_BYTE_T_DEFINED, scm_byte_t,
	    SIZEOF_SCM_BYTE_T, SCM_BYTE_T_MAX, SCM_BYTE_T_MIN, scm_wchar_t,
	    SIZEOF_SCM_WCHAR_T): Move to scmint.h
	* sigscheme/src/scmint.h
	  - New file
	  - (scm_bool, scm_false, scm_true, SCM_BOOL_DEFINED, scm_int_t,
	    scm_uint_t, SIZEOF_SCM_INT_T, SIZEOF_SCM_UINT_T, SCM_INT_T_MAX,
	    SCM_INT_T_MIN, SCM_UINT_T_MAX, SCM_USE_LONG_FIXNUM, scm_intref_t,
	    scm_uintref_t, SIZEOF_SCM_INTREF_T, SIZEOF_SCM_UINTREF_T,
	    SCM_USE_INTPTR_SCMREF, scm_intobj_t, scm_uintobj_t,
	    SIZEOF_SCM_INTOBJ_T, SIZEOF_SCM_UINTOBJ_T, scm_ichar_t,
	    SIZEOF_SCM_ICHAR_T, SCM_ICHAR_T_MAX, SCM_ICHAR_T_MIN,
	    SCM_ICHAR_T_DEFINED, SCM_BYTE_T_DEFINED, scm_byte_t,
	    SIZEOF_SCM_BYTE_T, SCM_BYTE_T_MAX, SCM_BYTE_T_MIN, scm_wchar_t,
	    SIZEOF_SCM_WCHAR_T): Moved from sigscheme.h
	* sigscheme/src/encoding.h
	* sigscheme/src/baseport.h
	  - Include scmint.h
	  - (scm_bool, scm_false, scm_true, SCM_BOOL_DEFINED, scm_ichar_t,
	    SIZEOF_SCM_ICHAR_T, SCM_ICHAR_T_MAX, SCM_ICHAR_T_MIN,
	    SCM_ICHAR_T_DEFINED, SCM_BYTE_T_DEFINED, scm_byte_t,
	    SIZEOF_SCM_BYTE_T, SCM_BYTE_T_MAX, SCM_BYTE_T_MIN): Removed
	* sigscheme/src/encoding.c
	* sigscheme/src/nullport.c
	* sigscheme/src/fileport.c
	* sigscheme/src/strport.c
	* sigscheme/src/basecport.c
	* sigscheme/src/sbcport.c
	* sigscheme/src/mbcport.c
	  - Include scmint.h
	
2006-03-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/c_template
	  - Rename to template.c
	* sigscheme/src/template.c
	  - Renamed from c_template
	* sigscheme/src/h_template
	  - Rename to template.h
	* sigscheme/src/template.h
	  - Renamed from h_template
	  - Cosmetic change
	* sigscheme/src/Makefile.am
	  - (EXTRA_DIST): Add template.h and template.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/encoding.h
	* sigscheme/src/baseport.h
	* sigscheme/src/nullport.h
	* sigscheme/src/fileport.h
	* sigscheme/src/strport.h
	* sigscheme/src/sbcport.h
	* sigscheme/src/mbcport.h
	  - Cosmetic change
	
2006-03-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Dummy change to test uim-commit. Please ignore this
	
2006-03-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-03-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-03-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_file_existsp, scm_p_delete_file): Removed
	* sigscheme/src/module-sscm-ext.c
	  - (scm_p_file_existsp): Disabled. See the added comment
	  - (scm_p_delete_file): Removed to ensure safety
	* sigscheme/TODO
	  - Update
	
2006-03-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add check for getcwd(3)
	* sigscheme/src/load.c
	  - (ABSOLUTE_PATHP): New macro
	  - (scm_set_lib_path):
	    * Describe security consideration
	    * Reject relative paths
	  - (file_existsp): Reject relative paths
	  - (find_path): Cosmetic change
	* sigscheme/src/main.c
	  - (lib_path): New static variable
	  - (main): Set current directory as library load path explicitly
	* sigscheme/src/module-sscm-ext.c
	  - Fix an obsolete comment
	* sigscheme/TODO
	  - Update
	
2006-03-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Define _*_SOURCE if needed
	  - Add strcasecmp(3) replacement handling
	  - Add check for strings.h for strcasecmp(3)
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Remove config-nonstd-string.h
	  - (libsscm_la_LIBADD): Add $(LIBOBJS) for strcasecmp.c
	* sigscheme/src/config-nonstd-string.h
	  - Removed
	* sigscheme/src/sigschemeinternal.h
	  - (scm_strcasecmp): New function decl
	  - (strcasecmp): New alias macro to scm_strcasecmp
	* sigscheme/src/strcasecmp.c
	  - New file copied from string.c
	  - (strcasecmp): Renamed to scm_strcasecmp()
	  - (scm_strcasecmp):
	    * Renamed from strcasecmp()
	    * Fix infinite loop
	* sigscheme/src/string.c
	  - Exclude config-nonstd-string.h
	  - Include strings.h for strcasecmp()
	  - (strcasecmp): Move to strcasecmp.c
	* sigscheme/src/read.c
	  - Include strings.h for strcasecmp()
	  - (read_char): Remove a FIXME comment about strcasecmp()
	* sigscheme/src/char.c
	  - Exclude config-nonstd-string.h
	* sigscheme/src/alloc.c
	  - Exclude config-nonstd-string.h
	  - (_POSIX_C_SOURCE): Move to configure.in
	* sigscheme/test-c/test_strcasecmp.c
	  - New file
	  - Add simple tests for scm_strcasecmp()
	* sigscheme/test-c/Makefile.am
	  - Add test_strcasecmp.c
	
	* sigscheme/test/test-string-cmp.scm
	  - Fix typos
	
2006-03-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Remove check for snprintf(3)
	* sigscheme/src/load.c
	  - (find_path): Replace snprintf(3) with sprintf(3) to increase
	    portability. The operation is always safe
	* sigscheme/src/module-sscm-ext.c
	  - (make_loaded_str): Ditto
	* sigscheme/src/fileport.c
	  - (fileport_inspect): Ditto
	* sigscheme/src/basecport.c
	  - (ScmBaseCharPort_inspect): Ditto
	
2006-03-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-03-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - Make SCM_USE_WRITER SCM_USE_RAW_C_FORMAT dependent
	* sigscheme/src/write.c
	  - (write_obj, write_char, write_list): Limit format capability to
	    SCM_FMT_RAW_C
	* sigscheme/src/error.c
	  - (scm_die, scm_error_internal): Ditto
	* sigscheme/src/read.c
	  - (parse_unicode_sequence): Add Unicode value printing on error
	* sigscheme/src/char.c
	  - (scm_p_integer2char): Print hex value instead of decimal on error
	
2006-03-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit remove vprintf method of the port interface, and make
	  SigScheme asprintf(3) and vasprintf(3) -independent
	
	* sigscheme/configure.in
	  - Remove check for asprintf(3) and vasprintf(3)
	* sigscheme/src/config.h
	  - Ditto
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Remove config-asprintf.h
	* sigscheme/src/config-asprintf.h
	  - Removed
	* sigscheme/src/sigscheme.h
	  - (scm_port_printf, scm_port_vprintf): Removed
	* sigscheme/src/port.c
	  - (scm_port_printf, scm_port_vprintf): Removed
	* sigscheme/src/baseport.h
	  - (SCM_CHARPORT_VPRINTF, SCM_BYTEPORT_VPRINTF,
	    ScmCharPortMethod_vprintf, ScmBytePortMethod_vprintf): Removed
	  - (struct ScmCharPortVTbl_, struct ScmBytePortVTbl_): Remove member
	    'vprintf'
	* sigscheme/src/basecport.c
	  - (basecport_vprintf): Removed
	  - (ScmBaseCharPort_vtbl): Follow the removal of vprintf method
	* sigscheme/src/fileport.c
	  - (fileport_vprintf): Removed
	  - (ScmFilePort_vtbl): Follow the removal of vprintf method
	* sigscheme/src/strport.c
	  - Exclude config-asprintf.h
	  - (istrport_vprintf, ostrport_vprintf): Removed
	  - (ScmInputStrPort_vtbl, ScmOutputStrPort_vtbl): Follow the removal
	    of vprintf method
	* sigscheme/src/nullport.c
	  - (nullport_vprintf): Removed
	  - (ScmNullPort_vtbl): Follow the removal of vprintf method
	* sigscheme/src/sigschemeinternal.h
	  - (PLAIN_ERR, ERR): Update the comment about vfprintf()
	* sigscheme/TODO
	  - Update
	
2006-03-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit replace all printf-based escape sequence handlings (ERR(),
	  DBG(), and so on) with format-based one
	
	* sigscheme/src/sigscheme.h
	  - (SCM_INT_T_FMT, SCM_SIZE_T_FMT): Removed
	* sigscheme/src/error.c
	  - Exclude config-asprintf.h
	  - (scm_categorized_debug, scm_debug, scm_p_inspect_error, scm_die,
	    scm_error_internal, show_arg): Replace printf()s with format()s
	* sigscheme/src/write.c
	  - (write_obj, write_char, write_list): Ditto
	* sigscheme/src/format.c
	  - (format_raw_c_directive): Suppress the warning
	  - (read_number, format_directive): Replace escape sequences for
	    printf()s with format()s
	* sigscheme/src/sigschemeinternal.h
	  - (ENSURE_STATEFUL_CODEC, ENSURE_STATELESS_CODEC): Ditto
	* sigscheme/src/read.c
	  - (read_token, read_sexpression, read_list, read_char, read_string,
	    read_number_or_symbol, parse_number): Ditto
	* sigscheme/src/string.c
	  - (scm_p_make_string, scm_p_string_setd, scm_p_string_filld): Ditto
	* sigscheme/src/storage.c
	  - (scm_type): Ditto
	* sigscheme/src/storage-gc.c
	  - (gc_mark_locations, gc_sweep): Ditto
	* sigscheme/src/storage-symbol.c
	  - (scm_intern): Ditto
	* sigscheme/src/encoding.c
	  - (scm_mb_strlen): Ditto
	* sigscheme/src/number.c
	  - (scm_string2number): Ditto
	* sigscheme/src/load.c
	  - (scm_load_internal): Ditto
	* sigscheme/src/module-siod.c
	  - (scm_set_verbose_level): Ditto
	* sigscheme/TODO
	  - Update
	
2006-03-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* All tests of test_format.c have been passed and the format string
	  feature made ready to use as production quality
	
	* sigscheme/test-c/test_format.c
	  - Add tests for mixed SRFI & raw C directives
	
2006-03-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (format_raw_c_directive): Fix invalid termination on a prefixed
	    SRFI directive such as "~3f"
	  - (format_directive): Fix invalid format capability passing on
	    indirections ("~?")
	  - (format_internal): Fix broken "~&" handling mixed with SCM_FMT_RAW_C
	* sigscheme/test-c/test_format.c
	  - Add tests for SRFI directives invoked from C
	
2006-03-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/cutter-sscm.h
	  - Change function overriding method
	  - (UT_INITIALIZER, UT_FINALIZER, UT_REGISTER_END): Support the new
	    overriding method
	  - (default_suite_init, default_suite_fin): Removed
	  - (suite_init, suite_fin): New function decl
	  - (SSCM_REGISTER_SUITE, SSCM_SUITE_INITIALIZER,
	    SSCM_SUITE_FINALIZER): Rename to SSCM_DEAFULT_*
	  - (SSCM_DEFAULT_REGISTER_SUITE, SSCM_DEFAULT_SUITE_INITIALIZER,
	    SSCM_DEFAULT_SUITE_FINALIZER): Renamed from SSCM_*
	
2006-03-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/test_format.c
	  - Cosmetic change
	
2006-03-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test-c/test_format.c
	  - Add tests for raw C directives with size modifiers
	
2006-03-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (format_raw_c_directive):
	    * Fix broken sign extension
	    * Fix ("~C", '\0') handling
	* sigscheme/test-c/test_format.c
	  - Add tests for raw C directives without size modifier cases
	
2006-03-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add a testing environment for C
	
	* sigscheme/configure.in
	  - Handle test-c directory
	* sigscheme/Makefile.am
	  - (SUBDIRS): Add test-c
	* sigscheme/test-c
	  - New directory
	* sigscheme/test-c/cutter-sscm.h
	  - New file
	  - (UT_INITIALIZER, UT_FINALIZER, UT_DEF, UT_REGISTER_END): New macro
	    redefined from cutter.h
	  - (SSCM_REGISTER_SUITE, SSCM_SUITE_INITIALIZER,
	    SSCM_SUITE_FINALIZER): New macro
	  - (register_suite, default_suite_init, default_suite_fin): New
	    function decl
	* sigscheme/test-c/test_format.c
	  - New file
	  - (format): New static function
	  - Write some placeholder for the internal format test
	* sigscheme/test-c/test_template.c
	* sigscheme/test-c/Makefile.am
	* sigscheme/test-c/cutter-r20-yamaken-extension.diff
	* sigscheme/test-c/README
	  - New file
	* sigscheme/doc/test-c.txt
	  - New file
	  - Describe about the testing framework
	
2006-03-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (MSG_SRFI48_DIRECTIVE_HELP, MSG_SSCM_DIRECTIVE_HELP): Fill with
	    meaningful strings
	* sigscheme/test/test-srfi48.scm
	* sigscheme/test/test-formatplus.scm
	  - Follow the change
	
2006-03-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/number.c
	  - (scm_int2string): Fix broken leading zero handling
	* sigscheme/src/format.c
	  - (read_number):
	    * Expand max width to 127
	    * Add range check for it
	  - (format_raw_c_directive, format_directive): Ignore leading zero
	    specification for string
	* sigscheme/test/test-srfi48.scm
	  - Make tests shareable with format+
	  - Follow the max width change and add boundary tests for it
	* sigscheme/test/test-formatplus.scm
	  - New file
	  - Add tests for format+
	  - All tests are passed
	* sigscheme/doc/spec.txt
	  - Describe SRFI-48 conformance
	* sigscheme/TODO
	  - Update
	
2006-03-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/README
	* sigscheme/TODO
	  - Update
	
2006-03-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (format_raw_c_directive, format_directive): Support string width
	    specification
	* sigscheme/src/number.c
	  - (scm_int2string): Support width specification
	* sigscheme/test/test-srfi48.scm
	  - All tests have been passed
	  - Fix incorrect expected values
	
2006-03-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (format_str_peek): Fix "~" case
	  - (scm_pretty_print): Fix symbol-bound? check
	  - (read_number): Expand max column to accept leading zero ("099")
	  - (format_raw_c_directive): Change return type and return last char
	  - (format_directive):
	    * Ditto
	    * Fix broken prefix check
	  - (format_internal): Fix broken freshline handling
	* sigscheme/test/test-srfi48.scm
	  - New file
	  - Add tests for SRFI-48
	  - tests for ~w,dF is failed, others are passed
	* sigscheme/test/test-srfi28.scm
	  - All tests has been passed
	  - Comment in the previously failed test
	  - Add tests for invalid form
	
2006-03-10 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - include <stddef.h>
	  - not to include "my-stdint.h" and "baseport.h"
	  - declare struct ScmCharPort_
	  - (SCM_SAL_CHAR_BITS, SCM_SAL_CHAR_MAX,
	     SCM_SAL_INT_BITS, SCM_SAL_INT_MAX,
	     SCM_SAL_INT_MIN, SCM_SAL_STRLEN_BITS,
	     SCM_SAL_STRLEN_MAX, SCM_SAL_VECLEN_BITS,
	     SCM_SAL_VECLEN_MAX, SCM_SAL_NUMBERP): implemented
	
	Now, compact works if SCM_CONST_VECTOR_LITERAL == 0
	
	
2006-03-10 kzk <mover@hct.zaq.ne.jp>
	
	* try to make storage-compact.h follow the recent changes
	
	* sigscheme/src/storage.c
	  - (scm_type): use PLAIN_ERR instead of ERR
	
2006-03-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi28.scm
	  - New file
	  - Add tests for SRFI-28 (one test is failed)
	
2006-03-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/format.c
	  - (format_raw_c_directive): Optimize
	
2006-03-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add the format strings feature. It is basically working,
	  but just no-compile-error state and not tested yet
	
	* sigscheme/src/config.h
	  - (SCM_USE_RAW_C_FORMAT, SCM_USE_SSCM_FORMAT_EXTENSION,
	    SCM_USE_SRFI28, SCM_USE_SRFI48, SCM_USE_FORMAT): New macro
	* sigscheme/src/sigscheme.h
	  - (enum ScmFormatCapability, ScmValueFormat, struct
	    ScmValueFormat_): New type
	  - (SCM_VALUE_FORMAT_INIT, SCM_VALUE_FORMAT_INIT4,
	    SCM_VALUE_FORMAT_SPECIFIEDP): New macro
	  - (scm_int2string, scm_pretty_print, scm_lformat, scm_vformat,
	    scm_format, scm_initialize_srfi28, scm_p_srfi28_format,
	    scm_initialize_srfi48, scm_p_srfi48_format, scm_p_formatplus): New
	    function decl
	* sigscheme/src/sigschemeinternal.h
	  - (scm_init_format): New function decl
	* sigscheme/src/number.c
	  - (scm_int2string): New function
	  - (scm_p_number2string): Simplify with scm_int2string()
	* sigscheme/src/format.c
	  - New file
	  - (PRETTY_PRINT_PROCEDURE_NAME, MSG_SRFI48_DIRECTIVE_HELP,
	    MSG_SSCM_DIRECTIVE_HELP, NEWLINE_CHAR, FORMAT_STR_INIT,
	    FORMAT_STR_POS, FORMAT_STR_ENDP, FORMAT_STR_READ, FORMAT_STR_PEEK,
	    FORMAT_STR_SKIP_CHAR, POP_FORMAT_ARG): New macro
	  - (format_string_t, enum format_arg_type, struct format_args): New
	    type
	  - (initialized, sym_pretty_print): New static variable
	  - (format_str_peek, read_number, read_number_prefix, format_int,
	    format_raw_c_directive, format_directive, format_internal): New
	    static function
	  - (scm_init_format, scm_pretty_print, scm_lformat, scm_vformat,
	    scm_format): New function
	* sigscheme/src/module-srfi28.c
	  - New file
	  - (scm_initialize_srfi28, scm_p_srfi28_format): New function
	* sigscheme/src/module-srfi48.c
	  - New file
	  - (srfi48_format_internal): New static function
	  - (scm_initialize_srfi48 scm_p_srfi48_format, scm_p_formatplus): new
	    function
	* sigscheme/src/module.c
	  - (module_info_table): Add 'srfi-28' and 'srfi-48'
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Add scm_init_format()
	* sigscheme/src/Makefile.am
	  - Add rules for functable-srfi28.c and functable-srfi48.c
	  - (FUNC_TABLES): Add functable-srfi28.c and functable-srfi48.c
	  - (libsscm_la_SOURCES): Add format.c, module-srfi28.c and
	    module-srfi48.c conditionally
	* sigscheme/configure.in
	  - (USE_FORMAT, USE_RAW_C_FORMAT, USE_USE_SSCM_FORMAT_EXTENSION,
	    USE_SRFI28, USE_SRFI48): New variable
	* sigscheme/README
	  - Note SRFI-28 and SRFI-48
	* sigscheme/NEWS
	  - Ditto
	* sigscheme/TODO
	  - Update
	
2006-03-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/number.c
	  - (scm_string2number): Fix printf directive
	
	* sigscheme/src/sigscheme.h
	  - (scm_true): Change to explicit value to ensure that char can
	    hold it
	* sigscheme/src/baseport.h
	  - (scm_true): Ditto
	* sigscheme/src/encoding.h
	  - (scm_true): Ditto
	
2006-03-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-02-25 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-r4rs.scm
	  - disable 2 tests because of exceeding fixnum limit supported
	    by SigScheme 
	
2006-02-25 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-tail-rec.scm
	  - (assert): follow the change of assert in test/unittest.scm
	    Now runtest-tail-rec.sh works again.
	
2006-02-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigscheme.h
	  - fix build
	
2006-02-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	  - (NO_ERR_OBJ): New macro
	  - (scm_error_internal, scm_plain_error,
	    scm_error_with_implicit_func, scm_error): Suppress errobj printing
	    if not required
	* sigscheme/src/mbcport.c
	* sigscheme/src/sbcport.c
	* sigscheme/src/nullport.c
	* sigscheme/src/basecport.c
	* sigscheme/src/strport.c
	  - Include sigschemeinternal.h to cooperate with SigScheme on error
	    handling
	* sigscheme/src/fileport.c
	  - Ditto
	  - (fileport_byte_readyp): Modify error message
	
2006-02-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/number.c
	  - Include errno.h
	  - (scm_string2number): Add overflow check
	
2006-02-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add strtoll and strtoimax to AC_CHECK_FUNCS
	* sigscheme/src/sigschemeinternal.h
	  - (scm_string2number): New function decl
	* sigscheme/src/number.c
	  - (scm_string2number): New function
	  - (scm_p_string2number): Fix overflow on LL64
	* sigscheme/src/read.c
	  - (parse_number): Ditto
	
2006-02-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (enum ScmCharClass, ICHAR_ASCII_CLASS, ICHAR_CLASS): Move to
	    read.c
	  - (scm_char_class_table): Removed
	* sigscheme/src/char.c
	  - (scm_char_class_table): Move to read.c
	  - Move the citation "7.1.1 Lexical structure" to read.c
	* sigscheme/src/read.c
	  - (enum ScmCharClass, ICHAR_ASCII_CLASS, ICHAR_CLASS): Moved from
	    sigschemeinternal.h
	  - (scm_char_class_table):
	    * Moved from char.c
	    * Make static
	  - Moved the citation "7.1.1 Lexical structure" from char.c
	
2006-02-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/char.c
	  - (scm_char_class_table): Comment out SCM_CH_TOKEN_INITIAL from '.'
	* sigscheme/src/sigschemeinternal.h
	  - (enum ScmCharClass):
	    * Modify comment about SCM_CH_TOKEN_INITIAL
	    * Add new member 'SCM_CH_DELIMITER'
	  - (ICHAR_ASCIIP, ICHAR_CLASS): Make EOF-acceptable
	  - (ICHAR_HEXA_NUMERICP): New macro
	* sigscheme/src/read.c
	  - Exclude ctype.h
	  - (WHITESPACE_CHARS, DELIMITER_CHARS): Removed
	  - (skip_comment_and_space, read_sequence, read_sexpression,
	    read_list, read_list, parse_unicode_sequence, read_symbol,
	    read_number_or_symbol, read_number): Simplify with new ichar
	    macros
	  - (read_token):
	    * Ditto
	    * Change type for arg 'delim' to enum ScmCharClass
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (ICHAR_CONTROLP): New macro
	* sigscheme/src/string.c
	  - Exclude ctype.h
	  - (scm_p_make_string, scm_p_string_setd, strcasecmp,
	    scm_p_string_filld): Simplify with ichar macros
	* sigscheme/src/load.c
	  - Exclude ctype.h
	  - (parse_script_prelude): Simplify with ICHAR_ASCIIP()
	* sigscheme/src/write.c
	  - Exclude ctype.h
	  - (write_char): Simplify with ICHAR_CONTROLP()
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - Exclude ctype.h
	  - (enum ScmCharClass): New type
	  - (scm_char_class_table): New variable decl
	  - (ICHAR_ASCIIP, ICHAR_ASCII_CLASS, ICHAR_CLASS, ICHAR_ALPHABETICP,
	    ICHAR_NUMERICP, ICHAR_WHITESPACEP, ICHAR_UPPER_CASEP,
	    ICHAR_LOWER_CASEP): New macro
	  - (ICHAR_DOWNCASE, ICHAR_UPCASE): Make efficient
	* sigscheme/src/char.c
	  - Exclude ctype.h and stdlib.h
	  - Cite "7.1.1 Lexical structure" of R5RS
	  - (scm_char_class_table): New variable
	  - (scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_integer2char): Simplify with the new
	    macros
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - Reorder prototype decls
	  - Enclose prototypes into #if SCM_USE_* appropriately
	  - No prototype definitions itself are modified
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/string.c
	  - (ICHAR_DOWNCASE, ICHAR_UPCASE, ICHAR_FOLDCASE): Move to
	    sigschemeinternal.h
	  - (scm_p_charp, scm_p_char_equalp, scm_p_char_lessp,
	    scm_p_char_greaterp, scm_p_char_greaterp, scm_p_char_less_equalp,
	    scm_p_char_greater_equalp, scm_p_char_ci_equalp,
	    scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase, CHAR_CMP_BODY,
	    CHAR_CI_CMP_BODY): Move to char.c
	* sigscheme/src/char.c
	  - New file copied from string.c
	  - (scm_p_charp, scm_p_char_equalp, scm_p_char_lessp,
	    scm_p_char_greaterp, scm_p_char_greaterp, scm_p_char_less_equalp,
	    scm_p_char_greater_equalp, scm_p_char_ci_equalp,
	    scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase, CHAR_CMP_BODY,
	    CHAR_CI_CMP_BODY): Moved from string.c
	* sigscheme/src/sigschemeinternal.h
	  - (ICHAR_DOWNCASE, ICHAR_UPCASE, ICHAR_FOLDCASE): Moved from
	    string.c
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SRCS, libsscm_la_SOURCES): Add char.c
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Fix USE_NONSTD_FEATURES with USE_SSCM_EXTENSIONS
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Rename USE_NONSTD_FEATURES to USE_SSCM_EXTENSIONS
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/module-nonstd.c
	  - Rename to module-sscm-ext.c
	* sigscheme/src/module-sscm-ext.c
	  - Renamed from module-nonstd.c
	  - (scm_initialize_nonstd_features, scm_initialize_sscm_extensions):
	    Rename scm_initialize_nonstd_features() to
	    scm_initialize_sscm_extensions()
	* sigscheme/src/config.h
	  - (SCM_USE_NONSTD_FEATURES, SCM_USE_SSCM_EXTENSIONS): Rename
	    SCM_USE_NONSTD_FEATURES to SCM_USE_SSCM_EXTENSIONS
	* sigscheme/src/Makefile.am
	  - (FUNC_TABLES, libsscm_la_SOURCES): Follow the file renaming
	  - Rename the function table for functable-sscm-ext.c to
	    scm_sscm_ext_func_info_table
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/storage.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/procedure.c
	  - Follow the renamings
	* sigscheme/src/module.c
	  - (module_info_table): Ditto
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (CLEANFILES): Remove $(FUNC_TABLES)
	  - Add phony target clean-func-tables for developers
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/deep-cadrs.c
	  - Renamed from module-r5rs-deepcadrs.c
	* sigscheme/src/module-r5rs-deepcadrs.c
	  - Rename to deep-cadrs.c
	* sigscheme/src/Makefile.am
	  - Remove the rule for functable-r5rs-deepcadrs.c
	  - (FUNC_TABLES): Remove functable-r5rs-deepcadrs.c
	  - (R5RS_PROC_SRCS): Add deep-cadrs.c conditionally
	  - (libsscm_la_SOURCES): Follow the file renaming
	* sigscheme/src/sigscheme.c
	  - Exclude functable-r5rs-deepcadrs.c
	  - (scm_initialize_internal): Follow the changes
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.c
	  - Enclose some #include into #if SCM_USE_EVAL_C_STRING
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - Generate functable-sscm-core.c
	  - Remove functable-error.c
	  - Move module.c to functable-sscm-core.c from functable-r5rs-syntax.c
	  - (FUNC_TABLES):
	    * Remove functable-error.c
	    * Add functable-sscm-core.c
	  - (SSCM_PROC_SRCS): New variable
	  - (R5RS_PROC_SRCS):
	    * Remove obsolete sigscheme.c
	    * Make contitional features optional
	* sigscheme/src/sigscheme.c
	  - Include functable-sscm-core.c
	  - (scm_initialize_internal): Register SigScheme-specific core
	    syntaxes and procedures
	* sigscheme/src/error.c
	  - Follow the changes
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/script/functable-header.txt
	  - Remove unneeded section headers
	* sigscheme/src/Makefile.am
	  - (SCRIPT_DIR): New variable
	  - Rename sigschemefunctable-*.c to functable-*.c since the prefix
	    does not make sense
	  - (BUILD_FUNCTBL_SOURCES, BUILD_FUNCTBL_DEPS): Rename
	    BUILD_FUNCTBL_SOURCES to BUILD_FUNCTBL_DEPS to fix the
	    automake-reserved name
	* sigscheme/src/error.c
	* sigscheme/src/syntax.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/module-nonstd.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/module-srfi60.c
	  - Follow the file renamings
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/script/build_func_table.rb
	  - Simplify
	  - Add @filename@ substitution feature to file header and footer
	  - Generate the file directly instead of printing to stdout. This
	    resolve the collupted file problem
	  - (DATA_DIR, FILE_HEADER, FILE_FOOTER): New constant
	  - (search_declare_function, build_table, null_entry,
	    print_tableheader, print_tablefooter, build_functable,
	    print_header, print_footer): Removed
	  - (table_header, table_footer, build_table_body, terminal_entry,
	    build_table, file_header, file_footer): New function reformed from
	    above functions. The 'build_table' is pointing different function
	    between the new and previous
	* sigscheme/src/script/functable-header.txt
	  - Replace 'sigschemefunctable.c' with @filename@
	* sigscheme/src/Makefile.am
	  - Follow the change of build_func_table.rb
	
2006-02-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make the function tables module-local. It eliminates
	  that unneeded tables are being included, and enables flexible module
	  linking such as dynamic loading
	
	* sigscheme/src/sigschemefunctable.h
	* sigscheme/src/sigschemefunctable.c
	  - Removed
	* sigscheme/src/Makefile.am
	  - Remove the rule for sigschemefunctable.c
	  - Add new phony target 'func-tables' for developers
	  - (BUILT_SOURCES): New variable
	  - (libsscm_la_SOURCES): Remove sigschemefunctable.[hc]
	* sigscheme/src/sigschemeinternal.h
	  - Exclude sigschemefunctable.h
	* sigscheme/src/script/build_func_table.rb
	  - (print_tableheader): Make the table static
	* sigscheme/src/script/functable-header.txt
	  - Exclude sigscheme.h and sigschemefunctable.h
	* sigscheme/src/error.c
	* sigscheme/src/syntax.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/module-nonstd.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/module-srfi60.c
	  - Include the function tables directly
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemefunctable.h
	  - (SCM_REGISTER_FUNC_TABLE, ScmBuiltinFunc): Removed
	  - (ScmRegisterFunc, struct scm_func_registration_info): Move to
	    sigschemeinternal.h
	* sigscheme/src/sigschemefunctable.c
	  - Include sigschemeinternal.h
	* sigscheme/src/sigschemeinternal.h
	  - (ScmRegisterFunc): Moved from sigschemefunctable.h
	  - (struct scm_func_registration_info):
	    * Ditto
	    * Change type of 'c_func' to ScmFuncType
	  - (scm_register_funcs): New function decl
	* sigscheme/src/script/check_declare_func_typo.rb
	  - (search_declare_function): Follow the type change of 'c_func'
	* sigscheme/src/script/scm_decl.rb
	  - (scm_func_table_entry): Ditto
	* sigscheme/src/module.c
	  - (scm_register_funcs): New function copied from
	    SCM_REGISTER_FUNC_TABLE()
	* sigscheme/src/error.c
	* sigscheme/src/syntax.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/module-nonstd.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/module-srfi60.c
	  - Replace SCM_REGISTER_FUNC_TABLE() with scm_register_funcs()
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR, SCM_PORT_MALLOC,
	    SCM_PORT_CALLOC, SCM_PORT_REALLOC): Move to
	  - (SCM_ENSURE_LIVE_PORT): Enclose into #if SCM_USE_PORT
	  - (SCM_WRITE_SS): Enclose into #if SCM_USE_WRITER
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR, SCM_PORT_MALLOC,
	    SCM_PORT_CALLOC, SCM_PORT_REALLOC):
	    * Moved from sigscheme.h
	    * Enclose into #if SCM_USE_PORT
	* sigscheme/src/storage-fatty.h
	  - (struct ScmCell_, scm_make_port): Replace ScmCharPort * with
	    struct ScmCharPort_ * to forward declaration
	* sigscheme/src/storage-compact.h
	  - (scm_make_port, SCM_SAL_PORT_IMPL): Ditto
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/Makefile.am
	  - (pkginclude_HEADERS): Add lacking my-stdint.h
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-num.scm
	  - Modify hexadecimal letters to lower case to follow the r3044
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - (noinst_LTLIBRARIES): Comment out
	  - (lib_LTLIBRARIES): New variable
	  - (pkginclude_HEADERS):
	    * New variable
	    * Add sigscheme.h, config.h, storage-compact.h, storage-fatty.h
	      and encoding.h conditionally
	  - (USE_CONTINUATION, USE_QUASIQUOTE, USE_HYGIENIC_MACRO, USE_INT,
	    USE_RATIONAL, USE_REAL, USE_COMPLEX, USE_NUMBER, USE_CHAR,
	    USE_STRING, USE_VECTOR, USE_PORT, USE_READER, USE_WRITER,
	    USE_LOAD, USE_DEEP_CADRS, USE_NONSTD_FEATURES, USE_LEGACY_MACRO,
	    USE_DUMP, USE_EVAL_C_STRING, USE_SRFI1, USE_SRFI2, USE_SRFI6,
	    USE_SRFI8, USE_SRFI22, USE_SRFI23, USE_SRFI34, USE_SRFI38,
	    USE_SRFI60, USE_SRFI75_NAMED_CHARS, USE_SRFI75, COMPAT_SIOD,
	    COMPAT_SIOD_BUGS, USE_UTF8, USE_EUCCN, USE_EUCJP, USE_EUCKR,
	    USE_SJIS, USE_MULTIBYTE_CHAR, USE_UTF8_AS_DEFAULT,
	    USE_EUCCN_AS_DEFAULT, USE_EUCJP_AS_DEFAULT, USE_EUCKR_AS_DEFAULT,
	    USE_SJIS_AS_DEFAULT, STRICT_R5RS, STRICT_NULL_FORM,
	    STRICT_VECTOR_FORM, STRICT_ARGCHECK, STRICT_DEFINE_PLACEMENT,
	    STRICT_ENCODING_CHECK, CONST_LIST_LITERAL, CONST_VECTOR_LITERAL,
	    ACCESSOR_ASSERT, USE_VALUECONS, USE_NULL_CAPABLE_STRING,
	    USE_STORAGE_COMPACT): New automake variable
	* sigscheme/src/Makefile.am
	  - Compile libsscm_la_SOURCES separatedly
	* sigscheme/src/config.h
	  - Modify section organization
	* sigscheme/src/basecport.c
	* sigscheme/src/encoding.c
	* sigscheme/src/env.c
	* sigscheme/src/eval.c
	* sigscheme/src/fileport.c
	* sigscheme/src/load.c
	* sigscheme/src/main.c
	* sigscheme/src/mbcport.c
	* sigscheme/src/module-nonstd.c
	* sigscheme/src/module-r5rs-deepcadrs.c
	* sigscheme/src/module-srfi1.c
	* sigscheme/src/module-srfi2.c
	* sigscheme/src/module-srfi8.c
	* sigscheme/src/module-srfi23.c
	* sigscheme/src/module-srfi34.c
	* sigscheme/src/module-srfi38.c
	* sigscheme/src/module-srfi60.c
	* sigscheme/src/module.c
	* sigscheme/src/nullport.c
	* sigscheme/src/read.c
	* sigscheme/src/sbcport.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/sigschemefunctable.c
	* sigscheme/src/storage-continuation.c
	* sigscheme/src/storage-gc.c
	* sigscheme/src/storage-symbol.c
	* sigscheme/src/storage.c
	* sigscheme/src/syntax.c
	* sigscheme/src/test-compact.c
	* sigscheme/src/write.c
	  - Include config.h
	* sigscheme/src/procedure.c
	* sigscheme/src/port.c
	* sigscheme/src/module-siod.c
	* sigscheme/src/module-srfi6.c
	  - Ditto
	  - Remove direct inclusion of *.c
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (ENSURE_STATEFUL_CODEC, ENSURE_STATELESS_CODEC): Disable when
	    !SCM_USE_MULTIBYTE_CHAR
	* sigscheme/src/string.c
	  - (scm_p_make_string, scm_p_string_setd, scm_p_list2string,
	    scm_p_string_filld): Remove multibyte char handlings when
	    !SCM_USE_MULTIBYTE_CHAR
	* sigscheme/src/load.c
	  - (scm_load_internal): Ditto
	* sigscheme/src/storage.c
	  - (scm_make_string_internal): Ditto
	* sigscheme/src/sigscheme.c
	  - (scm_interpret_argv): Ditto
	* sigscheme/src/write.c
	  - (write_string): Ditto
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_USE_EVAL_C_STRING): New macro
	  - Modify SRFI-6 dependency for SCM_USE_EVAL_C_STRING
	* sigscheme/src/sigscheme.h
	  - (scm_eval_c_string): Enable only when SCM_USE_EVAL_C_STRING
	* sigscheme/src/sigscheme.c
	  - (scm_eval_c_string): Ditto
	  - (scm_eval_c_string_internal):
	    * Ditto
	    * Add lacking static specifier
	* sigscheme/src/procedure.c
	  - Include config-asprintf.h only when SCM_USE_EVAL_C_STRING
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_FINISH_TAILREC_CALL): New macro
	* sigscheme/src/eval.c
	  - (scm_call): Simplify with the new macro
	* sigscheme/src/module-srfi34.c
	  - (guard_handler, guard_body): Ditto
	* sigscheme/src/main.c
	  - (repl_loop): Ditto
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/main.c
	  - (repl_loop): Fix excessive evaluation
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_display_errobj_ss): New function decl
	* sigscheme/src/error.c
	  - (scm_p_inspect_error): Add shared structure handling for err_obj
	* sigscheme/src/write.c
	  - (write_ss_internal): New static function copied from scm_write_ss()
	  - (scm_write_ss): Reform to wrapper to write_ss_internal()
	  - (scm_display_errobj_ss): New function
	  - (write_internal): Moved scm_port_flush() from write_obj()
	  - (write_obj): Move scm_port_flush() to write_internal()
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_write_to_port, scm_write): Rename scm_write_to_port to
	    scm_write
	  - (scm_display_to_port, scm_display): Rename scm_display_to_port to
	    scm_display
	  - (scm_write_to_port_with_shared_structure, scm_write_ss): Rename
	    scm_write_to_port_with_shared_structure to scm_write_ss
	  - (SCM_WRITESS_TO_PORT, SCM_WRITE_SS): Rename SCM_WRITESS_TO_PORT to
	    SCM_WRITE_SS
	* sigscheme/src/sigschemeinternal.h 
	  - (scm_writess_func, scm_write_ss_func): Rename scm_writess_func to
	    scm_write_ss_func
	* sigscheme/src/write.c
	  - (scm_writess_func, scm_write_ss_func): Rename scm_writess_func to
	    scm_write_ss_func
	  - (scm_writess_func, write_obj, write_errobj, get_shared_index,
	    scm_p_write, scm_p_display): Follow the renamings
	  - (write_internal): New static function
	  - (scm_write_to_port): Rename to scm_write
	  - (scm_display_to_port): Rename to scm_display
	  - (scm_write):
	    * Renamed from scm_write_to_port
	    * Simplify with write_internal()
	  - (scm_display):
	    * Renamed from scm_display_to_port
	    * Simplify with write_internal()
	  - (scm_write_to_port_with_shared_structure): Rename to scm_write_ss
	  - (scm_write_ss):
	    * Renamed from scm_write_to_port_with_shared_structure
	    * Follow the renaming
	* sigscheme/src/module-srfi38.c
	  - (scm_initialize_srfi38, scm_p_srfi38_write_with_shared_structure):
	    Follow the renamings
	* sigscheme/src/error.c
	  - (scm_p_inspect_error, show_arg, scm_show_backtrace): Ditto
	* sigscheme/src/read.c
	  - (scm_read): Ditto
	* sigscheme/src/main.c
	  - (repl_loop): Ditto
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_VOLATILE_OUTPUT): Removed
	* sigscheme/src/sigscheme.h
	  - (scm_display): Removed
	* sigscheme/src/port.c
	  - (scm_port_vprintf): Remove SCM_VOLATILE_OUTPUT handling
	* sigscheme/src/write.c
	  - (scm_display): Removed
	  - (scm_write_to_port, scm_display_to_port): Remove
	    SCM_VOLATILE_OUTPUT handling
	  - (write_obj): Add scm_port_flush() at last
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/write.c
	  - (write_ss_scan): Fix 64-bit capability
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_SYMBOL_NAME, SCM_SAL_STRING_STR, SCM_SAL_VECTOR_VEC,
	    SCM_SAL_PORT_IMPL, SCM_SAL_CONTINUATION_OPAQUE,
	    SCM_SAL_C_POINTER_VALUE): Cosmetic change
	* sigscheme/src/test-compact.c
	  - (ASSERT_TYPE, typecode2typestr, aligned_strdup, scm_check_vector,
	    scm_check_port, scm_check_freecell, main): Ditto
	* sigscheme/src/storage.c
	  - (SCM_CONSTANT_BIND_SUBSTANCE, scm_type): Ditto
	* sigscheme/src/eval.c
	  - (reduce): Ditto
	* sigscheme/src/write.c
	  - (write_errobj, hash_grow, hash_lookup, write_ss_scan): Ditto
	* sigscheme/src/sigscheme.h
	  - (register_reduction_operator, scm_register_syntax_fixed_tailrec_0,
	    scm_register_syntax_fixed_tailrec_1,
	    scm_register_syntax_fixed_tailrec_2,
	    scm_register_syntax_fixed_tailrec_3,
	    scm_register_syntax_fixed_tailrec_4,
	    scm_register_syntax_fixed_tailrec_5,
	    scm_register_syntax_variadic_tailrec_0,
	    scm_register_syntax_variadic_tailrec_1,
	    scm_register_syntax_variadic_tailrec_2,
	    scm_register_syntax_variadic_tailrec_3,
	    scm_register_syntax_variadic_tailrec_4,
	    scm_register_syntax_variadic_tailrec_5,
	    scm_register_procedure_fixed_tailrec_0,
	    scm_register_procedure_fixed_tailrec_1,
	    scm_register_procedure_fixed_tailrec_2,
	    scm_register_procedure_fixed_tailrec_3,
	    scm_register_procedure_fixed_tailrec_4,
	    scm_register_procedure_fixed_tailrec_5,
	    scm_register_procedure_variadic_tailrec_0,
	    scm_register_procedure_variadic_tailrec_1,
	    scm_register_procedure_variadic_tailrec_2,
	    scm_register_procedure_variadic_tailrec_3,
	    scm_register_procedure_variadic_tailrec_4,
	    scm_register_procedure_variadic_tailrec_5): Ditto
	* sigscheme/src/module.c
	  - (register_reduction_operator, scm_register_syntax_fixed_tailrec_0,
	    scm_register_syntax_fixed_tailrec_1,
	    scm_register_syntax_fixed_tailrec_2,
	    scm_register_syntax_fixed_tailrec_3,
	    scm_register_syntax_fixed_tailrec_4,
	    scm_register_syntax_fixed_tailrec_5,
	    scm_register_syntax_variadic_tailrec_0,
	    scm_register_syntax_variadic_tailrec_1,
	    scm_register_syntax_variadic_tailrec_2,
	    scm_register_syntax_variadic_tailrec_3,
	    scm_register_syntax_variadic_tailrec_4,
	    scm_register_syntax_variadic_tailrec_5,
	    scm_register_procedure_fixed_tailrec_0,
	    scm_register_procedure_fixed_tailrec_1,
	    scm_register_procedure_fixed_tailrec_2,
	    scm_register_procedure_fixed_tailrec_3,
	    scm_register_procedure_fixed_tailrec_4,
	    scm_register_procedure_fixed_tailrec_5,
	    scm_register_procedure_variadic_tailrec_0,
	    scm_register_procedure_variadic_tailrec_1,
	    scm_register_procedure_variadic_tailrec_2,
	    scm_register_procedure_variadic_tailrec_3,
	    scm_register_procedure_variadic_tailrec_4,
	    scm_register_procedure_variadic_tailrec_5): Ditto
	
2006-02-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - Modify description about 64-bit support
	* sigscheme/doc/spec.txt
	  - Update
	
2006-01-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/number.c
	  - (scm_p_number2string): Make hexadecimal letters lower case
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/string.c
	  - (scm_p_string2list): Rename local variable
	* sigscheme/src/port.c
	  - (scm_p_char_readyp): Ditto
	* sigscheme/src/vector.c
	  - (scm_p_vector2list): Ditto
	* sigscheme/src/list.c
	  - (scm_p_append): Ditto
	* sigscheme/src/eval.c
	  - (map_eval): Ditto
	* sigscheme/src/procedure.c
	  - (map_single_arg, map_multiple_args): Ditto
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_list_ref, scm_p_abs, scm_p_quotient, scm_p_modulo,
	    scm_p_remainder, scm_p_vector_ref, scm_p_vector_setd,
	    scm_p_srfi1_list_tabulate): Rename argument
	* sigscheme/src/module-srfi1.c
	  - (scm_p_srfi1_list_tabulate): Ditto
	* sigscheme/src/number.c
	  - (scm_p_abs, scm_p_quotient, scm_p_modulo, scm_p_remainder): Ditto
	* sigscheme/src/vector.c
	  - (scm_p_vector_ref, scm_p_vector_setd): Ditto
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_IS_MARKED, SCM_MARKEDP): Rename SCM_IS_MARKED to SCM_MARKEDP
	  - (SCM_IS_UNMARKED, SCM_UNMARKEDP): Rename SCM_IS_UNMARKED to
	    SCM_UNMARKEDP
	  - (SCM_DO_MARK, SCM_MARK): Rename SCM_DO_MARK to SCM_MARK
	  - (SCM_DO_UNMARK, SCM_UNMARK): Rename SCM_DO_UNMARK to SCM_UNMARK
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/test-compact.c
	* sigscheme/src/storage-gc.c
	  - Follow the renamings
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/number.c
	  - (scm_p_number2string): Fix broken -INT_MIN capability
	* sigscheme/src/read.c
	  - (INT_LITERAL_LEN_MAX): Ditto
	* sigscheme/test/test-num.scm
	  - Add tests for number->string. both 32bit and 64bit tests are
	    passed on storage-fatty
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Provide "64bit-addr" if (SCM_PTR_BITS
	    == 64)
	* sigscheme/src/sigscheme.h
	  - (scm_p_least_fixnum, scm_p_greatest_fixnum): New function decl
	* sigscheme/src/module-nonstd.c
	  - (scm_p_least_fixnum, scm_p_greatest_fixnum): New function
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/mbcport.c
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/module-srfi6.c
	* sigscheme/src/load.c
	* sigscheme/src/storage-compact.h
	* sigscheme/src/sigscheme.h
	* sigscheme/src/module-nonstd.c
	* sigscheme/src/write.c
	  - Remove inappropriately placed headers
	  - Add required headers
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/main.c
	  - (repl_loop): Fix broken evaluation
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (SCM_ERR_HEADER): Replace "Error: " with "ERROR: " to make ordinary
	    as other Scheme implementations
	* sigscheme/src/config.h
	  - (SCM_DEBUG_BACKTRACE_SEP): Disable by default
	* test/uim-test-utils.scm
	  - (uim-sh-read): Follow the change of SCM_ERR_HEADER
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/error.c
	  - (SCM_BACKTRACE_HEADER, SCM_BACKTRACE_SEP): Remove trailing "\n"
	  - (scm_show_backtrace):
	    * Suppress headers if trace stack is empty
	    * Print newline by scm_port_newline()
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commmit make ERR() current function-aware. Use PLAIN_ERR() for
	  function name-less error
	
	* sigscheme/src/sigscheme.h
	  - (scm_error): Add 'func_name' as first arg
	  - (scm_plain_error): New function decl
	* sigscheme/src/sigschemeinternal.h
	  - (PLAIN_ERR): New macro
	  - (ERR):
	    * Prepend function name implicitly
	    * Support C99 and GNU variadic macros if available (not used yet)
	  - (scm_error_with_implicit_func): New function decl
	  - (scm_err_funcname): New variable decl
	  - (ENSURE_STATEFUL_CODEC, ENSURE_STATELESS_CODEC): Follow the spec
	    change of ERR()
	* sigscheme/src/error.c
	  - (scm_err_funcname): New variable
	  - (scm_error_internal): New static function
	  - (scm_init_error): Add initialization for scm_err_funcname
	  - (scm_plain_error, scm_error_with_implicit_func, ): New function
	  - (scm_error):
	    * Add 'func_name' as first arg
	    * Simplify with scm_err_internal()
	  - (scm_error_obj): Simplify with scm_err_internal()
	* sigscheme/src/alloc.c
	  - (scm_malloc_aligned, scm_lbuf_extend): Replace ERR() with PLAIN_ERR()
	* sigscheme/src/string.c
	  - (scm_p_make_string, scm_p_string_ref, scm_p_string_setd,
	    scm_p_list2string, scm_p_string_filld): Rearrange ERR() with the
	    new spec
	* sigscheme/src/module-srfi1.c
	  - (scm_p_srfi1_list_copy): Ditto
	* sigscheme/src/storage-continuation.c
	  - (unwind_dynamic_extent, scm_call_continuation): Ditto
	* sigscheme/src/load.c
	  - (scm_load_internal, parse_script_prelude): Ditto
	* sigscheme/src/module-siod.c
	  - (scm_set_verbose_level): Ditto
	* sigscheme/src/main.c
	  - (repl_loop): Ditto
	* sigscheme/src/syntax.c
	  - (scm_s_cond_internal, scm_s_let, define_internal): Ditto
	* sigscheme/src/eval.c
	  - (call_continuation, scm_eval, scm_p_scheme_report_environment,
	    scm_p_null_environment): Ditto
	* sigscheme/src/procedure.c
	  - (scm_p_map): Ditto
	* sigscheme/src/write.c
	  - (write_char, write_string, write_errobj): Replace ERR() with false
	    assertion
	* sigscheme/src/read.c
	  - (read_sequence, read_token, read_sexpression, read_list,
	    parse_unicode_sequence, read_char, read_string,
	    read_number_or_symbol, parse_number, read_number): Add
	    DECLARE_INTERNAL_FUNCTION() to follow the spec change of ERR()
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/eval.c
	  - (call, map_eval): Fix invalid ERR() with ERR_OBJ()
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - Add dependency resolution for reader and writer
	* sigscheme/src/sigschemeinternal.h
	  - Move prototype section
	* sigscheme/src/read.c
	  - (scm_special_char_table): Move to port.c
	* sigscheme/src/port.c
	  - (scm_special_char_table): Moved from read.c
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* operations-nonstd.c
	* operations-r5rs-deepcadrs.c
	* operations-siod.c
	* operations-srfi1.c
	* operations-srfi2.c
	* operations-srfi6.c
	* operations-srfi8.c
	* operations-srfi23.c
	* operations-srfi34.c
	* operations-srfi38.c
	* operations-srfi60.c
	  - Rename to module-*.c
	* module-nonstd.c
	* module-r5rs-deepcadrs.c
	* module-siod.c
	* module-srfi1.c
	* module-srfi2.c
	* module-srfi6.c
	* module-srfi8.c
	* module-srfi23.c
	* module-srfi34.c
	* module-srfi38.c
	* module-srfi60.c
	  - Renamed from operations-*.c
	* sigscheme/src/Makefile.am
	* sigscheme/src/procedure.c
	* sigscheme/src/sigscheme.h
	  - Follow the renamings
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/procedure.c
	  - Renamed from operations.c
	* sigscheme/src/operations.c
	  - Rename to procedure.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/Makefile.am
	  - Follow the renaming
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_USE_CONTINUATION, SCM_USE_QUASIQUOTE, SCM_USE_HYGIENIC_MACRO,
	    SCM_USE_INT, SCM_USE_RATIONAL, SCM_USE_REAL, SCM_USE_COMPLEX,
	    SCM_USE_CHAR, SCM_USE_STRING, SCM_USE_VECTOR, SCM_USE_PORT,
	    SCM_USE_READER, SCM_USE_WRITER, SCM_USE_LOAD,
	    SCM_USE_LEGACY_MACRO, SCM_USE_DUMP, SCM_USE_NUMBER): New macro
	
	* sigscheme/TODO
	  - Update
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_less_eq, scm_p_less_equal): Rename scm_p_less_eq to
	    scm_p_less_equal
	  - (scm_p_greater_eq, scm_p_greater_equal): Rename scm_p_greater_eq
	    to scm_p_greater_equal
	* sigscheme/src/number.c
	  - (scm_p_less_eq, scm_p_less_equal): Rename scm_p_less_eq to
	    scm_p_less_equal
	  - (scm_p_greater_eq, scm_p_greater_equal): Rename scm_p_greater_eq
	    to scm_p_greater_equal
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_init_module): New function decl
	* sigscheme/src/module.c
	  - New file copied from sigscheme.c
	  - (struct module_info, features, module_info_table,
	    scm_use_internal, scm_register_func, scm_provide, scm_providedp,
	    scm_use, scm_s_use, scm_define_alias
	    scm_register_reduction_operator, scm_register_syntax_fixed_0,
	    scm_register_syntax_fixed_1, scm_register_syntax_fixed_2,
	    scm_register_syntax_fixed_3, scm_register_syntax_fixed_4,
	    scm_register_syntax_fixed_5, scm_register_syntax_fixed_tailrec_0,
	    scm_register_syntax_fixed_tailrec_1,
	    scm_register_syntax_fixed_tailrec_2,
	    scm_register_syntax_fixed_tailrec_3,
	    scm_register_syntax_fixed_tailrec_4,
	    scm_register_syntax_fixed_tailrec_5,
	    scm_register_syntax_variadic_0, scm_register_syntax_variadic_1,
	    scm_register_syntax_variadic_2, scm_register_syntax_variadic_3,
	    scm_register_syntax_variadic_4, scm_register_syntax_variadic_5,
	    scm_register_syntax_variadic_tailrec_0,
	    scm_register_syntax_variadic_tailrec_1,
	    scm_register_syntax_variadic_tailrec_2,
	    scm_register_syntax_variadic_tailrec_3,
	    scm_register_syntax_variadic_tailrec_4,
	    scm_register_syntax_variadic_tailrec_5,
	    scm_register_procedure_fixed_0, scm_register_procedure_fixed_1,
	    scm_register_procedure_fixed_2, scm_register_procedure_fixed_3,
	    scm_register_procedure_fixed_4, scm_register_procedure_fixed_5,
	    scm_register_procedure_fixed_tailrec_0,
	    scm_register_procedure_fixed_tailrec_1,
	    scm_register_procedure_fixed_tailrec_2,
	    scm_register_procedure_fixed_tailrec_3,
	    scm_register_procedure_fixed_tailrec_4,
	    scm_register_procedure_fixed_tailrec_5,
	    scm_register_procedure_variadic_0,
	    scm_register_procedure_variadic_1,
	    scm_register_procedure_variadic_2,
	    scm_register_procedure_variadic_3,
	    scm_register_procedure_variadic_4,
	    scm_register_procedure_variadic_5,
	    scm_register_procedure_variadic_tailrec_0,
	    scm_register_procedure_variadic_tailrec_1,
	    scm_register_procedure_variadic_tailrec_2,
	    scm_register_procedure_variadic_tailrec_3,
	    scm_register_procedure_variadic_tailrec_4,
	    scm_register_procedure_variadic_tailrec_5): Moved from sigscheme.c
	* sigscheme/src/sigscheme.c
	  - (struct module_info, features, module_info_table,
	    scm_use_internal, scm_register_func, scm_provide, scm_providedp,
	    scm_use, scm_s_use, scm_define_alias
	    scm_register_reduction_operator, scm_register_syntax_fixed_0,
	    scm_register_syntax_fixed_1, scm_register_syntax_fixed_2,
	    scm_register_syntax_fixed_3, scm_register_syntax_fixed_4,
	    scm_register_syntax_fixed_5, scm_register_syntax_fixed_tailrec_0,
	    scm_register_syntax_fixed_tailrec_1,
	    scm_register_syntax_fixed_tailrec_2,
	    scm_register_syntax_fixed_tailrec_3,
	    scm_register_syntax_fixed_tailrec_4,
	    scm_register_syntax_fixed_tailrec_5,
	    scm_register_syntax_variadic_0, scm_register_syntax_variadic_1,
	    scm_register_syntax_variadic_2, scm_register_syntax_variadic_3,
	    scm_register_syntax_variadic_4, scm_register_syntax_variadic_5,
	    scm_register_syntax_variadic_tailrec_0,
	    scm_register_syntax_variadic_tailrec_1,
	    scm_register_syntax_variadic_tailrec_2,
	    scm_register_syntax_variadic_tailrec_3,
	    scm_register_syntax_variadic_tailrec_4,
	    scm_register_syntax_variadic_tailrec_5,
	    scm_register_procedure_fixed_0, scm_register_procedure_fixed_1,
	    scm_register_procedure_fixed_2, scm_register_procedure_fixed_3,
	    scm_register_procedure_fixed_4, scm_register_procedure_fixed_5,
	    scm_register_procedure_fixed_tailrec_0,
	    scm_register_procedure_fixed_tailrec_1,
	    scm_register_procedure_fixed_tailrec_2,
	    scm_register_procedure_fixed_tailrec_3,
	    scm_register_procedure_fixed_tailrec_4,
	    scm_register_procedure_fixed_tailrec_5,
	    scm_register_procedure_variadic_0,
	    scm_register_procedure_variadic_1,
	    scm_register_procedure_variadic_2,
	    scm_register_procedure_variadic_3,
	    scm_register_procedure_variadic_4,
	    scm_register_procedure_variadic_5,
	    scm_register_procedure_variadic_tailrec_0,
	    scm_register_procedure_variadic_tailrec_1,
	    scm_register_procedure_variadic_tailrec_2,
	    scm_register_procedure_variadic_tailrec_3,
	    scm_register_procedure_variadic_tailrec_4,
	    scm_register_procedure_variadic_tailrec_5): Move to module.c
	  - (scm_sym_quote, scm_sym_quasiquote, scm_sym_unquote,
	    scm_sym_unquote_splicing): Move to syntax.c
	  - (scm_identifier_codec): Move to operations.c
	  - (scm_initialize_internal):
	    * Add scm_init_module()
	    * Move initializations to scm_init_module() and scm_init_syntax()
	* sigscheme/src/syntax.c
	  - (scm_sym_quote, scm_sym_quasiquote, scm_sym_unquote,
	    scm_sym_unquote_splicing): Moved from sigscheme.c
	  - (scm_init_syntax): Add initializations for the symbols
	* sigscheme/src/operations.c
	  - (scm_identifier_codec): Moved from sigscheme.c
	* sigscheme/src/sigscheme.h
	  - Move prototype section
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Add module.c
	  - Add module.c to the rule for sigschemefunctable-r5rs-syntax.c
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_init_io, scm_init_port): Rename scm_init_io to scm_init_port
	* sigscheme/src/io.c
	  - Rename to port.c
	* sigscheme/src/port.c
	  - Renamed from io.c
	  - (scm_init_io, scm_init_port): Rename scm_init_io to scm_init_port
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Follow the renaming
	* sigscheme/src/sigscheme.h
	  - Move prototype section
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SRCS, libsscm_la_SOURCES): Follow the file renaming
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/load.c
	  - New file copied from io.c
	  - (SCRIPT_PRELUDE_MAXLEN, SCRIPT_PRELUDE_DELIM, scm_lib_path,
	    scm_load_internal, find_path, file_existsp,
	    interpret_script_prelude, parse_script_prelude, scm_set_lib_path,
	    scm_load, scm_p_load): Moved from io.c
	* sigscheme/src/io.c
	  - (SCRIPT_PRELUDE_MAXLEN, SCRIPT_PRELUDE_DELIM, scm_lib_path,
	    scm_load_internal, find_path, file_existsp,
	    interpret_script_prelude, parse_script_prelude, scm_set_lib_path,
	    scm_load, scm_p_load): Move to load.c
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Add load.c
	  - (R5RS_PROC_SRCS): Add load.c, read.c and write.c
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/io.c
	  - (scm_p_read): Move to read.c
	  - (scm_p_write, scm_p_display): Move to write.c
	  - (scm_p_write_char): Make independent from write.c
	* sigscheme/src/read.c
	  - (scm_read):
	    * Remove variable initialization
	    * Remove ENSURE_PORT(port)
	* sigscheme/src/write.c
	  - (scm_p_write, scm_p_display): Moved from io.c
	* sigscheme/src/sigscheme.h
	  - Move prototype sections
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (EQVP, EQUALP): Moved from operations.c
	* sigscheme/src/list.c
	  - New file copied from operations.c
	  - (scm_p_symbolp, scm_p_symbol2string, scm_p_string2symbol,
	    scm_p_procedurep, scm_p_map, scm_p_for_each, scm_p_force,
	    scm_p_call_with_current_continuation, scm_p_values,
	    scm_p_call_with_values, scm_p_dynamic_wind): Moved from operations.c
	* sigscheme/src/operations.c
	  - (EQVP, EQUALP): Move to list.c
	  - (scm_p_symbolp, scm_p_symbol2string, scm_p_string2symbol,
	    scm_p_procedurep, scm_p_map, scm_p_for_each, scm_p_force,
	    scm_p_call_with_current_continuation, scm_p_values,
	    scm_p_call_with_values, scm_p_dynamic_wind): Move to list.c
	* sigscheme/src/sigscheme.h
	  - Move prototype section
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SRCS, libsscm_la_SOURCES): Add list.c
	* sigscheme/TODO
	  - Update
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/vector.c
	  - New file copied from operations.c
	  - (scm_p_vectorp, scm_p_make_vector, scm_p_vector,
	    scm_p_vector_length, scm_p_vector_ref, scm_p_vector_setd,
	    scm_p_vector2list, scm_p_list2vector, scm_p_vector_filld): Moved
	    from operations.c
	* sigscheme/src/operations.c
	  - (scm_p_vectorp, scm_p_make_vector, scm_p_vector,
	    scm_p_vector_length, scm_p_vector_ref, scm_p_vector_setd,
	    scm_p_vector2list, scm_p_list2vector, scm_p_vector_filld): Move to
	    vector.c
	* sigscheme/src/sigscheme.h
	  - Move prototype section
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SOURCES): Rename to R5RS_PROC_SRCS to avoid conflicting
	    with libtool naming convention
	  - (R5RS_PROC_SRCS):
	    * Renamed from R5RS_PROC_SOURCES
	    * Add vector.c
	  - (libsscm_la_SOURCES): Add vector.c
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/number.c
	  - New file copied from operations.c
	  - (prepare_radix, scm_p_add, scm_p_subtract, scm_p_multiply,
	    scm_p_divide, scm_p_equal, scm_p_less, scm_p_less_eq,
	    scm_p_greater, scm_p_greater_eq, scm_p_numberp, scm_p_integerp,
	    scm_p_zerop, scm_p_positivep, scm_p_negativep, scm_p_oddp,
	    scm_p_evenp, scm_p_max, scm_p_min, scm_p_abs, scm_p_quotient,
	    scm_p_modulo, scm_p_remainder, scm_p_number2string ,
	    scm_p_string2number): Moved from operations.c
	* sigscheme/src/operations.c
	  - (prepare_radix, scm_p_add, scm_p_subtract, scm_p_multiply,
	    scm_p_divide, scm_p_equal, scm_p_less, scm_p_less_eq,
	    scm_p_greater, scm_p_greater_eq, scm_p_numberp, scm_p_integerp,
	    scm_p_zerop, scm_p_positivep, scm_p_negativep, scm_p_oddp,
	    scm_p_evenp, scm_p_max, scm_p_min, scm_p_abs, scm_p_quotient,
	    scm_p_modulo, scm_p_remainder, scm_p_number2string ,
	    scm_p_string2number): Move to number.c
	* sigscheme/src/sigscheme.h
	  - Move prototype section
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SOURCES, libsscm_la_SOURCES): Add number.c
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/string.c
	  - New file copied from operations.c
	  - (STRING_CMP, STRING_CI_CMP, ICHAR_DOWNCASE, ICHAR_UPCASE,
	    ICHAR_FOLDCASE, strcasecmp, string_cmp, scm_p_charp,
	    scm_p_char_equalp, scm_p_char_lessp, scm_p_char_greaterp,
	    scm_p_char_greaterp, scm_p_char_less_equalp,
	    scm_p_char_greater_equalp, scm_p_char_ci_equalp,
	    scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase, scm_p_stringp,
	    scm_p_make_string, scm_p_string, scm_p_string_length,
	    scm_p_string_ref, scm_p_string_setd, scm_p_stringequalp,
	    scm_p_string_ci_equalp, scm_p_string_greaterp, scm_p_string_lessp,
	    scm_p_string_greater_equalp, scm_p_string_less_equalp,
	    scm_p_string_ci_greaterp, scm_p_string_ci_lessp,
	    scm_p_string_ci_greater_equalp, scm_p_string_ci_less_equalp,
	    scm_p_substring, scm_p_string_append, scm_p_string2list,
	    scm_p_list2string, scm_p_string_copy, scm_p_string_filld): Moved
	    from operations.c
	* sigscheme/src/operations.c
	  - (scm_p_charp, scm_p_char_equalp, scm_p_char_lessp,
	    scm_p_char_greaterp, scm_p_char_greaterp, scm_p_char_less_equalp,
	    scm_p_char_greater_equalp, scm_p_char_ci_equalp,
	    scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase, scm_p_stringp,
	    scm_p_make_string, scm_p_string, scm_p_string_length,
	    scm_p_string_ref, scm_p_string_setd, scm_p_stringequalp,
	    scm_p_string_ci_equalp, scm_p_string_greaterp, scm_p_string_lessp,
	    scm_p_string_greater_equalp, scm_p_string_less_equalp,
	    scm_p_string_ci_greaterp, scm_p_string_ci_lessp,
	    scm_p_string_ci_greater_equalp, scm_p_string_ci_less_equalp,
	    scm_p_substring, scm_p_string_append, scm_p_string2list,
	    scm_p_list2string, scm_p_string_copy, scm_p_string_filld): Move to
	    string.c
	* sigscheme/src/sigscheme.h
	  - Move prototype section
	* sigscheme/src/Makefile.am
	  - (R5RS_PROC_SOURCES): New variable
	  - (libsscm_la_SOURCES): Add string.c
	  - Follow the file reorganization
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (STRING_EQUALP): Moved from operations.c
	* sigscheme/src/operations.c
	  - (STRING_EQUALP): Move to sigschemeinternal.h
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-continuation.c
	* sigscheme/src/operations.c
	* sigscheme/src/storage-protection.c
	* sigscheme/src/storage-gc.c
	* sigscheme/src/storage-compact.h
	* sigscheme/src/operations-srfi38.c
	* sigscheme/src/operations-srfi1.c
	* sigscheme/src/operations-srfi2.c
	* sigscheme/src/storage-symbol.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/operations-srfi8.c
	* sigscheme/src/syntax.c
	* sigscheme/src/operations-srfi23.c
	* sigscheme/src/operations-srfi60.c
	  - Trim comment decorations at column 77 by following scripts
	    perl -i -pe 's/^(.{70})=+\s*$/\1=======\n/' *.[ch]
	    perl -i -pe 's/^(.{70})=+\*\/\s*$/\1=====*\/\n/' *.[ch]
	
2006-01-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-map.scm
	* sigscheme/test/test-apply.scm
	* sigscheme/test/test-delay-force.scm
	  - Insert license header
	* sigscheme/src/config.h
	* sigscheme/src/encoding.c
	* sigscheme/src/env.c
	* sigscheme/src/error.c
	* sigscheme/src/eval.c
	* sigscheme/src/io.c
	* sigscheme/src/main.c
	* sigscheme/src/operations-siod.c
	* sigscheme/src/operations-srfi1.c
	* sigscheme/src/operations-srfi2.c
	* sigscheme/src/operations-srfi6.c
	* sigscheme/src/operations.c
	* sigscheme/src/read.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/storage-compact.h
	* sigscheme/src/storage-continuation.c
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/storage-gc.c
	* sigscheme/src/storage-symbol.c
	* sigscheme/src/storage.c
	* sigscheme/src/syntax.c
	* sigscheme/src/test-compact.c
	* sigscheme/src/write.c
	* sigscheme/src/script/build_func_table.rb
	* sigscheme/src/script/check_declare_func_typo.rb
	* sigscheme/src/script/check_initialize_scm_null.rb
	* sigscheme/experimental/imm-const/imm-test.c
	  - Refill license header with fill-column 79
	* sigscheme/TODO
	  - Update
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/main.c
	  - (repl_loop): Fix broken evaluation. Sexps are now evaluated in
	    top-level
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-list.scm
	  - Add tests for set-car! and set-cdr!
	* sigscheme/src/operations-srfi1.c
	  - (scm_p_srfi1_list_copy): Cause error
	* sigscheme/NEWS
	* sigscheme/TODO
	* sigscheme/doc/spec.txt
	* sigscheme/README
	  - Update
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	* sigscheme/test/test-list.scm
	* sigscheme/test/test-srfi2.scm
	* sigscheme/test/test-srfi38.scm
	  - Fix constant list mutation
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (qquote_internal):
	    * Add form check for quasiquote, unquote and unquote-splicing
	    * Simplify by depending on the "minimum mercy" policy
	* sigscheme/test/test-quote.scm
	  - Add tests for quasiquote
	* sigscheme/TODO
	  - Update
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (enum _tr_msg): Rename TR_MSG_GET_OBJ to TR_MSG_GET_ELM to
	    indicate its role
	  - (TRL_GET_OBJ, TRL_GET_ELM): Rename TRL_GET_OBJ to TRL_GET_ELM
	  - (TRV_GET_OBJ, TRV_GET_ELM): Rename TRV_GET_OBJ to TRV_GET_ELM
	  - (TR_GET_OBJ, TR_GET_ELM): Rename TR_GET_OBJ to TR_GET_ELM
	  - (listran, vectran, qquote_internal): Follow the renamings
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemefunctable.h
	  - Add lacking extern "C" decl
	  - (REGISTER_FUNC_TABLE, SCM_REGISTER_FUNC_TABLE): Rename
	    REGISTER_FUNC_TABLE to SCM_REGISTER_FUNC_TABLE for future user
	    extension
	  - (struct builtin_func_info, struct scm_func_registration_info):
	    Rename struct builtin_func_info to struct
	    scm_func_registration_info for future user extension
	  - (scm_error_func_info_table): Remove #if SCM_USE_NONSTD_FEATURES
	  - (scm_new_srfi34_func_info_table, scm_srfi34_func_info_table):
	    Rename scm_new_srfi34_func_info_table to scm_srfi34_func_info_table
	  - (r5rs_syntax_func_info_table, r5rs_procedure_func_info_table,
	    r5rs_deepcadrs_func_info_table, nonstd_func_info_table,
	    srfi1_func_info_table, srfi2_func_info_table,
	    srfi6_func_info_table, srfi8_func_info_table,
	    srfi23_func_info_table, srfi38_func_info_table,
	    srfi60_func_info_table, siod_func_info_table): Prepend 'scm_'
	    prefix to fix namespace pollution of global symbols
	  - (scm_r5rs_syntax_func_info_table,
	    scm_r5rs_procedure_func_info_table,
	    scm_r5rs_deepcadrs_func_info_table, scm_nonstd_func_info_table,
	    scm_srfi1_func_info_table, scm_srfi2_func_info_table,
	    scm_srfi6_func_info_table, scm_srfi8_func_info_table,
	    scm_srfi23_func_info_table, scm_srfi38_func_info_table,
	    scm_srfi60_func_info_table, scm_siod_func_info_table): Renamed
	    from above
	* sigscheme/src/Makefile.am
	  - Follow the renamings in the rules for sigschemefunctable-*.c
	* sigscheme/src/script/build_func_table.rb
	  - (print_tableheader): Follow the renaming of struct
	    builtin_func_info
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Follow the renamings
	* sigscheme/src/error.c
	  - (scm_init_error): Ditto
	* sigscheme/src/syntax.c
	  - (scm_init_syntax): Ditto
	* sigscheme/src/operations-nonstd.c
	  - (scm_initialize_nonstd_features): Ditto
	* sigscheme/src/operations-siod.c
	  - (scm_initialize_siod): Ditto
	* sigscheme/src/operations-srfi1.c
	  - (scm_initialize_srfi1): Ditto
	* sigscheme/src/operations-srfi2.c
	  - (scm_initialize_srfi2): Ditto
	* sigscheme/src/operations-srfi6.c
	  - (scm_initialize_srfi6): Ditto
	* sigscheme/src/operations-srfi8.c
	  - (scm_initialize_srfi8): Ditto
	* sigscheme/src/operations-srfi23.c
	  - (scm_initialize_srfi23): Ditto
	* sigscheme/src/operations-srfi34.c
	  - (scm_initialize_srfi34): Ditto
	* sigscheme/src/operations-srfi38.c
	  - (scm_initialize_srfi38): Ditto
	* sigscheme/src/operations-srfi60.c
	  - (scm_initialize_srfi60): 
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/main.c
	  - (repl_loop): Fix broken codes for !SCM_USE_SRFI34
	
2006-01-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (ERRMSG_BAD_SPLICE_LIST, REPLACED_INDEX, SPLICED_INDEX): New macro
	  - (listran, vectran):
	    * Simplify
	    * Make efficient
	  - (qquote_internal):
	    * Fix unsafe side-effective macro arg
	    * Add lacking validation for result of unquote-splicing
	  - (scm_s_quasiquote): Make top-level unquote-splicing error even if
	    !SCM_STRICT_R5RS
	  - (scm_s_unquote, scm_s_unquote_splicing): Trivial change
	* sigscheme/test/test-quote.scm
	  - Insert license header
	  - Add various tests for quasiquote
	* sigscheme/TODO
	  - Update
	
2006-01-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_USE_SRFI1):
	    * Disable by default
	    * Mark broken
	* sigscheme/src/operations-srfi1.c
	  - (scm_p_srfi1_list_copy):
	    * Mark broken
	    * Comment out the code
	
2006-01-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_STRICT_VECTOR_FORM, SCM_CONST_VECTOR_LITERAL): Enable by
	    default
	  - (SCM_CONST_LIST_LITERAL): New macro
	* sigscheme/src/sigscheme.h
	  - (SCM_IMMUTABLE_CONS, SCM_HAS_IMMUTABLE_CONS,
	    SCM_HAS_IMMUTABLE_STRING, SCM_HAS_IMMUTABLE_VECTOR,
	    SCM_MAKE_IMMUTABLE_CONS, SCM_CONS_MUTABLEP, SCM_CONS_SET_MUTABLE,
	    SCM_CONS_SET_IMMUTABLE): New macro
	* sigscheme/src/sigschemeinternal.h
	  - (IMMUTABLE_CONS, MAKE_IMMUTABLE_CONS, ENSURE_MUTABLE_CONS,
	    SCM_QUEUE_CONST_ADD): New macro
	* sigscheme/src/storage-fatty.h
	  - (SCM_SAL_HAS_IMMUTABLE_CONS, SCM_SAL_HAS_IMMUTABLE_STRING,
	    SCM_SAL_HAS_IMMUTABLE_VECTOR, SCM_SAL_MAKE_IMMUTABLE_CONS,
	    SCM_SAL_CONS_MUTABLEP, SCM_SAL_CONS_SET_MUTABLE,
	    SCM_SAL_CONS_SET_IMMUTABLE): New macro
	  - (scm_make_immutable_cons): New function decl
	* sigscheme/src/storage-compact.h
	  - (SCM_SAL_HAS_IMMUTABLE_CONS, SCM_SAL_HAS_IMMUTABLE_STRING,
	    SCM_SAL_HAS_IMMUTABLE_VECTOR, SCM_SAL_MAKE_IMMUTABLE_CONS,
	    SCM_SAL_MAKE_IMMUTABLE_VECTOR, SCM_SAL_CONS_MUTABLEP,
	    SCM_SAL_CONS_SET_MUTABLE, SCM_SAL_CONS_SET_IMMUTABLE): New macro
	  - (scm_make_immutable_cons, scm_make_immutable_vector): New function
	    decl
	* sigscheme/src/storage.c
	  - (scm_make_cons): Support constant list
	  - (scm_make_immutable_cons): New function
	* sigscheme/src/read.c
	  - (read_list): Support constant list
	* sigscheme/src/operations.c
	  - (scm_p_set_card, scm_p_set_cdrd): Ditto
	* sigscheme/src/operations-srfi1.c
	  - (scm_p_srfi1_taked, scm_p_srfi1_drop_rightd): Ditto
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal):
	    * Provide "const-list-literal" if SCM_CONST_LIST_LITERAL
	    * Provide "const-vector-literal" only if SCM_HAS_IMMUTABLE_VECTOR
	
2006-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_CONST_VECTOR_LITERAL): New macro
	* sigscheme/src/sigscheme.h
	  - (SCM_MAKE_IMMUTABLE_VECTOR, SCM_VECTOR_MUTABLEP,
	    SCM_VECTOR_SET_MUTABLE, SCM_VECTOR_SET_IMMUTABLE): New macro
	* sigscheme/src/sigschemeinternal.h
	  - (MAKE_IMMUTABLE_VECTOR, ENSURE_MUTABLE_VECTOR): New macro
	* sigscheme/src/storage-fatty.h
	  - (SCM_SAL_MAKE_IMMUTABLE_VECTOR, SCM_SAL_VECTOR_MUTABLEP,
	    SCM_SAL_VECTOR_SET_MUTABLE, SCM_SAL_VECTOR_SET_IMMUTABLE): New
	    macro
	  - (scm_make_immutable_vector): New function decl
	* sigscheme/src/storage.c
	  - (scm_make_immutable_vector): New function
	  - (scm_make_vector): Support constant vector literal
	* sigscheme/src/read.c
	  - (read_sexpression): Ditto
	* sigscheme/src/operations.c
	  - (scm_p_vector_setd, scm_p_vector_filld): Ditto
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Provide const-vector-literal when
	    SCM_CONST_VECTOR_LITERAL
	* sigscheme/test/test-vector.scm
	  - Add tests for const vector literal
	* sigscheme/doc/spec.txt
	  - Update "Constant vector" and "Quote-less vector literal"
	* sigscheme/NEWS
	  - Update
	
2006-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-fatty.h
	  - (struct ScmCell_):
	    * Change type of 'gcmark' to char
	    * Add 'immutable'
	  - (SCM_MUTABLEP, SCM_SET_MUTABLE, SCM_SET_IMMUTABLE): New macro
	  - (SCM_INT_MSB, SCM_STRING_MUTABILITY_MASK, SCM_STRING_MUTABLE):
	    Removed
	  - (SCM_SAL_STRING_LEN, SCM_SAL_STRING_SET_LEN,
	    SCM_SAL_STRING_MUTABLEP, SCM_SAL_STRING_SET_MUTABLE,
	    SCM_SAL_STRING_SET_IMMUTABLE): Simplify with new mutability macros
	* sigscheme/src/storage-compact.h
	  - Copy the old implementation of string mutability from
	    storage-fatty.h for reference
	
2006-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (ENSURE_MUTABLE, ENSURE_MUTABLE_STRING): Rename ENSURE_MUTABLE to
	    ENSURE_MUTABLE_STRING
	* sigscheme/src/operations.c
	  - (scm_p_string_setd, scm_p_string_filld): Follow the renaming
	
2006-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - (SCM_STRICT_NULL_FORM, SCM_STRICT_VECTOR_FORM): New macro
	  - Add dependency resolution for SCM_STRICT_R5RS
	* sigscheme/src/eval.c
	  - (scm_eval):
	    * Add #() rejection for SCM_STRICT_VECTOR_FORM
	    * Replace SCM_STRICT_R5RS for () rejection with
	      SCM_STRICT_NULL_FORM
	
2006-01-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/eval.c
	  - (scm_eval): Simplify and make efficient
	
2006-01-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/operations.c
	  - (scm_p_string_less_equalp, scm_p_string_ci_less_equalp): Fix typo
	    of procedure name
	* sigscheme/test/test-string-cmp.scm
	  - New file
	  - Add tests for string comparators
	  - Add tests for string mutability acceptance of the comparators
	  - All tests are passed
	* sigscheme/NEWS
	  - Describe compretion of R5RS string procedures
	
2006-01-23 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/src/alloc.c (scm_malloc_aligned) : Use malloc()
	  for Mac OS X since it is guaranteed to be 16 bytes aligned.
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/read.c
	  - (scm_special_char_table): Remove unneeded "Space" entry
	  - (read_char): Fix case-sensitivity of named chars
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add check for snprintf
	  - Cosmetic change
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config-nonstd-string.h
	  - Moved HAVE_STRDUP handling from alloc.c
	* sigscheme/src/alloc.c
	  - Move HAVE_STRDUP handling to config-nonstd-string.h
	  - Include config-nonstd-string.h
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (NUMBERP): New macro
	* sigscheme/src/sigscheme.h
	  - (scm_p_integerp): New function decl
	* sigscheme/src/operations.c
	  - (scm_p_numberp): Make number objects other than integer acceptable
	  - (scm_p_integerp): New function
	* sigscheme/src/sigscheme.c
	  - (scm_initialize_internal): Remove the alias definition for integer?
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-char-cmp.scm
	  - Add description about case-insensitive comparison
	  - Add tests for #\_ for case-insensitive comparison between
	    alphabetic and non-alphabetic char.
	  - Add tests for case-insensitive predicates
	* sigscheme/src/operations.c
	  - Add description about case-insensitive comparison
	  - (ICHAR_FOLDCASE): New macro
	  - (CHAR_CI_CMP_BODY, string_cmp): Replace ICHAR_DOWNCASE() with
	    ICHAR_FOLDCASE() to indicate explicit intention
	* sigscheme/doc/spec.txt
	  - Add description about case-insensitive comparison
	
	* sigscheme/test/unittest.scm
	  - (report-error): Change the message for failed test to 'failed'
	    from 'error' to avoid misrecognition between real error and failed
	    test
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-char-cmp.scm
	  - New file
	  - Add character tests for comparators
	* sigscheme/NEWS
	  - Describe compretion of R5RS character procedures
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add strcasecmp to AC_CHECK_FUNCS
	* sigscheme/src/config-nonstd-string.h
	  - New file
	* sigscheme/src/operations.c
	  - Include config-nonstd-string.h
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_string_ci_equalp, scm_p_string_greaterp,
	    scm_p_string_lessp, scm_p_string_greater_equalp,
	    scm_p_string_less_equalp, scm_p_string_ci_greaterp,
	    scm_p_string_ci_lessp, scm_p_string_ci_greater_equalp,
	    scm_p_string_ci_less_equalp): New function decl
	* sigscheme/src/operations.c
	  - (STRING_CMP, STRING_CI_CMP): New macro
	  - (scm_p_string_ci_equalp, scm_p_string_greaterp,
	    scm_p_string_lessp, scm_p_string_greater_equalp,
	    scm_p_string_less_equalp, scm_p_string_ci_greaterp,
	    scm_p_string_ci_lessp, scm_p_string_ci_greater_equalp,
	    scm_p_string_ci_less_equalp): New function
	  - (strcasecmp, string_cmp): New static function
	* sigscheme/doc/spec.txt
	  - Update
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/operations.c
	  - (ICHAR_DOWNCASE, ICHAR_UPCASE): Cast explicitly
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_charequalp, scm_p_char_equalp): Rename scm_p_charequalp to
	    scm_p_char_equalp
	* sigscheme/src/operations.c
	  - (scm_p_charequalp, scm_p_char_equalp): Ditto
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_p_char_lessp, scm_p_char_greaterp, scm_p_char_greaterp,
	    scm_p_char_less_equalp, scm_p_char_greater_equalp,
	    scm_p_char_ci_equalp, scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp): New function
	* sigscheme/src/operations.c
	  - (ICHAR_DOWNCASE, ICHAR_UPCASE, CHAR_CMP_BODY, CHAR_CI_CMP_BODY):
	    New macro
	  - (scm_p_char_lessp, scm_p_char_greaterp, scm_p_char_greaterp,
	    scm_p_char_less_equalp, scm_p_char_greater_equalp,
	    scm_p_char_ci_equalp, scm_p_char_ci_lessp, scm_p_char_ci_greaterp,
	    scm_p_char_ci_less_equalp, scm_p_char_ci_greater_equalp): New function
	  - (scm_p_char_upcase, scm_p_char_downcase): Simplify with new macro
	* sigscheme/doc/spec.txt
	  - Update
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.c
	  - (scm_interpret_argv): Simplify error printing
	
2006-01-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/mbcport.c
	  - (mbcport_put_char): Cosmetic change
	* sigscheme/src/io.c
	  - (parse_script_prelude): Ditto
	* sigscheme/src/encoding.c
	  - (eucjp_char_len, euc_char_len, utf8_char_len, sjis_char_len): Ditto
	
2006-01-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/write.c
	  - (hash_lookup): Replace 'unsigned' with 'hashval_t' to suppress
	    warning on LP64, and proper meaning
	
	* sigscheme/src/syntax.c
	  - (TR_ENDP, listran, vectran): Remove unsafe capability assumption
	    between ScmObj and a C boolean expression, which cause warning on
	    LP64
	
2006-01-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_lib_glibc.m4
	  - (AX_LIB_GLIBC): Fix broken expressions
	
	* sigscheme/src/operations.c
	  - Include config-asprintf.h as workaround
	
2006-01-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Add strdup to AC_CHECK_FUNCS
	* sigscheme/src/alloc.c
	  - Define _XOPEN_SOURCE if HAVE_STRDUP
	  - (scm_strdup): Add replace code for strdup(3)
	
2006-01-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/ax_lib_glibc.m4
	  - New file
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add ax_lib_glibc.m4
	* sigscheme/configure.in
	  - Add AX_LIB_GLIBC
	* sigscheme/src/config-asprintf.h
	  - New file
	  - Define _GNU_SOURCE if glibc
	* sigscheme/src/error.c
	* sigscheme/src/strport.c
	  - Include config-asprintf.h
	* sigscheme/src/Makefile.am
	  - (libsscm_la_SOURCES): Add config-asprintf.h
	
2006-01-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/alloc.c
	  - (_POSIX_C_SOURCE): Newly defined for posix_memalign(3)
	
2006-01-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/c_template
	* sigscheme/src/h_template
	  - Update
	
2006-01-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/config.h
	  - Exclude my-stdint.h
	  - (SCM_FULLY_ADDRESSABLEP): Move to sigscheme.h
	  - (SCM_DEFAULT_N_HEAPS_MAX):
	    * Undef
	    * Move the code to sigscheme.h
	* sigscheme/src/sigscheme.h
	  - (SCM_FULLY_ADDRESSABLEP, SCM_DEFAULT_N_HEAPS_MAX): Moved from
	    config.h
	
2006-01-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/operations.c
	  - (scm_p_number2string): Fix broken 64-bit handling
	
2006-01-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/NEWS
	  - New file
	  - Describe major changes from 0.5.0-alpha
	
	* sigscheme/TODO
	  - Update
	
2006-01-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	  - Uncomment AC_CHECK_SIZEOF(int_fast32_t)
	* sigscheme/src/sigscheme.h
	  - (scm_ichar_t): Change to int_fast32_t
	  - (SIZEOF_SCM_ICHAR_T, SCM_ICHAR_T_MAX, SCM_ICHAR_T_MIN): Follow the
	    change
	
2006-01-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add ax_create_stdint_h.m4
	* sigscheme/m4/ax_create_stdint_h.m4
	  - New file from the autoconf macro archive
	* sigscheme/configure.in
	  - Remove stdint.h from AC_CHECK_HEADERS
	  - Add AX_CREATE_STDINT_H(src/my-stdint.h)
	* sigscheme/src/config.h
	* sigscheme/src/baseport.h
	* sigscheme/src/encoding.h
	* sigscheme/src/storage-gc.c
	* sigscheme/src/storage-compact.h
	* sigscheme/src/storage-symbol.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/write.c
	* sigscheme/src/alloc.c
	  - Replace <stdint.h> with "my-stdint.h"
	* sigscheme/TODO
	  - Update
	
2006-01-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/m4/Makefile.am
	  - (EXTRA_DIST): Add ax_c___attribute__.m4
	* sigscheme/m4/ax_c___attribute__.m4
	  - New file from the autoconf macro archive
	* sigscheme/configure.in
	  - Add AX_C___ATTRIBUTE__
	* sigscheme/src/sigscheme.h
	  - (SCM_NOINLINE, SCM_NORETURN): Enable by HAVE___ATTRIBUTE__ instead
	    of __GNUC__
	
2006-01-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/autogen.sh
	  - Add '-I m4' to aclocal
	* sigscheme/Makefile.am
	  - (SUBDIRS): Add m4
	* sigscheme/m4/Makefile.am
	  - New file
	  - (EXTRA_DIST):
	    * New variable
	    * Add ax_check_page_aligned_malloc.m4
	* sigscheme/m4/ax_check_page_aligned_malloc.m4
	  - New file from the autoconf macro archive
	* sigscheme/configure.in
	  - Add check for unistd.h and getpagesize
	  - Add AX_CHECK_PAGE_ALIGNED_MALLOC
	  - Add m4/Makefile to AC_CONFIG_FILES
	* sigscheme/src/alloc.c
	  - Include config.h
	  - Include unistd.h if HAVE_GETPAGESIZE
	  - (scm_malloc_aligned): Add size check for page-aligned malloc(3)
	
2006-01-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - Modify a comment
	* sigscheme/doc/spec.txt
	  - Update
	
2006-01-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make SigScheme 64bit-ready with storage-fatty. But no
	  tests on actual 64-bit environment is performed, and storage-compact
	  is not supported yet.
	
	* sigscheme/configure.in
	  - Add some AC_C_* macros
	  - Comment out currently unused macros
	* sigscheme/src/sigscheme.h
	  - Add description about 64-bit support
	  - (SCM_LISTLEN_CIRCULARP, struct ScmStorageConf_,
	    scm_port_put_char): Support 64bit models
	  - (scm_bool, scm_false, scm_true): Prevent redefinition by
	    SCM_BOOL_DEFINED
	  - (SCM_BOOL_DEFINED, SCM_INT_T_MAX, SCM_INT_T_MIN, SCM_UINT_T_MAX,
	    SCM_INT_T_MAX, SCM_INT_T_MIN, SCM_UINT_T_MAX, SCM_INT_T_MAX,
	    SCM_INT_T_MIN, SCM_UINT_T_MAX, SCM_INT_T_MAX, SCM_INT_T_MIN,
	    SCM_UINT_T_MAX, SCM_INT_T_FMT, SCM_ICHAR_T_DEFINED,
	    SCM_ICHAR_T_MAX, SCM_ICHAR_T_MIN, SCM_BYTE_T_DEFINED,
	    SCM_BYTE_T_MAX, SCM_BYTE_T_MIN, SCM_SIZE_T_FMT): New macro
	* sigscheme/src/sigschemeinternal.h
	  - (struct ScmSpecialCharInfo_): Replace int with scm_ichar_t
	  - (SCM_LISTLEN_ENCODE_CIRCULAR, ScmLBuf,
	    scm_valid_environment_extension_lengthp, scm_validate_formals,
	    scm_validate_actuals, scm_finite_length, scm_length): Support
	    64bit models
	* sigscheme/src/storage-fatty.h
	  - Add description about storage-fatty
	  - (struct ScmCell_):
	    * Add members attr, attr.strut, obj.strut to align against 64bit
	      primitives
	    * Move member 'type' into 'attr'
	    * Move member 'gctype' into 'attr' and change the type to scm_bool
	    * Change the type 'int' of 'obj.integer', 'obj.character',
	      'obj.string', 'obj.vector' and 'obj.continuation' to support
	      64bit models
	    * Reorder members in 'obj.function' and 'obj.port' for performance
	  - (SCM_SAL_TYPE, SCM_ENTYPE, SCM_SAL_IS_MARKED, SCM_SAL_DO_MARK,
	    SCM_SAL_DO_UNMARK): Follow the change of struct ScmCell_
	  - (SCM_SAL_CHAR_BITS, SCM_SAL_CHAR_MAX, SCM_SAL_INT_BITS,
	    SCM_SAL_INT_MAX, SCM_SAL_INT_MIN, scm_make_int, scm_make_char,
	    scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying, scm_make_vector,
	    SCM_INT_MSB, SCM_SAL_STRING_LEN, SCM_SAL_STRING_SET_LEN,
	    SCM_SAL_STRING_SET_MUTABLE, SCM_SAL_STRING_SET_IMMUTABLE): Support
	    64bit models
	* sigscheme/src/storage-compact.h
	  - Add FIXME comment about 64bit support
	  - (scm_make_int, scm_make_char, scm_make_immutable_string,
	    scm_make_immutable_string_copying, scm_make_string,
	    scm_make_string_copying, scm_make_vector): Support 64bit models
	* sigscheme/src/alloc.c
	  - (ALIGN_CELL): New macro
	  - (scm_malloc_aligned):
	    * Support 64bit models by replacing fixed-size alignment with
	      sizeof(ScmCell)
	    * Simplify
	    * Add alignment assertion for scm_malloc()
	* sigscheme/src/storage.c
	  - (scm_make_int, scm_make_char, scm_make_string_internal,
	    scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying, scm_make_vector,
	    scm_type): Support 64bit models
	* sigscheme/src/storage-symbol.c
	  - (scm_intern): Support 64bit models
	  - (symbol_name_hash):
	    * Ditto
	    * Fix broken hash value calculation for non-ASCII byte
	* sigscheme/src/storage-gc.c
	  - (N_REGS_IN_JMP_BUF, SCMOBJ_ALIGNEDP): New macro
	  - (n_heaps, n_heaps_max): Change to size_t to support 64bit models
	  - (scm_gc_protect_stack_internal, initialize_heap, finalize_heap,
	    mark_obj, mark_obj, within_heapp, gc_mark_locations_n,
	    gc_mark_definite_locations_n, gc_mark_locations, gc_sweep):
	    Support 64bit models
	  - (gc_mark):
	    * Ditto
	    * Make efficient
	* sigscheme/src/env.c
	  - (scm_valid_environment_extensionp,
	    scm_valid_environment_extension_lengthp, scm_validate_formals,
	    scm_validate_actuals): Support 64bit models
	* sigscheme/src/eval.c
	  - (call_closure, call, map_eval): Support 64bit models
	* sigscheme/src/syntax.c
	  - (struct _vector_translator, vectran, qquote_internal): Support
	    64bit models
	* sigscheme/src/operations.c
	  - (list_tail, scm_p_equalp, scm_p_add, scm_p_multiply,
	    scm_p_subtract, scm_p_divide, scm_p_abs, scm_p_quotient,
	    scm_p_modulo, scm_p_remainder, scm_p_number2string,
	    scm_p_string2number, scm_finite_length, scm_length, scm_p_length,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_integer2char, scm_p_char_upcase,
	    scm_p_char_downcase, scm_p_make_string, scm_p_string_length,
	    scm_p_string_ref, scm_p_string_setd, scm_p_substring,
	    scm_p_string_append, scm_p_string2list, scm_p_list2string,
	    scm_p_string_filld, scm_p_make_vector, scm_p_vector_ref,
	    scm_p_vector_setd, scm_p_vector2list, scm_p_list2vector,
	    scm_p_vector_filld): Support 64bit models
	* sigscheme/src/operations-nonstd.c
	  - (scm_p_lengthstar): Support 64bit models
	* sigscheme/src/operations-siod.c
	  - (scm_set_verbose_level): Support 64bit models
	* sigscheme/src/operations-srfi1.c
	  - (scm_p_srfi1_make_list, scm_p_srfi1_list_tabulate,
	    scm_p_srfi1_iota, scm_p_srfi1_null_listp, scm_p_srfi1_take,
	    scm_p_srfi1_drop, scm_p_srfi1_take_right, scm_p_srfi1_drop_right,
	    scm_p_srfi1_taked, scm_p_srfi1_drop_rightd,
	    scm_p_srfi1_lengthplus): Support 64bit models
	* sigscheme/src/operations-srfi6.c
	  - (scm_p_srfi6_get_output_string): Support 64bit models
	* sigscheme/src/operations-srfi8.c
	  - (scm_s_srfi8_receive): Support 64bit models
	* sigscheme/src/operations-srfi60.c
	  - (BITWISE_OPERATION_BODY, scm_p_srfi60_bitwise_if): Support 64bit models
	* sigscheme/src/io.c
	  - (scm_port_put_char, scm_p_close_input_port,
	    scm_p_close_output_port, scm_p_read_char, scm_p_peek_char,
	    find_path): Support 64bit models
	* sigscheme/src/read.c
	  - (TOKEN_BUF_EXCEEDED): Fix possible mis-association of the minus
	    operator
	  - (INT_LITERAL_LEN_MAX): Simplify with SCM_INT_BITS
	  - (skip_comment_and_space, read_list, parse_unicode_sequence,
	    read_unicode_sequence, read_sequence, read_token,
	    read_sexpression, read_char, read_string, read_number_or_symbol,
	    parse_number): Support 64bit models
	* sigscheme/src/write.c
	  - (write_obj, write_char, write_string, write_list, write_vector):
	    Support 64bit models
	* sigscheme/src/encoding.h
	  - (scm_bool, scm_false, scm_true): Prevent redefinition by
	    SCM_BOOL_DEFINED
	  - (scm_ichar_t, scm_byte_t): New type
	  - (SCM_BOOL_DEFINED, SIZEOF_SCM_ICHAR_T, SCM_ICHAR_T_MAX,
	    SCM_ICHAR_T_MIN, SCM_ICHAR_T_DEFINED, SIZEOF_SCM_BYTE_T): New
	    macro
	  - (ScmMultibyteCharInfo, ScmMultibyteString): Support 64bit models
	  - (ScmCharCodecMethod_char_len, ScmCharCodecMethod_str2int,
	    ScmCharCodecMethod_int2str, scm_mb_strlen, scm_mb_bare_c_strlen,
	    scm_mb_substring, scm_charcodec_read_char): Support 64bit models
	* sigscheme/src/encoding.c
	  - (uint): Removed
	  - (scm_mb_strlen, scm_mb_bare_c_strlen, scm_mb_substring,
	    scm_charcodec_read_char, IS_ASCII, IS_1BYTE, IS_2BYTES, IS_3BYTES,
	    eucjp_char_len, eucjp_scan_char, eucjp_str2int, eucjp_int2str,
	    dbc_str2int, euc_char_len, euc_int2str, euccn_scan_char,
	    euckr_scan_char, IN_OCT_BMP, IN_BMP, IN_SMP, utf8_char_len,
	    utf8_scan_char, utf8_str2int, utf8_int2str, sjis_char_len,
	    sjis_scan_char, sjis_int2str, unibyte_char_len, unibyte_str2int,
	    unibyte_int2str): Support 64bit models
	* sigscheme/src/baseport.h
	  - (scm_bool, scm_false, scm_true): Prevent redefinition by
	    SCM_BOOL_DEFINED
	  - (scm_ichar_t, scm_byte_t): New type
	  - (SCM_BOOL_DEFINED, SIZEOF_SCM_ICHAR_T, SCM_ICHAR_T_MAX,
	    SCM_ICHAR_T_MIN, SCM_ICHAR_T_DEFINED, SIZEOF_SCM_BYTE_T): New
	    macro
	  - (ScmCharPortMethod_get_char, ScmCharPortMethod_peek_char,
	    ScmCharPortMethod_put_char, ScmBytePortMethod_get_byte,
	    ScmBytePortMethod_peek_byte): Replace int with scm_ichar_t to make
	    64bit execution efficient
	* sigscheme/src/nullport.c
	  - (nullport_get_byte, nullport_peek_byte): Replace int with
	    scm_ichar_t to make 64bit execution efficient
	* sigscheme/src/fileport.c
	  - (fileport_get_byte, fileport_peek_byte): Replace int with
	    scm_ichar_t to make 64bit execution efficient
	* sigscheme/src/strport.c
	  - (istrport_get_byte, istrport_peek_byte, ostrport_get_byte,
	    ostrport_peek_byte): Replace int with scm_ichar_t to make 64bit
	    execution efficient
	* sigscheme/src/basecport.c
	  - (basecport_get_char, basecport_peek_char, basecport_put_char):
	    Replace int with scm_ichar_t to make 64bit execution efficient
	* sigscheme/src/sbcport.c
	  - (sbcport_put_char): Replace int with scm_ichar_t to make 64bit
	    execution efficient
	* sigscheme/src/mbcport.h
	  - (SCM_MB_MAX_LEN): Removed to use the one defined in encoding.h
	* sigscheme/src/mbcport.c
	  - (uchar): Removed
	  - (struct ScmMultiByteCharPort_): Replace uchar with scm_byte_t
	  - (mbcport_get_char, mbcport_peek_char, mbcport_put_char): Replace
	    int with scm_ichar_t to make 64bit execution efficient
	  - (mbcport_fill_rbuf): Follow the changes
	* sigscheme/TODO
	  - Update
	
2006-01-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/mbcport.h
	* sigscheme/src/sbcport.h
	* sigscheme/src/baseport.h
	* sigscheme/src/nullport.h
	* sigscheme/src/encoding.h
	* sigscheme/src/strport.h
	* sigscheme/src/fileport.h
	  - Add lacking 'extern "C"' enclosure
	
2006-01-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add abstract primitive types to make 64bit platforms
	  capable. Please let me know your opinion about this organization and
	  names. I'll start rewriting all codes soon after this commit.
	
	* sigscheme/configure.in
	  - Add AC_CHECK_SIZEOF for primitives and stdint types
	* sigscheme/src/config.h
	  - (SCM_USE_64BIT_FIXNUM, SCM_USE_32BIT_FIXNUM, SCM_USE_INT_FIXNUM,
	    SCM_USE_LONG_FIXNUM, SCM_USE_64BIT_SCMREF, SCM_USE_32BIT_SCMREF,
	    SCM_USE_INTPTR_SCMREF): New macro
	* sigscheme/src/encoding.h
	  - (SCM_HAS_2OCT_WCHAR, SCM_HAS_4OCT_WCHAR): New macro
	* sigscheme/src/sigscheme.h
	  - Include stdint.h
	  - (scm_int_t, scm_uint_t, scm_intref_t, scm_uintref_t, scm_intobj_t,
	    scm_uintobj_t, scm_ichar_t, scm_byte_t, scm_wchar_t): New type
	  - (SIZEOF_SCM_INT_T, SIZEOF_SCM_UINT_T, SCM_USE_LONG_FIXNUM,
	    SIZEOF_SCM_INTREF_T, SIZEOF_SCM_UINTREF_T, SCM_USE_INTPTR_SCMREF,
	    SIZEOF_SCM_INTOBJ_T, SIZEOF_SCM_UINTOBJ_T, SIZEOF_SCM_ICHAR_T,
	    SIZEOF_SCM_BYTE_T, SIZEOF_SCM_WCHAR_T): New macro
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (scm_strdup): New function decl
	* sigscheme/src/alloc.c
	  - (scm_strdup): New function
	* sigscheme/src/io.c
	  - (find_path, parse_script_prelude): Replace strdup() with
	    scm_strdup()
	* sigscheme/src/nullport.c
	  - (nullport_inspect): Ditto
	* sigscheme/src/storage.c
	  - (scm_make_immutable_string_copying, scm_make_string_copying): Ditto
	* sigscheme/src/storage-symbol.c
	  - (scm_intern): Ditto
	* sigscheme/src/operations-srfi6.c
	  - (scm_p_srfi6_get_output_string): Ditto
	* sigscheme/src/strport.c
	  - (ScmInputStrPort_new_copying, istrport_inspect, ostrport_inspect):
	    Ditto
	* sigscheme/src/fileport.c
	  - (fileport_new_internal, fileport_inspect): Ditto
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit conclude support for the proper internal
	  definitions. All known specifications are implemented and validated
	  by test-define.scm. Please let me know if you have found something
	  wrong.
	
	* sigscheme/src/syntax.c
	  - Add description of valid placement for definitions
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (filter_definitions): Enclose prototype decl into
	    SCM_STRICT_DEFINE_PLACEMENT
	  - (scm_s_do): Fix assertion failure caused by mismatched actuals
	    number from invalid internal definitions when
	    !SCM_STRICT_DEFINE_PLACEMENT
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (scm_s_let): Fix deprecated use of define_internal()
	* sigscheme/test/test-exp.scm
	  - Cosmetic change
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (sym_begin): New static variable
	  - (scm_init_syntax): Add initialization for sym_begin
	  - (filter_definitions): New static function
	  - (scm_s_body): Split off filter_definitions() and support 'begin'
	    properly
	* sigscheme/test/test-define.scm
	  - Fix broken tests
	  - Add tests for internal definition in 'begin'
	  - All tests are passed
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-define.scm
	  - Remove invalid tests
	  - Add tests for internal definition in 'begin'
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fix R5RS-incompatible internal definitions. But 'begin'
	  form still has an incompatibility
	
	* sigscheme/src/config.h
	  - (SCM_STRICT_DEFINE_PLACEMENT): New macro
	* sigscheme/src/sigschemeinternal.h
	  - (scm_toplevel_environmentp): New function decl
	* sigscheme/src/env.c
	  - (scm_toplevel_environmentp): New function
	* sigscheme/src/syntax.c
	  - (sym_define, syn_lambda, scm_init_syntax): Replace
	    SCM_STRICT_ARGCHECK with SCM_STRICT_DEFINE_PLACEMENT
	  - (scm_s_body):
	    * Ditto
	    * Simplify with strict define placement rule
	  - (define_internal):
	    * Replace NULLP() with scm_toplevel_environmentp()
	    * Cause an error if non-toplevel and SCM_STRICT_DEFINE_PLACEMENT
	* sigscheme/test/unittest.scm
	  - Fix R5RS-incompatible define placement
	* sigscheme/test/test-define.scm
	  - Fix and add tests for internal definition
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (ERRMSG_NON_BEGINNING_INTERNAL_DEFINITION): Removed
	  - (ERRMSG_BAD_DEFINE_PLACEMENT): New macro
	  - (scm_init_syntax): Fix lacking GC protection for syn_lambda
	  - (scm_s_body): Replace ERRMSG_NON_BEGINNING_INTERNAL_DEFINITION
	    with ERRMSG_BAD_DEFINE_PLACEMENT
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/eval.c
	  - (call): Simplify logic
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/eval.c
	  - (EVAL_ARGS, SUPPRESS_EVAL_ARGS): Removed
	  - (reduce, call_continuation, call_closure, call): Replace the arg
	    'suppress_eval' with 'need_eval'
	  - (scm_tailcall, scm_call, scm_eval, scm_p_apply): Follow the
	    changes
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (enum ScmReturnType): Rename to ScmValueType
	  - (enum ScmValueType):
	    * Renamed from ScmReturnType
	    * Rename SCM_RETTYPE_* to SCM_VALTYPE_*
	  - (struct ScmEvalState_, SCM_EVAL_STATE_INIT, SCM_EVAL_STATE_INIT1):
	    Follow the renaming
	* sigscheme/src/storage-continuation.c
	* sigscheme/src/operations-srfi34.c
	* sigscheme/src/operations-srfi2.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/operations-siod.c
	* sigscheme/src/syntax.c
	* sigscheme/src/eval.c
	  - Follow the renamings by
	    perl -i -pe 's/\bSCM_RETTYPE_/SCM_VALTYPE_/g' sigscheme/src/*.[ch]
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigscheme.h
	  - (SCM_EVAL_STATE_INIT, SCM_EVAL_STATE_INIT1, SCM_EVAL_STATE_INIT2):
	    New macro
	* sigscheme/src/eval.c
	  - (scm_call): Replace manual initialization of ScmEvalState with
	    SCM_EVAL_STATE_INIT2()
	* sigscheme/src/operations-srfi34.c
	  - (guard_handler_body, guard_body): Replace manual initialization of
	    ScmEvalState with SCM_EVAL_STATE_INIT1()
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fix warnings
	
	* sigscheme/src/sigscheme.h
	  - (SCM_ASSERT, SCM_ENSURE): Follow the change of scm_die()
	  - (scm_die): Change return type to void
	* sigscheme/src/error.c
	  - (scm_p_inspect_error): Suppress warning
	  - (scm_die): Change return type to void
	* sigscheme/src/read.c
	  - (read_list): Suppress warning
	  - (parse_unicode_sequence): Fix broken error detection
	  - (read_unicode_sequence): Simplify
	  - (parse_number): Rename a local variable
	* sigscheme/src/write.c
	  - (write_constant): Add false assertion
	* sigscheme/src/sigschemeinternal.h
	  - (LBUF_INIT, LBUF_FREE, LBUF_ALLOC, LBUF_REALLOC, LBUF_EXTEND):
	    Cast to void *
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/storage-symbol.c
	  - (scm_intern): Add validation for Unicode identifier but disabled
	    since it does not work yet
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_sym_else, scm_sym_yields, SYM_ELSE, SYM_YIELDS): Removed
	  - (scm_init_syntax): New function decl
	* sigscheme/src/sigscheme.c
	  - (scm_sym_else, scm_sym_yields): Move to syntax.c
	  - (scm_sym_define, scm_syn_lambda): Removed
	  - (scm_initialize_internal):
	    * Remove initialization for the variables
	    * Add scm_init_syntax() invocation
	    * Follow the renaming of r5rs_func_info_table
	* sigscheme/src/syntax.c
	  - (sym_else, sym_yields):
	    * Moved from sigscheme.c
	    * Make static
	    * Strip scm_ prefix
	  - (scm_sym_define): Rename to sym_define
	  - (scm_syn_lambda): Rename to syn_lambda
	  - (sym_define, syn_lambda):
	    * Renamed from scm_*
	    * Make static
	    * Strip scm_ prefix
	  - (scm_init_syntax): New function
	  - (scm_s_cond_internal, scm_s_body): Follow the renamings
	* sigscheme/src/main.c
	  - (repl_loop): Replace SYM_ELSE with scm_intern("else")
	* sigscheme/src/sigschemefunctable.h
	  - (r5rs_func_info_table, r5rs_procedure_func_info_table): Rename
	    r5rs_func_info_table to r5rs_procedure_func_info_table
	  - (r5rs_syntax_func_info_table): New variable decl
	* sigscheme/src/sigschemefunctable.c
	    * Remove sigschemefunctable-r5rs.c
	    * Add sigschemefunctable-r5rs-{syntax,procedure}.c
	* sigscheme/src/Makefile.am
	  - (FUNC_TABLES):
	    * Remove sigschemefunctable-r5rs.c
	    * Add sigschemefunctable-r5rs-{syntax,procedure}.c
	  - Add rule for sigschemefunctable-r5rs-{syntax,procedure}.c
	
2006-01-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-define.scm
	  - Add more tests for internal definitions
	
2006-01-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/README
	  - Modify an expression
	
2006-01-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/README
	  - Fix incorrect descriptions especially R5RS conformance
	  - Update features
	  - Modify some expressions
	
2006-01-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/src/syntax.c
	  - (scm_s_cond_internal): Fix an assertion
	
2006-01-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit add strict form validation for internal definitions
	
	* sigscheme/src/sigschemeinternal.h
	  - (scm_s_body): New function decl
	* sigscheme/src/syntax.c
	  - (ERRMSG_NON_BEGINNING_INTERNAL_DEFINITION): New macro
	  - (scm_sym_define, scm_syn_lambda): New variable
	  - (scm_s_body): New function
	  - (scm_s_let, scm_s_letstar, scm_s_letrec): Replace scm_s_begin()
	    with scm_s_body()
	  - (define_internal): Simplify
	* sigscheme/src/sigscheme.c
	  - (scm_sym_define, scm_syn_lambda): New extern decl
	  - (scm_initialize_internal): Add initialization for the variables
	* sigscheme/src/eval.c
	  - (call_closure): Replace scm_s_begin() with scm_s_body()
	* sigscheme/src/operations-srfi2.c
	  - (scm_s_srfi2_and_letstar): Ditto
	* sigscheme/src/operations-srfi8.c
	  - (scm_s_srfi8_receive): Ditto
	* sigscheme/src/operations-srfi34.c
	  - (guard_body): Ditto
	* sigscheme/test/test-define.scm
	  - Fix non-beginning internal definitions for lambda form
	
2006-01-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/runtest.sh
	* sigscheme/runtest-tail-rec.sh
	* sigscheme/runbench.sh
	  - (SSCM): New varaible
	  - Follow the recent directory reorganization
	
	* sigscheme/doc/design.txt
	  - Update
	
2006-01-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/configure.in
	* sigscheme/src/Makefile.am
	* sigscheme/Makefile.am
	* sigscheme/replace
	  - Revert r2905 to decline GPL'ed codes
	
2006-01-14 kzk <mover@hct.zaq.ne.jp>
	
	* add replace function for asprintf, vasprintf ported from
	  gnulib (http://www.gnu.org/software/gnulib/). please test
	  on the system which doesn't have asprintf or vasprintf.
	
	* sigscheme/configure.in
	  - add replace/Makefile.in
	* sigscheme/src/Makefile.am
	  - link libreplace.la with libsscm.la
	* sigscheme/Makefile.am
	  - add replace to SUBDIRS
	
	* sigscheme/replace/vasnprintf.h
	* sigscheme/replace/printf-parse.h
	* sigscheme/replace/vasprintf.h
	* sigscheme/replace/printf-args.h
	* sigscheme/replace/asprintf.c
	* sigscheme/replace/xsize.h
	* sigscheme/replace/Makefile.am
	* sigscheme/replace/vasnprintf.c
	* sigscheme/replace/printf-parse.c
	* sigscheme/replace/vasprintf.c
	* sigscheme/replace/printf-args.c
	  - new file ported from gnulib
	
	
2006-01-14 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/configure.in
	  - add check for 'ruby' command
	
2006-01-14 kzk <mover@hct.zaq.ne.jp>
	
	* Autotoolize
	
	* sigscheme/autogen.sh
	* sigscheme/Makefile.am
	* sigscheme/configure.in
	  - new file
	
	* sigscheme/README
	  - add ./configure process
	
	* sigscheme/storage-fatty.h
	* sigscheme/operations-r5rs-deepcadrs.c
	* sigscheme/mbcport.c
	* sigscheme/config.h
	* sigscheme/read.c
	* sigscheme/mbcport.h
	* sigscheme/sbcport.c
	* sigscheme/sbcport.h
	* sigscheme/basecport.c
	* sigscheme/baseport.h
	* sigscheme/encoding.c
	* sigscheme/storage-protection.c
	* sigscheme/error.c
	* sigscheme/encoding.h
	* sigscheme/operations-srfi34.c
	* sigscheme/c_template
	* sigscheme/scm_functype_mand_max15.diff
	* sigscheme/operations-srfi38.c
	* sigscheme/storage.c
	* sigscheme/operations-srfi2.c
	* sigscheme/operations-srfi6.c
	* sigscheme/operations-srfi8.c
	* sigscheme/strport.c
	* sigscheme/strport.h
	* sigscheme/write.c
	* sigscheme/operations-srfi60.c
	* sigscheme/sigschemefunctable.c
	* sigscheme/sigschemefunctable.h
	* sigscheme/h_template
	* sigscheme/io.c
	* sigscheme/sigschemeinternal.h
	* sigscheme/storage-continuation.c
	* sigscheme/nullport.c
	* sigscheme/operations.c
	* sigscheme/nullport.h
	* sigscheme/operations-nonstd.c
	* sigscheme/env.c
	* sigscheme/storage-gc.c
	* sigscheme/storage-compact.h
	* sigscheme/test-compact.c
	* sigscheme/operations-srfi1.c
	* sigscheme/sigscheme.c
	* sigscheme/storage-symbol.c
	* sigscheme/sigscheme.h
	* sigscheme/operations-siod.c
	* sigscheme/script
	* sigscheme/main.c
	* sigscheme/fileport.c
	* sigscheme/syntax.c
	* sigscheme/eval.c
	* sigscheme/fileport.h
	* sigscheme/operations-srfi23.c
	* sigscheme/alloc.c
	  - move to sigscheme/src/*
	
	
	* sigscheme/src/storage-fatty.h
	* sigscheme/src/sigschemefunctable.h
	* sigscheme/src/h_template
	* sigscheme/src/operations-r5rs-deepcadrs.c
	* sigscheme/src/mbcport.c
	* sigscheme/src/io.c
	* sigscheme/src/sigschemeinternal.h
	* sigscheme/src/mbcport.h
	* sigscheme/src/read.c
	* sigscheme/src/sbcport.c
	* sigscheme/src/storage-continuation.c
	* sigscheme/src/nullport.c
	* sigscheme/src/sbcport.h
	* sigscheme/src/basecport.c
	* sigscheme/src/operations.c
	* sigscheme/src/baseport.h
	* sigscheme/src/nullport.h
	* sigscheme/src/operations-nonstd.c
	* sigscheme/src/encoding.c
	* sigscheme/src/env.c
	* sigscheme/src/storage-protection.c
	* sigscheme/src/error.c
	* sigscheme/src/storage-gc.c
	* sigscheme/src/operations-srfi34.c
	* sigscheme/src/encoding.h
	* sigscheme/src/c_template
	* sigscheme/src/storage-compact.h
	* sigscheme/src/scm_functype_mand_max15.diff
	* sigscheme/src/operations-srfi38.c
	* sigscheme/src/test-compact.c
	* sigscheme/src/storage.c
	* sigscheme/src/operations-srfi1.c
	* sigscheme/src/operations-srfi2.c
	* sigscheme/src/sigscheme.c
	* sigscheme/src/storage-symbol.c
	* sigscheme/src/operations-srfi6.c
	* sigscheme/src/sigscheme.h
	* sigscheme/src/operations-srfi8.c
	* sigscheme/src/strport.c
	* sigscheme/src/operations-siod.c
	* sigscheme/src/strport.h
	* sigscheme/src/script
	* sigscheme/src/fileport.c
	* sigscheme/src/main.c
	* sigscheme/src/syntax.c
	* sigscheme/src/eval.c
	* sigscheme/src/Makefile.am
	* sigscheme/src/fileport.h
	* sigscheme/src/operations-srfi23.c
	* sigscheme/src/alloc.c
	* sigscheme/src/operations-srfi60.c
	* sigscheme/src/write.c
	* sigscheme/src/sigschemefunctable.
	  - move from sigscheme/*
	
	* sigscheme/src/config.h
	  - move from sigscheme/*
	  - delete HAVE_* (disable manual function availability configuration)
	
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-define.scm
	  - Remove invalid tests. Oops
	* sigscheme/TODO
	  - Update
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - Include stdint.h
	  - (SCM_FULLY_ADDRESSABLEP, SCM_DEFAULT_HEAP_SIZE,
	    SCM_DEFAULT_HEAP_ALLOC_THRESHOLD, SCM_DEFAULT_N_HEAPS_MAX,
	    SCM_DEFAULT_N_HEAPS_INIT, SCM_DEFAULT_SYMBOL_HASH_SIZE): New macro
	* sigscheme/storage.c
	  - (default_storage_conf):
	    * Replace values with the macros
	    * Max size of heaps is expanded to full address space
	* sigscheme/sigscheme.h
	  - (SCM_PTR_BITS): New macro
	* sigscheme/storage-fatty.h
	  - (SCM_SAL_PTR_BITS): New macro
	* sigscheme/storage-compact.h
	  - (SCM_SAL_PTR_BITS): New macro
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make memory parameter runtime-configurable
	
	* sigscheme/sigscheme.h
	  - (struct ScmStorageConf_, ScmStorageConf): New type
	  - (scm_initialize): Add ScmStorageConf as arg
	* sigscheme/sigschemeinternal.h
	  - (NAMEHASH_SIZE): Removed
	  - (scm_init_storage, scm_init_gc, scm_init_symbol): Accept
	    ScmStorageConf as only one argument
	* sigscheme/storage.c
	  - (default_storage_conf): New static variable
	  - (scm_init_storage): Adapt to ScmStorageConf
	* sigscheme/storage-gc.c
	  - (scm_symbol_hash_size): New extern decl
	  - (scm_init_gc, initialize_heap): Adapt to ScmStorageConf
	  - (gc_mark): Replace NAMEHASH_SIZE with scm_symbol_hash_size
	* sigscheme/storage-symbol.c
	  - (scm_symbol_hash_size): New variable
	  - (scm_symbol_bound_to, symbol_name_hash): Replace NAMEHASH_SIZE
	    with scm_symbol_hash_size
	  - (initialize_symbol_hash):
	    * Ditto
	    * Adapt to ScmStorageConf
	  - (scm_init_symbol): Adapt to ScmStorageConf
	* sigscheme/sigscheme.c
	  - (scm_initialize, scm_initialize_internal): Adapt to ScmStorageConf
	* sigscheme/main.c
	  - (main): Follow the API change of scm_initialize()
	* uim/uim-scm.c
	  - (uim_scm_init): Ditto
	* sigscheme/TODO
	  - Update
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/spec.txt
	  - Update
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-define.scm
	  - Add tests for internal definitions
	* sigscheme/TODO
	  - Update
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_LBUF_F_STRING, SCM_LBUF_F_SYMBOL): Follow the changes
	* sigscheme/sigschemeinternal.h
	  - (struct ScmLBuf): Rename members
	  - (struct ScmLBuf_void_): New type
	  - (LBUF_BUF, LBUF_SIZE, LBUF_INIT_SIZE, LBUF_EXT_CNT): Follow the
	    renamings
	  - (LBUF_INIT, LBUF_FREE, LBUF_ALLOC, LBUF_REALLOC, LBUF_EXTEND):
	    Reform to wrapper to its function version
	  - (LBUF_F_LINEAR, LBUF_F_EXPONENTIAL): Removed
	  - (scm_lbuf_init, scm_lbuf_free, scm_lbuf_alloc, scm_lbuf_realloc,
	    scm_lbuf_extend, scm_lbuf_f_linear, scm_lbuf_f_exponential): New
	    function decl
	* sigscheme/alloc.c
	  - (scm_lbuf_init, scm_lbuf_free, scm_lbuf_alloc, scm_lbuf_extend,
	    scm_lbuf_f_linear, scm_lbuf_f_exponential): New function inherited
	    the code from its macro version
	  - (scm_lbuf_realloc):
	    * Ditto
	    * Fix shrinking case
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (enum ScmCodedCharSet):
	    * Add new member SCM_CCS_UCS2
	    * Renumber each member
	
2006-01-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_integer2char, scm_p_make_string, scm_p_string_length,
	    scm_p_string_ref, scm_p_string_setd, scm_p_substring,
	    scm_p_string_append, scm_p_string2list, scm_p_list2string,
	    scm_p_string_filld): Simplify and make efficient singlebyte
	    processing
	* sigscheme/TODO
	  - Update
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* uim/uim-scm.h
	  - (uim_scm_gc_protect): Add comment about a precondition
	* sigscheme/TODO
	  - Update
	
	* sigscheme/doc/design.txt
	  - Update
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_show_error_header): Removed
	  - (scm_throw_exception): Removed obsolete decl
	* sigscheme/error.c
	  - (scm_p_inspect_error): Inline scm_show_error_header()
	  - (scm_show_error_header): Removed
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_replace_environment, scm_update_environment): New function
	    decl
	* sigscheme/env.c
	  - (scm_replace_environment, scm_update_environment): New function
	  - (scm_add_environment): Optimize
	* sigscheme/syntax.c
	  - (scm_s_letrec): Make environment modification abstract
	  - (scm_s_do): Make efficient
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_s_do): Rename an arg
	* sigscheme/syntax.c
	  - (scm_s_do):
	    * Fix SEGV on invalid form
	    * Fix lacking duplicate variable detection specified in R5RS
	    * Fix the behavior for no <expression>s as specified in R5RS
	    * Add dotted list form rejection
	    * Make environment update for each iteration simple and efficient
	* sigscheme/test/test-exp.scm
	  - Add command evaluation case for "do invalid form: improper commands"
	  - Follow the specification change in "do test6" and "do test7"
	  - Add comment for "do test8"
	* sigscheme/TODO
	  - Update
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (scm_s_do): Fix incorrect syntax application for scm_s_begin()
	    which uses eval_state invalidly, with FOR_EACH_PAIR()
	* sigscheme/test/test-exp.scm
	  - Add various tests for 'do'. Some tests cause error
	
	    $ ./sscm test/test-exp.scm
	    error: no error has occurred in test do invalid form: non-list bindings form #2
	    error: no error has occurred in test do invalid form: duplicate variable name #1
	    error: no error has occurred in test do invalid form: duplicate variable name #2
	    error: no error has occurred in test do invalid form: improper binding #3
	    error: no error has occurred in test do invalid form: improper commands #1
	    error: do valid form: no exps #1
	     expected: <#<undef>>
	       actual: <#t>
	    FAILED: 1 tests, 272 assertions, 266 successes, 6 failures, 0 errors
	
	    And "do invalid form: non-list test form" causes SEGV
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (SCM_SAL_STRING_SET_LEN, SCM_SAL_STRING_SET_MUTABLE,
	    SCM_SAL_STRING_SET_IMMUTABLE): Add SCM_AS_STRING() for all object
	    access
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make string mutability handling for storage-fatty
	  efficient
	
	* sigscheme/storage-fatty.h
	  - Exclude stdint.h
	  - (enum ScmMutability): Removed
	  - (SCM_STRING_STR_VALUE_MASK, SCM_STRING_MUTABILITY): Removed
	  - (SCM_INT_MSB, SCM_STRING_MUTABLE): New macro
	  - (SCM_STRING_MUTABILITY_MASK, SCM_SAL_STRING_STR,
	    SCM_SAL_STRING_SET_STR, SCM_SAL_STRING_LEN,
	    SCM_SAL_STRING_SET_LEN, SCM_SAL_STRING_MUTABLEP,
	    SCM_SAL_STRING_SET_MUTABLE, SCM_SAL_STRING_SET_IMMUTABLE): Change
	    to new definition
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_NOINLINE): Add FIXME comment
	* sigscheme/TODO
	  - Update
	
2006-01-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* ret_type validity of all tailcall have been checked
	
	* sigscheme/syntax.c
	  - (scm_s_cond_internal, scm_s_and, scm_s_or, scm_s_begin): Set
	    SCM_RETTYPE_AS_IS to eval_state->ret_type even if safe constant
	    result, to make code meaning proper
	* sigscheme/operations-srfi2.c
	  - (scm_s_srfi2_and_letstar): Ditto
	
	* sigscheme/eval.c
	  - (scm_p_apply): Remove unneeded comment explained by
	    SUPPRESS_EVAL_ARGS
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - (repl_loop): Add parse error handling
	* sigscheme/fileport.c
	  - (fileport_byte_readyp): Cause error if the port is based on a pipe
	    or socket
	  - Include sigscheme.h
	* sigscheme/config.h
	  - (HAVE_FILENO): New macro
	
	* sigscheme/basecport.c
	* sigscheme/strport.c
	* sigscheme/nullport.c
	* sigscheme/mbcport.c
	* sigscheme/sbcport.c
	  - Include sigscheme.h
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_string2list): Add a comment about SCM_USE_NULL_CAPABLE_STRING
	* sigscheme/config.h
	  - Error if SCM_USE_NULL_CAPABLE_STRING is enabled when !SCM_DEBUG
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (enum ScmObjType):
	    * Add ScmRational, ScmReal, ScmComplex
	    * Sort by majority to make immediate number encoding optimal
	  - (SCM_HAS_IMMEDIATE_INT, SCM_HAS_IMMEDIATE_CHAR): Removed
	  - (SCM_HAS_CHAR, SCM_HAS_INT, SCM_HAS_RATIONAL, SCM_HAS_REAL,
	    SCM_HAS_COMPLEX, SCM_HAS_STRING, SCM_HAS_VECTOR,
	    SCM_HAS_IMMEDIATE_CHAR_ONLY, SCM_HAS_IMMEDIATE_NUMBER_ONLY,
	    SCM_HAS_IMMEDIATE_INT_ONLY, SCM_HAS_IMMEDIATE_RATIONAL_ONLY,
	    SCM_HAS_IMMEDIATE_REAL_ONLY, SCM_HAS_IMMEDIATE_COMPLEX_ONLY,
	    SCM_CHAR_BITS, SCM_CHAR_MAX, SCM_CHAR_MIN, SCM_INT_BITS,
	    SCM_INT_MAX, SCM_INT_MIN, SCM_STRLEN_BITS, SCM_STRLEN_MAX,
	    SCM_STRLEN_MIN, SCM_VECLEN_BITS, SCM_VECLEN_MAX, SCM_VECLEN_MIN,
	    SCM_AS_NUMBER, SCM_NUMBERP): New macro
	* sigscheme/storage-fatty.h
	  - (SCM_SAL_HAS_IMMEDIATE_INT, SCM_SAL_HAS_IMMEDIATE_CHAR): Removed
	  - (SCM_SAL_HAS_CHAR, SCM_SAL_HAS_RATIONAL, SCM_SAL_HAS_REAL,
	    SCM_SAL_HAS_COMPLEX, SCM_SAL_HAS_STRING, SCM_SAL_HAS_VECTOR,
	    SCM_SAL_HAS_IMMEDIATE_CHAR_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_NUMBER_ONLY, SCM_SAL_HAS_IMMEDIATE_INT_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_RATIONAL_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_REAL_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_COMPLEX_ONLY, SCM_SAL_CHAR_BITS,
	    SCM_SAL_CHAR_MAX, SCM_SAL_INT_BITS, SCM_SAL_INT_MAX,
	    SCM_SAL_INT_MIN, SCM_SAL_STRLEN_BITS, SCM_SAL_STRLEN_MAX,
	    SCM_SAL_VECLEN_BITS, SCM_SAL_VECLEN_MAX, SCM_SAL_NUMBERP): New
	    macro
	* sigscheme/storage-compact.h
	  - (SCM_SAL_HAS_IMMEDIATE_INT, SCM_SAL_HAS_IMMEDIATE_CHAR): Removed
	  - (SCM_SAL_HAS_CHAR, SCM_SAL_HAS_RATIONAL, SCM_SAL_HAS_REAL,
	    SCM_SAL_HAS_COMPLEX, SCM_SAL_HAS_STRING, SCM_SAL_HAS_VECTOR,
	    SCM_SAL_HAS_IMMEDIATE_CHAR_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_NUMBER_ONLY, SCM_SAL_HAS_IMMEDIATE_INT_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_RATIONAL_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_REAL_ONLY,
	    SCM_SAL_HAS_IMMEDIATE_COMPLEX_ONLY, SCM_SAL_CHAR_BITS,
	    SCM_SAL_CHAR_MAX, SCM_SAL_INT_BITS, SCM_SAL_INT_MAX,
	    SCM_SAL_INT_MIN, SCM_SAL_STRLEN_BITS, SCM_SAL_STRLEN_MAX,
	    SCM_SAL_VECLEN_BITS, SCM_SAL_VECLEN_MAX, SCM_SAL_NUMBERP): New
	    macro
	* sigscheme/sigscheme.c
	  - (scm_initialize_internal):
	    * Provide immediate-char-only when SCM_HAS_IMMEDIATE_CHAR_ONLY
	    * Provide immediate-number-only when SCM_HAS_IMMEDIATE_NUMBER_ONLY
	* sigscheme/operations.c
	  - (scm_p_eqvp, scm_p_equalp, scm_p_memv, scm_p_assv,
	    scm_p_charequalp): Follow the reorganization of object
	    representation info macros
	* sigscheme/write.c
	  - (write_obj):
	    * Remove useless ScmFreeCell handling
	    * Add false assertion
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (scm_mb_strlen, scm_mb_bare_c_strlen, scm_mb_substring,
	    scm_mb_strref): Add new arg 'codec'
	* sigscheme/encoding.c
	  - (scm_mb_strlen, scm_mb_bare_c_strlen, scm_mb_substring): Add new
	    arg 'codec'
	* sigscheme/config.h
	  - (SCM_USE_NULL_CAPABLE_STRING): New macro
	* sigscheme/sigscheme.h
	  - (SCM_ERRMSG_NULL_IN_STRING): New macro
	* sigscheme/sigscheme.c
	  - (scm_initialize_internal): Provide "null-capable-string" when
	    SCM_USE_NULL_CAPABLE_STRING
	* sigscheme/read.c
	  - (read_string): Reject null character when
	    !SCM_USE_NULL_CAPABLE_STRING
	* sigscheme/storage.c
	  - (scm_make_string_internal): Follow the API change of encoding.h
	* sigscheme/strport.h
	  - (ScmOutputStrPort_c_strlen): New function decl
	* sigscheme/strport.c
	  - (ScmOutputStrPort_c_strlen): New function
	* sigscheme/operations-srfi6.c
	  - (scm_p_srfi6_get_output_string):
	    * Fix character codec selection
	    * Add partial support for SCM_USE_NULL_CAPABLE_STRING
	* sigscheme/operations.c
	  - (scm_p_make_string, scm_p_list2string):
	    * Make efficient
	    * Support SCM_USE_NULL_CAPABLE_STRING
	  - (scm_p_string_length, scm_p_string_ref): Follow the API change of
	    encoding.h
	  - (scm_p_string_setd):
	    * Ditto
	    * Add partial support for SCM_USE_NULL_CAPABLE_STRING
	  - (scm_p_string_append, scm_p_string_copy): Add partial support for
	    SCM_USE_NULL_CAPABLE_STRING
	  - (scm_p_string2list): Support SCM_USE_NULL_CAPABLE_STRING
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (parse_script_prelude): Fix broken scanning
	
2006-01-10 kzk <mover@hct.zaq.ne.jp>
	
	* sigschme/storage-compact.h
	  - SCM_SAL_FALSE and SCM_SAL_NULL must be the same when
	    SCM_COMPAT_SIOD_BUGS is defined.
	* sigschme/storage-fatty.h
	  - Ditto
	* sigschme/storage.c
	  - (initialize_special_constants): mover the assurance of the
	    equality between scm_const_false and scm_const_null to
	    storage-fatty.h for the symmetry assumption between compact
	    and non-compact.
	
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make string object creation efficient when the length is
	  already known. The codes still have a bug about handling null
	  character in string. It will be fixed soon
	
	* sigscheme/sigscheme.h
	  - (SCM_MAKE_STRING, SCM_MAKE_STRING_COPYING,
	    SCM_MAKE_IMMUTABLE_STRING, SCM_MAKE_IMMUTABLE_STRING_COPYING,
	    SCM_CONST_STRING, SCM_STRLEN_UNKNOWN): New macro
	* sigscheme/sigschemeinternal.h
	  - (CONST_STRING, STRLEN_UNKNOWN): New macro
	* sigscheme/storage-fatty.h
	  - (scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying): Add arg 'len'
	* sigscheme/storage-compact.h
	  - (scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying): Add arg 'len'
	* sigscheme/storage.c
	  - (scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying,
	    scm_make_string_internal): Add arg 'len'
	* sigscheme/operations.c
	  - (scm_p_number2string, scm_p_substring, scm_p_string_append,
	    scm_p_string_copy): Make efficient with the new interface
	  - (scm_p_symbol2string, scm_p_make_string, scm_p_list2string,
	    scm_p_string_filld): Follow the API changes
	* sigscheme/error.c
	  - (scm_init_error, scm_die, scm_error, scm_error_obj): Follow the
	    API changes
	* sigscheme/operations-srfi34.c
	  - (scm_initialize_srfi34): Ditto
	* sigscheme/operations-srfi6.c
	  - (scm_p_srfi6_get_output_string): Ditto
	* sigscheme/io.c
	  - (scm_load_internal): Ditto
	* sigscheme/operations-nonstd.c
	  - (scm_p_load_path, make_loaded_str): Ditto
	* sigscheme/sigscheme.c
	  - (scm_initialize_internal, scm_s_use, scm_interpret_argv); Ditto
	* sigscheme/main.c
	  - (main): Ditto
	* sigscheme/read.c
	  - (read_string):
	    * Make efficient with the new interface
	    * Support null char in string
	* uim/uim-scm.c
	  - (uim_scm_make_str): Follow the API changes
	* uim/uim-compat-scm.c
	  - (uim_scm_c_strs_into_list, uim_scm_provide): Ditto
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_string_append): Fix lacking null termination
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/mbcport.c
	  - (mbcport_fill_rbuf): Rename an arg
	
	* sigscheme/doc/design.txt
	  - Modify some expression
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (enum _tr_msg, vectran): Revert r2527 about the comments I
	    misunderstood
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_eqvp, scm_p_equalp): Simplify
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (STRING_EQUALP): New macro
	  - (scm_p_equalp, scm_p_stringequalp): Simplify with STRING_EQUALP()
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (scm_show_backtrace): Simplify with FOR_EACH
	* sigscheme/operations.c
	  - (ASSOC_BODY):
	    * Simplify with FOR_EACH()
	    * Remove args for tmp variable
	  - (scm_p_assq, scm_p_assv, scm_p_assoc): Follow the change of
	    ASSOC_BODY()
	  - (scm_p_list2string): Simplify with FOR_EACH()
	* sigscheme/storage-symbol.c
	  - (scm_intern, scm_symbol_bound_to): Simplify with FOR_EACH()
	
2006-01-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage.c
	  - (scm_make_string_internal):
	    * Eliminate never met condition
	    * Optimize for empty string
	* sigscheme/write.c
	  - (write_errobj): Simplify with FOR_EACH()
	* sigscheme/io.c
	  - (scm_prepare_port): Optimize for procedure call which ensures
	    proper variadic args
	* sigscheme/operations-nonstd.c
	  - (scm_p_symbol_boundp): Ditto
	* sigscheme/operations-siod.c
	  - (scm_p_verbose): Ditto
	* sigscheme/eval.c
	  - (scm_p_apply): Ditto
	* sigscheme/operations.c
	  - (prepare_radix, scm_p_make_string, scm_p_make_vector,
	    map_multiple_args): Ditto
	  - (scm_p_string_append):
	    * Ditto
	    * Optimize string construction
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/write.c
	  - (print_obj, print_char, print_string, print_list, print_vector,
	    print_port, print_constant, print_errobj): Rename to write_*()
	  - (write_obj, write_char, write_string, write_list, write_vector,
	    write_port, write_constant, write_errobj): Renamed from print_*()
	  - Follow the renamings over the file
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/print.c
	  - Rename to write.c
	* sigscheme/write.c
	  - Renamed from print.c
	* sigscheme/Makefile.am
	  - (libsscm_la_SOURCES): Follow the renaming
	* sigscheme/sigscheme.h
	* sigscheme/sigschemeinternal.h
	  - Follow the renaming in section title
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/design.txt
	  - New file
	  - List section titles. No actual description is written yet
	
	* sigscheme/doc/spec.txt
	  - Update
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/style
	* sigscheme/doc/style.txt
	  - Rename style to style.txt
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/spec.txt
	  - New file
	  - Describe R5RS conformance
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (vectran): Add DECLARE_INTERNAL_FUNCTION() for ERR_OBJ()
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - Cosmetic change in accordance with doc/style. Suggest another rule
	    for it if it's reasonable
	
2006-01-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (FOR_EACH_BUTLAST): New macro
	* sigscheme/eval.c
	  - (reduce, scm_p_apply): Simplify with FOR_EACH_BUTLAST()
	* sigscheme/syntax.c
	  - (scm_s_and, scm_s_or, scm_s_begin): Ditto
	* sigscheme/operations.c
	  - (scm_p_append): Ditto
	  - (scm_p_reverse):
	    * Simplify with FOR_EACH
	    * Remove ENSURE_PROPER_LIST_TERMINATION() since it had been made
	      uneeded by the recent changes
	
2006-01-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations-srfi1.c
	  - (scm_p_srfi1_make_list): not to initialize head with SCM_FALSE
	  - (scm_p_srfi1_list_copy): not to initialize head with SCM_FALSE
	  - (scm_p_srfi1_iota): make this function workable if SCM_FALSE !=
	    SCM_NULL
	
2006-01-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - (SCM_CONS_CAR_VAL,
	     SCM_CONS_CDR_VAL): remove SCM_STRIP_GCBIT for optimizing
	* sigscheme/storage-gc.c
	  - (mark_obj): use SCM_CONS_CAR and SCM_CONS_CDR for consistency
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-nonstd.c
	  - (scm_p_symbol_boundp): Add termination check for args
	* sigscheme/operations-siod.c
	  - (scm_p_verbose): Ditto
	* sigscheme/syntax.c
	  - (scm_s_cond_internal): Ditto
	  - (scm_s_or): Fix double eval for tail enbuged in r2832
	* sigscheme/eval.c
	  - (reduce):
	    * Resurrect strict termination check for args
	    * Remove redundant code fragment
	  - (scm_p_apply): Add termination check for args
	
2006-01-08 kzk <mover@hct.zaq.ne.jp>
	
	* obsolete casting macros
	
	* sigscheme/storage-compact.h
	  - (SCM_CAST_INT
	     SCM_CAST_UINT
	     SCM_CAST_SCMOBJ
	     SCM_CAST_CHARP): removed
	
	  - replace SCM_CAST_UINT(hogehoge) with ((unsigned long)(hogehoge)) by
	    the following one liner.
	    $ ruby -i -pe 'gsub!(/SCM_CAST_UINT\((\S+)\)/, "((unsigned long)(\\1))")' storage-compact.h
	
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/runtest.sh
	  - Reduce excessive newline
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_error_obj): Remove duplicate decl
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-nonstd.c
	  - (scm_p_symbol_boundp):
	    * Fix a SEGV from rewriting miss in r2832
	    * Fix lacking invalid environment object rejection
	
2006-01-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - (SCM_HAS_VALID_CDR_GCBITP): new macro
	
	* sigscheme/storage-gc.c
	  - (within_heapp): check the consistency between obj's tag and cdr's
	    GC bit.
	  - (mark_obj): split into compact version and fatty version.
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - Cosmetic change
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.c
	  - (scm_mb_bare_c_strlen): Simplify with SCM_MBS_INIT2()
	* sigscheme/operations.c
	  - (scm_p_string_ref, scm_p_string_setd, scm_p_substring): Ditto
	  - (scm_p_string2list):
	    * Ditto
	    * Simplify with SCM_CHARCODEC_READ_CHAR()
	
2006-01-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage.c
	  - (scm_type): optimize
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (SCM_MBS_INIT2, SCM_CHARCODEC_READ_CHAR): New macro
	  - (scm_charcodec_read_char): New function decl
	* sigscheme/encoding.c
	  - (scm_charcodec_read_char): New function
	* sigscheme/print.c
	  - (print_string): Support multibyte string properly
	
2006-01-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-01-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (MUST_POP_ARG): simplify
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-r4rs.scm
	  - Disable case-insensitive identifier tests
	  - All enabled tests have been passed when !SCM_COMPAT_SIOD_BUGS
	  - Rewrite unittest.scm loading to be compatible with gosh
	* sigscheme/test/unittest.scm
	  - (assert, test-name): Remove unneeded symbol protection
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (scm_s_letrec):
	    * Simplify
	    * Remove SCM_COMPAT_SIOD_BUGS fragment since letrec is not used in
	      uim
	* sigscheme/test/test-exp.scm
	  - Remove the siod-bugs test
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (scm_s_letstar): Simplify
	
2006-01-07 Jun Inoue <jun.lambda@gmail.com>
	
	Fix bug committed in r2832.
	* sigscheme/env.c
	  - (scm_validate_formals): bug fix.
2006-01-07 Jun Inoue <jun.lambda@gmail.com>
	
	Addition of FOR_EACH() and simplification of POP_ARG().
	
	* sigscheme/sigschemeinternal.h
	  - (POP_ARG): rename to SAFE_POP().
	  - (POP, SAFE_POP, FOR_EACH_WHILE, FOR_EACH, FOR_EACH_PAIR): new macros.
	
	* sigscheme/operations-srfi2.c
	  - (scm_s_srfi2_and_letstar): follow change in sigschemeinternal.h.
	
	* sigscheme/io.c
	  - (prepare_port): ditto.
	
	* sigscheme/storage-continuation.c
	  - (enter_dynamic_extent): ditto.
	
	* sigscheme/operations.c
	  - (prepare_radix, scm_p_append, scm_p_append, scm_p_make_string, scm_p_list2vector, map_single_arg): ditto.
	
	* sigscheme/operations-nonstd.c
	  - (scm_p_symbol_boundp): ditto.
	
	* sigscheme/env.c
	  - (scm_validate_formals): ditto.
	
	* sigscheme/operations-siod.c
	  - (scm_p_verbose): ditto.
	
	* sigscheme/syntax.c
	  - (scm_s_if, scm_s_and, scm_s_or, scm_s_let, scm_s_begin, scm_s_do): ditto.
	
	* sigscheme/eval.c
	  - (reduce, map_eval): ditto.
	
	* sigscheme/test/test-exp.scm
	  - add new test.
	
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (scm_s_letstar): Fix lacking environment extension when bindings
	    is null
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_string2number): Fix "" -> 0 to "" -> #f
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-r4rs.scm
	  - Revert string->number tests of r2826 that misrecognized by me
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (assert, test-name): Protect primitive functions from being
	    redefined
	* sigscheme/test/test-r4rs.scm
	  - Adapt to unittest.scm
	  - (tn-section): New procedure
	  - (SECTION, test): Insert the adaptation
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_string2number): Fix non-R5RS compatible error handling
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-r4rs.scm
	  - Modify expect value of string->number tests that does not conform
	    to both R4RS and R5RS
	  - Comment out tests that not supported by SigScheme
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_call_continuation): Add SCM_NORETURN attribute
	* sigscheme/eval.c
	  - (call_continuation):
	    * New static function split from call()
	    * Fix the wrong local variable name
	  - (call): Split continuation calling off as call_continuation()
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/env.c
	  - (scm_validate_formals, scm_validate_actuals): Add loose but crashless
	    varidation for !SCM_STRICT_ARGCHECK
	* sigscheme/syntax.c
	  - (scm_s_lambda): Disable formals varidation if !SCM_STRICT_ARGCHECK
	  - (scm_s_define): Simplify with scm_s_lambda()
	* sigscheme/sigscheme.c
	  - (scm_initialize_internal): Provide "strict-argcheck" if
	    SCM_STRICT_ARGCHECK
	* sigscheme/test/test-define.scm
	* sigscheme/test/test-exp.scm
	* sigscheme/test/test-srfi8.scm
	  - Disable strict formals varidation tests when not (provided?
	    "strict-argcheck")
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (call): Fix lacking mandatory error check for invalid function
	    calling
	* sigscheme/test/test-syntax.scm
	  - Add tests for the fix
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi8.c
	  - (scm_s_srfi8_receive): Fix lacking formals varidation
	* sigscheme/test/test-srfi8.scm
	  - Add tests for the formals varidation
	  - Add tests for variadic_[012]
	* sigscheme/syntax.c
	  - (scm_s_define): Fix lacking formals varidation
	* sigscheme/test/test-define.scm
	  - Add tests for the formals varidation
	* sigscheme/eval.c
	  - (call_closure): Replace unneeded formals check with SCM_ASSERT()
	* sigscheme/test/test-exp.scm
	  - Add tests for the formals varidation of lambda
	* sigscheme/test/test-syntax.scm
	  - Add tests for function calling for 'define'-created closure
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_extend_environment): Follow the renaming of r
	* sigscheme/syntax.c
	  - (scm_s_let, scm_s_letrec): Rename local variables
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ENSURE_PROPER_ARG_LIST): Simplify with PROPER_LISTP()
	* sigscheme/operations.c
	  - (scm_p_listp): Ditto
	  - (scm_p_length):
	    * Simplify with SCM_LISTLEN_PROPERP()
	    * Fix error message
	  - (scm_p_list2vector): Simplify with SCM_LISTLEN_PROPERP()
	* sigscheme/syntax.c
	  - (vectran): Ditto
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi1.c
	  - (scm_p_srfi1_lengthplus): Fix dotted list result
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/env.c
	  - (scm_extend_environment, scm_add_environment, lookup_frame,
	    valid_framep): Rename variables
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-eval.scm
	  - Simplify with test-name
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_finite_length): New function decl
	* sigscheme/operations.c
	  - (scm_finite_length): New function
	* sigscheme/eval.c
	  - (call_closure): Make efficient with scm_finite_length()
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (TERMINATOR_LEN): New macro
	  - (scm_length):
	    * Fix desciption error for meaning of -1
	    * Rename some elements to make meaningful
	* sigscheme/sigscheme.h
	  - (SCM_LISTLEN_DOTTED): Replace unneeded abs(3) with simple nagation
	  - (SCM_LISTLEN_BEFORE_DOT): Correct the comment
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit remove overhead on environment lookup and extension
	
	* sigscheme/sigscheme.h
	  - (SCM_VALID_ENVP, SCM_LISTLEN_ERRORP): New macro
	* sigscheme/sigschemeinternal.h
	  - (VALID_ENVP, ENSURE_VALID_ENV, SCM_LISTLEN_ENCODE_ERROR): New
	    macro
	  - (scm_valid_environmentp, scm_valid_environment_extensionp,
	    scm_valid_environment_extension_lengthp, scm_validate_formals,
	    scm_validate_actuals): New function decl
	* sigscheme/env.c
	  - Add description about frames and responsibility for keeping
	    validity
	  - (TRUSTED_ENVP): New macro
	  - (scm_extend_environment):
	    * Remove obsolete description about vals
	    * Remove lookup-time validity check
	  - (scm_add_environment):
	    * Add assertion for env object
	    * Replace broken env detection with false assertion
	  - (scm_lookup_environment):
	    * Add assertions
	    * Replace CONSP() with !NULLP() for performance. This is safe by
	      the preconditions
	  - (lookup_frame):
	    * Remove lookup-time validity check
	    * Add assertions
	  - (scm_valid_environmentp, scm_valid_environment_extensionp,
	    scm_valid_environment_extension_lengthp, scm_validate_formals,
	    scm_validate_actuals): New function
	  - (valid_framep): New static function
	* sigscheme/eval.c
	  - (call_closure):
	    * Add arg 'suppress_eval'
	    * Move args evaluation responsibility from call()
	    * Add validation for formals and actuals
	    * Fix no-check for superfluous args on null formals
	  - (call): Follow the change of call_closure() and map_eval()
	  - (scm_p_eval): Add ENSURE_VALID_ENV() to reject invalid hand-maid env
	  - (map_eval): Add output arg 'args_len' for efficient actuals
	    validation
	* sigscheme/syntax.c
	  - (scm_s_lambda): Add validation for formals
	* sigscheme/test/test-eval.scm
	  - Add tests for hand-maid environment objects
	* sigscheme/test/test-syntax.scm
	  - Remove a miswritten test
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_p_srfi1_proper_listp, scm_p_srfi1_circular_listp,
	    scm_p_srfi1_dotted_listp, scm_p_srfi1_not_pairp): Fix arg name
	    appropriately
	* sigscheme/operations-srfi1.c
	  - (scm_p_srfi1_null_listp): Check circular and dotted list properly
	  - (scm_p_srfi1_proper_listp, scm_p_srfi1_lengthplus): Simplify with
	    new list predicate
	  - (scm_p_srfi1_circular_listp, scm_p_srfi1_dotted_listp):
	    * Ditto
	    * Remove the code derived from the Shiro Kawai's one copied with
	      no license, copyright and original author information
	  - (scm_p_srfi1_not_pairp): Simplify
	  - (scm_p_srfi1_circular_list): Remove unneeded check already done by
	    map_eval()
	* sigscheme/test/test-srfi1.scm
	  - Fix dotted list test for null-list?. Although Gauche returns #f,
	    it is an error against SRFI-1 specification. Don't rely on a
	    behavior of another implementation as the correct
	    specification. Read original spec first.
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-nonstd.c
	  - (scm_p_lengthstar): Follow the renaming in r2810
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_PROPER_LISTP): Rewrite meaningfully
	  - (SCM_DOTTED_LISTP, SCM_CIRCULAR_LISTP): New macro
	  - (SCM_LISTLEN_PROPERP, SCM_LISTLEN_CIRCULARP, SCM_LISTLEN_DOTTEDP,
	    SCM_LISTLEN_DOTTED, SCM_LISTLEN_BEFORE_DOT): Moved from
	    sigschemeinternal.h
	* sigscheme/sigschemeinternal.h
	  - (DOTTED_LISTP, CIRCULAR_LISTP): New macro
	  - (SCM_LISTLEN_PROPERP, SCM_LISTLEN_CIRCULARP, SCM_LISTLEN_DOTTEDP,
	    SCM_LISTLEN_DOTTED, SCM_LISTLEN_BEFORE_DOT): Move to sigscheme.h
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_LISTLEN_ENCODE_DOT, SCM_LISTLEN_ENCODE_DOTTED): Rename
	    SCM_LISTLEN_ENCODE_DOT to SCM_LISTLEN_ENCODE_DOTTED
	  - (SCM_LISTLEN_DOTP, SCM_LISTLEN_DOTTEDP): Rename SCM_LISTLEN_DOTP
	    to SCM_LISTLEN_DOTTEDP
	  - (SCM_LISTLEN_DOT, SCM_LISTLEN_DOTTED): Rename SCM_LISTLEN_DOT to
	    SCM_LISTLEN_DOTTED
	* sigscheme/operations.c
	  - (scm_length): Follow the renamings
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - Cosmetic change
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_LISTLEN_ENCODE_DOT, SCM_LISTLEN_ENCODE_CIRCULAR): New macros
	    moved from operations.c
	* sigscheme/operations.c
	  - (LISTLEN_ENCODE_DOT, LISTLEN_ENCODE_CIRCULAR): Move to
	    sigschemeinternal.h and rename to SCM_*
	  - (scm_length): Follow the renamings
	
2006-01-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_LISTLEN_PROPERP, SCM_LISTLEN_DOT): New macro
	* sigscheme/operations.c
	  - (LISTLEN_ENCODE_DOT): Revert r2802
	  - (scm_length):
	    * Return -1 for non-list, as zero length improper list, as
	      originally intended
	    * Fix the bug fixed in r2802, but as originally intended
	* sigscheme/sigscheme.h
	  - (scm_p_lengthstar): New function decl
	* sigscheme/operations-nonstd.c
	  - (scm_p_lengthstar): New function
	* sigscheme/test/test-list.scm
	  - Add tests for length*
	
2006-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-syntax.scm
	  - Add tests for function calling and syntax application for fixed_0
	
2006-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-syntax.scm
	  - Add tests for function calling and syntax application
	
2006-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_ERRMSG_IMPROPER_ARGS, SCM_PROPER_LISTP): New macro
	* sigscheme/sigschemeinternal.h
	  - (PROPER_LISTP): New macro
	* sigscheme/eval.c
	  - (scm_tailcall, scm_call): Add proper list assertion for args
	  - (call): Add properness check for syntax args, but disabled. See
	    the comment for further details
	  - (map_eval): Reject improper list
	
2006-01-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (scm_s_cond_internal): Follow the renaming about function code
	* sigscheme/operations-srfi34.c
	  - (set_cur_handlers, with_exception_handlers, guard_internal,
	    guard_handler, guard_handler_body, guard_body): Ditto
	
2006-01-06 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/operations.c
	  - (scm_length): fix bug introduced with r2801.
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_LISTLEN_CIRCULARP, SCM_LISTLEN_DOTP, SCM_LISTLEN_BEFORE_DOT):
	    New macro
	* sigscheme/operations.c
	  - (LISTLEN_ENCODE_DOT, LISTLEN_ENCODE_CIRCULAR): New macro
	  - (scm_length): Return dot list length and circular indication
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This change reduce about 800 bytes of object size
	
	* sigscheme/sigschemeinternal.h
	  - (PREPARE_PORT): Removed
	  - (scm_prepare_port): New function decl
	* sigscheme/io.c
	  - (scm_prepare_port): New function
	  - (scm_p_read, scm_p_read_char, scm_p_peek_char, scm_p_char_readyp,
	    scm_p_write, scm_p_display, scm_p_newline, scm_p_write_char):
	    Replace PREPARE_PORT() with scm_prepare_port()
	* sigscheme/operations-srfi38.c
	  - (scm_p_srfi38_write_with_shared_structure): Ditto
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (scm_s_use): Optimize
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_add, scm_p_multiply, scm_p_subtract, scm_p_divide,
	    COMPARATOR_BODY): Replace the never-met error check with SCM_ASSERT()
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (MAKE_TRACE_FRAME, PREPARE_PORT): Fix operator association
	* sigscheme/storage-continuation.c
	  - (MAKE_DYNEXT_FRAME): Ditto
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit remove side-effective expression in macros
	
	* sigscheme/env.c
	  - (scm_add_environment): Ditto
	* sigscheme/eval.c
	  - (map_eval): Ditto
	* sigscheme/syntax.c
	  - (scm_s_if, scm_s_do, define_internal): Ditto
	* sigscheme/io.c
	  - (scm_make_shared_file_port, scm_p_open_input_file,
	    scm_p_open_output_file, scm_p_char_readyp): Ditto
	* sigscheme/sigscheme.c
	  - (scm_eval_c_string_internal): Ditto
	* sigscheme/operations.c
	  - (scm_p_string_length, map_single_arg, map_multiple_args): Ditto
	* sigscheme/operations-nonstd.c
	  - (scm_p_symbol_boundp): Ditto
	* sigscheme/operations-siod.c
	  - (scm_initialize_siod, scm_p_closure_code): Ditto
	* sigscheme/operations-srfi6.c
	  - (scm_p_srfi6_open_input_string, scm_p_srfi6_open_output_string):
	    Ditto
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - Include stdint.h
	  - (SCM_SAL_STRING_STR, SCM_SAL_STRING_SET_STR,
	    SCM_STRING_MUTABILITY, SCM_SAL_STRING_SET_MUTABLE,
	    SCM_SAL_STRING_SET_IMMUTABLE): Replace unsigned long with
	    uintptr_t to indicate its intention
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - Rename macro args for ScmObj as MACRO(a) -> MACRO(o)
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (struct ScmCell_): Add comment about obj.string.len
	  - Cosmetic changes
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	* sigscheme/sigschemeinternal.h
	  - Cosmetic change
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_GC_PROTECTED_CALL_INTERNAL, scm_providedp, scm_use,
	    scm_port_char_readyp, scm_die): Replace boolean types and values
	    with scm_bool
	* sigscheme/sigscheme.c
	  - (scm_use_internal, scm_providedp, scm_use, scm_use_internal,
	    scm_register_func): Ditto
	* sigscheme/eval.c
	  - (EVAL_ARGS, SUPPRESS_EVAL_ARGS, reduce, call): Ditto
	* sigscheme/syntax.c
	  - (TR_ENDP): Ditto
	* sigscheme/error.c
	  - (srfi34_providedp, scm_die): Ditto
	* sigscheme/operations-srfi6.c
	  - (istrport_finalize, istrport_finalize): Ditto
	* sigscheme/io.c
	  - (file_existsp, scm_port_char_readyp): Ditto
	* sigscheme/storage-gc.c
	  - (within_heapp): Ditto
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (FALSE, TRUE): Removed
	* sigscheme/sigscheme.c
	  - (scm_initialized, scm_initialize_internal, scm_finalize): Replace
	    boolean types with scm_bool
	* sigscheme/storage.c
	  - (scm_make_string_internal, scm_make_string_internal,
	    scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying): Ditto
	* sigscheme/read.c
	  - (read_unicode_sequence): Ditto
	* sigscheme/error.c
	  - (srfi34_is_provided, fatal_error_looped, scm_init_error,
	    scm_p_fatal_error): Ditto
	* sigscheme/main.c
	  - (show_promptp): Ditto
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/basecport.c
	  - (basecport_char_readyp): Change return type to scm_bool
	* sigscheme/baseport.h
	  - (scm_bool): New type
	  - (scm_false, scm_true): New macro
	  - (ScmCharPortMethod_char_readyp, ScmBytePortMethod_byte_readyp):
	    Change return type to scm_bool
	* sigscheme/fileport.c
	  - (FALSE, TRUE): Removed
	  - (struct ScmFilePort_): Change type of member ownership to scm_bool
	  - (fileport_new_internal): Change type of arg 'ownership' to
	    scm_bool
	  - (fileport_byte_readyp): Change return type to scm_bool
	  - (scm_fileport_init, fileport_write): Logical cleanup
	  - (ScmFilePort_new, ScmFilePort_new_shared): Replace boolean values
	    to scm_bool
	* sigscheme/strport.h
	  - (ScmInputStrPort_finalizer): Change type of arg 'ownership' to
	    scm_bool
	* sigscheme/strport.c
	  - (struct ScmInputStrPort_): Change type of member
	    'has_str_ownership' to scm_bool
	  - (istrport_new): Change type of arg 'ownership' to scm_bool
	  - (istrport_byte_readyp, ostrport_byte_readyp): Change return type
	    to scm_bool
	  - (scm_strport_init): Cleanup
	  - (ScmInputStrPort_new, ScmInputStrPort_new_copying,
	    ScmInputStrPort_new_const): Replace boolean values to scm_bool
	* sigscheme/nullport.c
	  - (nullport_byte_readyp): Change return type to scm_bool
	* sigscheme/sbcport.c
	  - (sbcport_put_char): Logical cleanup
	* sigscheme/mbcport.c
	  - (uchar): New type
	  - (struct ScmMultiByteCharPort_): Change type of rbuf to uchar to
	    prevent MSB loss by human error
	  - (mbcport_char_readyp): Change return type to scm_bool
	  - (mbcport_fill_rbuf): Change type of arg 'block' to scm_bool
	  - (ScmMultiByteCharPort_set_codec, mbcport_get_char,
	    mbcport_peek_char, mbcport_fill_rbuf): Follow the changes
	  - (mbcport_put_char): Cosmetic change
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - Cosmetic change
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (SCM_MBS_GET_STATE, SCM_MBS_SET_STATE, SCM_MBS_CLEAR_STATE,
	    SCM_MBCINFO_INIT, SCM_MBS_INIT, SCM_MBS_SKIP_CHAR): Make state
	    macros warning-free when !SCM_USE_STATEFUL_ENCODING
	  - (SCM_MBCINFO_SET_SIZE, SCM_MBCINFO_GET_SIZE,
	    SCM_MBCINFO_CLEAR_STATE, SCM_MBCINFO_SET_STATE,
	    SCM_MBCINFO_GET_STATE):
	    * Ditto
	    * Replace shared MBS macros with dedicated ones to avoid confusions
	  - (scm_bool): New type
	  - (scm_false, scm_true): New macro
	  - (ScmCharCodecMethod_statefulp): Change return type to scm_bool
	* sigscheme/encoding.c
	  - (SCM_USE_UTF8, SCM_USE_EUCJP, SCM_USE_EUCCN, SCM_USE_EUCKR,
	    SCM_USE_SJIS, SCM_USE_UTF8_AS_DEFAULT, CDBG): New macro for
	    !SCM_ENCODING_USE_WITH_SIGSCHEME
	  - (pred_always_true, pred_always_false): Change return type to
	    scm_bool
	  - (scm_mb_strlen): Logical simplification
	  - (scm_mb_bare_c_strlen, scm_mb_substring, RETURN, RETURN_ERROR,
	    RETURN_INCOMPLETE, SAVE_STATE, utf8_scan_char, sjis_scan_char,
	    unibyte_scan_char): Cosmetic change
	  - (IN_GR96): Suppless the warning
	  - (eucjp_char_len, euc_char_len, utf8_char_len, sjis_char_len):
	    Change buffer type to uchar
	* sigscheme/sigscheme.h
	  - (scm_bool, scm_false, scm_true): Enclose into duplicate definition
	    guard
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi2.c
	  - (scm_initialize_srfi2): Cosmetic change
	  - (scm_s_srfi2_and_letstar):
	    * Fix SEGV on dot list as claws
	    * Cleanup variable declaration
	* sigscheme/test/test-srfi2.scm
	  - Add tests for the SEGV condition
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi34.c
	  - (scm_initialize_srfi34, with_exception_handlers,
	    scm_p_srfi34_raise, scm_s_srfi34_guard, guard_internal,
	    guard_handler, delay, guard_handler_body): Cosmetic change
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi8.c
	  - (scm_initialize_srfi8): Cosmetic change
	  - (scm_s_srfi8_receive):
	    * Cosmetic change
	    * Logical simplification
	    * Cleanup variable declaration
	    * Add comment about SRFI-8 specification
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi60.c
	  - (BITWISE_OPERATION_BODY):
	    * Fix lacking ENSURE_INT() for leftmost element
	    * Replace the never-met error check with SCM_ASSERT()
	    * Change args
	  - (scm_p_srfi60_logand, scm_p_srfi60_logior, scm_p_srfi60_logxor):
	    * Follow the interface change of BITWISE_OPERATION_BODY()
	    * Cosmetic change
	* sigscheme/test/test-srfi60.scm
	  - Add tests for the error condition
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi6.c
	  - (scm_initialize_srfi23, scm_p_srfi23_error): Cosmetic change
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi6.c
	  - (scm_initialize_srfi6, scm_p_srfi6_open_input_string): Cosmetic
	    change
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (PREPARE_PORT): Move to sigschemeinternal.h
	* sigscheme/sigschemeinternal.h
	  - (PREPARE_PORT): Moved from io.c
	* sigscheme/operations-srfi38.c
	  - (scm_p_srfi38_write_with_shared_structure):
	    * Fix SEGV on dot arg
	    * Simplify with PREPARE_PORT()
	    * Cleanup variable declaration
	* sigscheme/test/test-srfi38.scm
	  - Add test for the SEGV condition
	* sigscheme/TODO
	  - Update
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_make_vector): Fix SEGV on dot arg
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (scm_symbol_value): Replace the comment about the precondition
	    with SCM_ASSERT()
	
2006-01-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/env.c
	  - (scm_symbol_value): Move back to eval.c since it's not environment
	    implementation itself
	* sigscheme/eval.c
	  - (scm_symbol_value): Moved from env.c
	* sigscheme/sigschemeinternal.h
	  - Reorganize sections
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-r5rs-deepcadrs.c
	  - (scm_p_caaar, scm_p_caadr, scm_p_cadar, scm_p_cdaar, scm_p_cdadr,
	    scm_p_cddar, scm_p_caaaar, scm_p_caaadr, scm_p_caadar,
	    scm_p_caaddr, scm_p_cadaar, scm_p_cadadr, scm_p_caddar,
	    scm_p_cadddr, scm_p_cdaaar, scm_p_cdaadr, scm_p_cdadar,
	    scm_p_cdaddr, scm_p_cddaar, scm_p_cddadr, scm_p_cdddar,
	    scm_p_cddddr): Cosmetic change
	* sigscheme/TODO
	  - Update
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-siod.c
	  - (scm_set_verbose_level): Fix broken nullport handling for verbose
	    level 0
	  - (scm_s_undefine): Fix invalid reference to the result of SET()
	  - (null_port, saved_output_port, saved_error_port): Make
	    uninitialized
	  - (scm_p_verbose): Logical cleanup
	  - (scm_p_eof_val): Cosmetic change
	  - Include required files for future separate compilation
	* sigscheme/TODO
	  - Update
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-nonstd.c
	  - (scm_initialize_nonstd_features, scm_p_load_path,
	    make_loaded_str): Cosmetic change
	  - (scm_p_symbol_boundp):
	    * Ditto
	    * Cleanup variable declaration
	  - Include required files for future separate compilation
	* sigscheme/TODO
	  - Update
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit perform fixes/cleanups for operations.c
	
	* sigscheme/sigscheme.h
	  - Add description for condition testers
	  - (SCM_ENSURE_PROPER_LIST_TERMINATION,
	    SCM_CHECK_PROPER_LIST_TERMINATION, SCM_HAS_IMMEDIATE_INT,
	    SCM_HAS_IMMEDIATE_CHAR): New macro
	  - (scm_p_zerop, scm_p_positivep, scm_p_negativep, scm_p_oddp,
	    scm_p_evenp, scm_p_abs, scm_p_list_tail, scm_p_symbol2string,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase, scm_p_make_vector): Rename
	    args
	* sigscheme/sigschemeinternal.h
	  - (ENSURE_PROPER_LIST_TERMINATION, CHECK_PROPER_LIST_TERMINATION):
	    New macro
	* sigscheme/storage-fatty.h
	  - (SCM_SAL_HAS_IMMEDIATE_INT, SCM_SAL_HAS_IMMEDIATE_CHAR): New macro
	* sigscheme/storage-compact.h
	  - (SCM_SAL_HAS_IMMEDIATE_INT, SCM_SAL_HAS_IMMEDIATE_CHAR): New macro
	* sigscheme/storage.c
	  - (scm_make_string_internal): Add non-NULL assertion for str
	* sigscheme/operations.c
	  - (scm_p_string_append):
	    * Ditto
	    * Fix SEGV on invalid list traverser
	    * Add proper list termination check
	  - (scm_p_string_setd):
	    * Fix incorrect size calculation about terminal '\0'
	    * Suppless unneeded memory allocation
	    * Make efficient
	    * Cleanup variable declarations
	    * Cosmetic change
	  - (prepare_radix): New function copied from scm_p_number2string()
	  - (scm_p_number2string):
	    * Fix broken negative decimal conversion
	    * Fix lacking negative sign for non-decimal
	    * Reject non-R5RS radix even if !SCM_STRICT_R5RS
	    * Logical and cosmetic Cleanup
	  - (scm_p_string2number): Reject non-R5RS radix even if
	    !SCM_STRICT_R5RS
	
	  - (EQVP, EQUALP): New macro
	  - (MEM_OPERATION_BODY): Rename to MEMBER_BODY
	  - (MEMBER_BODY):
	    * Renamed from MEM_OPERATION_BODY()
	    * Add proper list termination check
	  - (ASSOC_BODY):
	    * New macro copied from scm_p_assoc()
	    * Make typecheck for each elem mandatory
	    * Add proper list termination check
	  - (scm_p_memq, scm_p_member): Simplify with MEMBER_BODY()
	  - (scm_p_memv):
	    * Ditto
	    * Optimize for OBJ_COMPACT
	  - (ASSOC_BODY): New macro
	  - (scm_p_assq, scm_p_assoc): Simplify with ASSOC_BODY()
	  - (scm_p_assv):
	    * Ditto
	    * Optimize for OBJ_COMPACT
	  - (scm_p_eqvp):
	    * Remove useless freecell detection
	    * Optimize for OBJ_COMPACT
	  - (scm_p_equalp):
	    * Ditto
	    * Optimize vector comparison
	    * Cleanup variable declarations
	  - (scm_p_charequalp): Optimize for OBJ_COMPACT
	  - (scm_p_stringequalp): Optimize
	
	  - (scm_p_listtail_internal, list_tail): Rename
	    scm_p_listtail_internal() to list_tail()
	  - (scm_p_list_tail, scm_p_list_ref):
	    * Rename args
	    * Follow the renaming of scm_p_listtail_internal()
	    * Modify error message
	    * Cleanup variable declaration
	  - (scm_p_vector): Simplify with scm_p_list2vector()
	  - (scm_p_values, scm_p_call_with_values): Simplify with list macros
	
	  - (scm_p_zerop, scm_p_positivep, scm_p_negativep, scm_p_oddp,
	    scm_p_evenp, scm_p_abs, scm_p_symbol2string,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_char2integer, scm_p_integer2char,
	    scm_p_char_upcase, scm_p_char_downcase):
	    * Rename args
	    * Cosmetic change
	  - (scm_p_add, scm_p_multiply, scm_p_subtract, scm_p_divide,
	    scm_p_quotient, scm_p_modulo, scm_p_remainder, scm_length,
	    scm_p_length, scm_p_make_string):
	    * Cleanup variable declarations
	    * Cosmetic change
	  - (scm_p_listp, scm_p_substring, scm_p_make_vector,
	    scm_p_list2vector, scm_p_vector_filld, scm_p_reverse, map_multiple_args):
	    * Ditto
	    * Logical cleanup
	  - (scm_p_string_filld):
	    * Cleanup variable declarations
	    * Logical cleanup
	    * Make efficient by s/strcpy/memcpy/
	    * Modify error message
	  - (scm_p_eqp, scm_p_numberp, scm_p_equal, scm_p_less, scm_p_less_eq,
	    scm_p_greater, scm_p_greater_eq, scm_p_max, scm_p_min, scm_p_not,
	    scm_p_booleanp, scm_p_pairp, scm_p_cons, scm_p_set_card,
	    scm_p_set_cdrd, scm_p_caar, scm_p_cadr, scm_p_cdar, scm_p_cddr,
	    scm_p_caddr, scm_p_cdddr, scm_p_list, scm_p_nullp,
	    scm_p_string2symbol, scm_p_charp, scm_p_stringp, scm_p_string,
	    scm_p_string_length, scm_p_string_ref, scm_p_string_copy,
	    scm_p_vectorp, scm_p_vector_length, scm_p_vector2list,
	    scm_p_procedurep, scm_p_for_each,
	    scm_p_call_with_current_continuation): Cosmetic change
	* sigscheme/test/test-num.scm
	  - Insert copyright header
	  - Add tests for number->string
	* sigscheme/TODO
	  - Update
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - (scm_s_lambda, scm_s_if, scm_s_setd, scm_s_cond_internal,
	    scm_s_and, scm_s_or, scm_s_letstar, scm_s_letrec, scm_s_begin,
	    scm_s_define): Simplify and cleanup
	  - (scm_s_let):
	    * Ditto
	    * Fix loose argument check
	  - (scm_s_do): Add FIXME comment
	  - (scm_s_quasiquote): Cosmetic change
	* sigscheme/TODO
	  - Update
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (scm_call, call_closure): Cosmetic change
	  - (call):
	    * Remove local variable initializations
	    * Replace SCM_TYPE() expensive for OBJ_COMPACT with predicates
	    * Replace runtime check with assertions
	  - (scm_eval): Remove local variable initializations
	* sigscheme/TODO
	  - Update
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/env.c
	  - (scm_add_environment): Replace a runtime check into contract
	* sigscheme/TODO
	  - Update
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (scm_p_scheme_report_environment): Replace SCM_INTERACTION_ENV
	    with SCM_R5RS_ENV
	  - (scm_p_null_environment): Replace SCM_INTERACTION_ENV with
	    SCM_NULL_ENV
	
2006-01-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/syntax.c
	  - New file copied from eval.c
	  - (define_internal, struct _qquote_result, qquote_result,
	    qquote_internal, enum _tr_msg, tr_msg, struct _list_translator,
	    list_translator, struct _vector_translator, vector_translator,
	    struct _sequence_translator, sequence_translator, TRL_INIT,
	    TRL_GET_OBJ, TRL_NEXT, TRL_ENDP, TRL_GET_SUBLS, TRL_SET_SUBLS,
	    TRL_EXTRACT, TRL_CALL, TRV_INIT, TRV_GET_OBJ, TRV_NEXT, TRV_ENDP,
	    TRV_EXTRACT, TRV_CALL, TR_CALL, TR_GET_OBJ, TR_NEXT, TR_ENDP,
	    TR_EXTRACT, listran, vectran, scm_s_quote, scm_s_lambda, scm_s_if,
	    scm_s_setd, scm_s_cond_internal, scm_s_cond, scm_s_case,
	    scm_s_and, scm_s_or, scm_s_let, scm_s_letstar, scm_s_letrec,
	    scm_s_begin, scm_s_do, scm_s_delay, scm_s_quasiquote,
	    scm_s_unquote, scm_s_unquote_splicing, scm_s_define): Moved from
	    eval.c
	* sigscheme/eval.c
	  - (define_internal, struct _qquote_result, qquote_result,
	    qquote_internal, enum _tr_msg, tr_msg, struct _list_translator,
	    list_translator, struct _vector_translator, vector_translator,
	    struct _sequence_translator, sequence_translator, TRL_INIT,
	    TRL_GET_OBJ, TRL_NEXT, TRL_ENDP, TRL_GET_SUBLS, TRL_SET_SUBLS,
	    TRL_EXTRACT, TRL_CALL, TRV_INIT, TRV_GET_OBJ, TRV_NEXT, TRV_ENDP,
	    TRV_EXTRACT, TRV_CALL, TR_CALL, TR_GET_OBJ, TR_NEXT, TR_ENDP,
	    TR_EXTRACT, listran, vectran, scm_s_quote, scm_s_lambda, scm_s_if,
	    scm_s_setd, scm_s_cond_internal, scm_s_cond, scm_s_case,
	    scm_s_and, scm_s_or, scm_s_let, scm_s_letstar, scm_s_letrec,
	    scm_s_begin, scm_s_do, scm_s_delay, scm_s_quasiquote,
	    scm_s_unquote, scm_s_unquote_splicing, scm_s_define): Move to
	    syntax.c
	* sigscheme/sigscheme.h
	* sigscheme/sigschemeinternal.h
	  - Reorganize declaration section
	* sigscheme/Makefile.am
	  - Add syntax.c to sigschemefunctable-r5rs.c
	  - (libsscm_la_SOURCES): Add syntax.c
	* sigscheme/TODO
	  - Update
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/env.c
	  - New file copied from eval.c
	  - (scm_extend_environment, scm_add_environment,
	    scm_lookup_environment, lookup_frame, scm_symbol_value): Moved
	    from eval.c
	* sigscheme/eval.c
	  - (scm_extend_environment, scm_add_environment,
	    scm_lookup_environment, lookup_frame, scm_symbol_value): Move
	    to env.c
	* sigscheme/sigschemeinternal.h
	  - Reorganize declaration section
	* sigscheme/Makefile.am
	  - (libsscm_la_SOURCES): Add env.c
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This fix is only performed to stop the explicit test failure
	  on runtest.sh. I'll not perform comprehensive debug or test
	  writing for string immutability, at least for now.
	
	* sigscheme/operations.c
	  - (scm_p_substring): Fix broken range check
	* sigscheme/test/test-string.scm
	  - Fix incorrect tests of "substring immutable", and add some more
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (struct ScmCell_): Rename member names
	  - (SCM_SAL_FUNC_TYPECODE, SCM_SAL_FUNC_CFUNC,
	    SCM_SAL_VALUEPACKET_VALUES): Follow the renamings
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (struct ScmCell_):
	    * Rename member names
	    * Remove internal struct names unneeded and conflicting with
	      ScmObjType
	  - (SCM_SAL_INT_VALUE, SCM_SAL_SYMBOL_NAME, SCM_SAL_SYMBOL_SET_NAME,
	    SCM_SAL_SYMBOL_VCELL, SCM_SAL_CHAR_VALUE, SCM_SAL_C_POINTER_VALUE,
	    SCM_SAL_C_FUNCPOINTER_VALUE, SCM_SAL_C_FUNCPOINTER_SET_VALUE):
	    Follow the renamings
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit generarize string mutability-related definitions to
	  other objects. If we need to implement constant list or vector, it
	  can be reused
	
	* sigscheme/storage-fatty.h
	  - (enum ScmStrMutability, enum ScmMutability): Rename
	    ScmStrMutability to ScmMutability
	  - (SCM_STR_IMMUTABLE, SCM_STR_MUTABLE): Rename to SCM_(IM)?MUTABLE
	  - (SCM_IMMUTABLE, SCM_MUTABLE): Renamed from SCM_STR_*
	  - (SCM_STRING_MUTABILITY, SCM_SAL_STRING_MUTABLEP,
	    SCM_SAL_STRING_SET_IMMUTABLE): Follow the renamings
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/style
	  - Add "Cosmetic style" section
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit make the Storage Abstraction Layer standard. The old
	  implementation is deleted. Fetch an old revision if you want to
	  refer some part of the former implementation
	
	* sigscheme/sigschemetype-compact.h
	  - Removed
	* sigscheme/config.h
	  - (SCM_USE_STORAGE_ABSTRACTION_LAYER): Removed
	* sigscheme/sigscheme.h
	  - Remove the codes for !SCM_USE_STORAGE_ABSTRACTION_LAYER
	* sigscheme/sigschemeinternal.h
	  - Remove the codes for !SCM_USE_STORAGE_ABSTRACTION_LAYER
	  - (SCM_FREECELLP, SCM_AS_FREECELL, SCM_FREECELL_CAR,
	    SCM_FREECELL_CDR, SCM_ENTYPE_FREECELL, SCM_FREECELL_SET_CAR,
	    SCM_FREECELL_SET_CDR): Removed
	* sigscheme/storage-gc.c
	  - Remove the codes for !SCM_USE_STORAGE_ABSTRACTION_LAYER
	  - (SCM_UNMARKER, SCM_MARKER, SCM_IS_MARKED, SCM_IS_UNMARKED,
	    SCM_DO_MARK, SCM_DO_UNMARK): Removed
	* sigscheme/TODO
	  - Update
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_REINTERPRET_CAST): Removed. Use ordinary cast with uintptr_t
	    instead
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_WORD_CAST): Removed
	* sigscheme/storage-compact.h
	  - (SCM_SAL_FUNC_CFUNC, SCM_SAL_C_FUNCPOINTER_VALUE): Replace
	    SCM_WORD_CAST() with (uintptr_t)
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - Remove a FIXME comment related to stdint.h
	* sigscheme/encoding.c
	  - Ditto
	
	* sigscheme/alloc.c
	* sigscheme/storage-gc.c
	* sigscheme/print.c
	  - Include stdint.h
	  - (uintptr_t): Removed
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (scm_null, scm_true, scm_false, scm_eof, scm_unbound, scm_undef):
	    Rename to scm_const_* to avoid conflict with the scm_bool
	    introduced in r2752
	  - (scm_const_null, scm_const_true, scm_const_false, scm_const_eof,
	    scm_const_unbound, scm_const_undef): Renamed from scm_*
	  - (SCM_SAL_NULL, SCM_SAL_TRUE, SCM_SAL_FALSE, SCM_SAL_EOF,
	    SCM_SAL_UNBOUND, SCM_SAL_UNDEF): Follow the renamings
	* sigscheme/storage.c
	  - (scm_null, scm_true, scm_false, scm_eof, scm_unbound, scm_undef):
	    Rename to scm_const_* to avoid conflict with the scm_bool
	    introduced in r2752
	  - (scm_const_null, scm_const_true, scm_const_false, scm_const_eof,
	    scm_const_unbound, scm_const_undef): Renamed from scm_*
	  - (scm_init_storage, initialize_special_constants): Follow the renamings
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_bool): New type
	  - (scm_false, scm_true): New macro
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_VALUEPACKET_VALUES): Move to sigschemeinternal.h
	* sigscheme/sigschemeinternal.h
	  - (SCM_VALUEPACKET_VALUES): Moved from sigscheme.h
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_p_c_length, scm_length): Rename scm_p_c_length() to scm_length()
	* sigscheme/operations.c
	  - (scm_p_c_length, scm_length): Rename scm_p_c_length() to scm_length()
	* sigscheme/sigschemeinternal.h
	* sigscheme/operations.c
	* sigscheme/eval.c
	  - Follow the renaming by following script
	    perl -i -pe 's/\bscm_p_c_length\b\b/scm_length/g' sigscheme/*.[ch]
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (scm_use): Reform as GC-safe wrapper to scm_use_internal()
	  - (scm_use_internal): New static function
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_require): New function decl
	* sigscheme/operations-nonstd.c
	  - (scm_require): New function
	  - (scm_require_internal): New static function
	  - (scm_p_require): Follow the changes
	  - (create_loaded_str): Rename to make_loaded_str()
	  - (make_loaded_str):
	    * Renamed from create_loaded_str()
	    * Change the arg to const char *
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_load): Change return type to void
	* sigscheme/io.c
	  - (scm_load): Change return type to void
	  - (scm_load_internal): Change return type to void
	* uim/uim-scm.c
	  - (uim_scm_load_file): Remove FIXME comment
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ENSURE_ALLOCATED): Move code position
	* sigscheme/operations.c
	  - (COMPARATOR_BODY): Move code position to avoid confusion about
	    pseudo scope for the name. Since the macro is used from other than
	    scm_p_equal(), it should be defined outside of the function to
	    indicate the scope
	* sigscheme/io.c
	  - (PREPARE_PORT): Cosmetic change
	* sigscheme/operations-srfi60.c
	  - (BITWISE_OPERATION_BODY): Ditto
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ENSURE_NO_MORE_ARG, ENSURE_PROPER_ARG_LIST): Remove the FIXME
	    comment. I've checked all ASSERT_*() and no one need to be
	    replaced with these
	* sigscheme/eval.c
	  - (scm_s_define): Remove useless error check. Since it cannot
	    prevent that possible SCM_INVALID passing to define_internal() if
	    the !LIST_1_P() check does not exist, surely useless
	* sigscheme/TODO
	  - Update
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_FREECELLP, SCM_AS_FREECELL, SCM_FREECELL_CAR,
	    SCM_FREECELL_CDR, SCM_ENTYPE_FREECELL, SCM_FREECELL_SET_CAR,
	    SCM_FREECELL_SET_CDR): Removed for
	    (!SCM_USE_STORAGE_ABSTRACTION_LAYER && !SCM_OBJ_COMPACT)
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_TYPE, ENSURE_TYPE): Rename ASSERT_TYPE() to ENSURE_TYPE()
	  - (ASSERT_INTP, ASSERT_CONSP, ASSERT_SYMBOLP, ASSERT_CHARP,
	    ASSERT_STRINGP, ASSERT_FUNCP, ASSERT_CLOSUREP, ASSERT_VECTORP,
	    ASSERT_PORTP, ASSERT_CONTINUATIONP, ASSERT_PROCEDUREP,
	    ASSERT_ENVP, ASSERT_ERROBJP, ASSERT_LISTP, ASSERT_MUTABLEP):
	    Rename to ENSURE_*()
	  - (ENSURE_INT, ENSURE_CONS, ENSURE_SYMBOL, ENSURE_CHAR,
	    ENSURE_STRING, ENSURE_FUNC, ENSURE_CLOSURE, ENSURE_VECTOR,
	    ENSURE_PORT, ENSURE_CONTINUATION, ENSURE_PROCEDURE, ENSURE_ENV,
	    ENSURE_ERROBJ, ENSURE_LIST, ENSURE_MUTABLE): Renamed from
	    ASSERT_*P()
	* sigscheme/read.c
	* sigscheme/error.c
	* sigscheme/operations-srfi34.c
	* sigscheme/operations-srfi6.c
	* sigscheme/operations-srfi60.c
	* sigscheme/io.c
	* sigscheme/sigschemeinternal.h
	* sigscheme/operations.c
	* sigscheme/operations-nonstd.c
	* sigscheme/operations-srfi1.c
	* sigscheme/sigscheme.c
	* sigscheme/operations-siod.c
	* sigscheme/eval.c
	* sigscheme/operations-srfi23.c
	* sigscheme/print.c
	  - Follow the renamings by following script
	    perl -i -pe 's/\bASSERT_([A-Z]+)P\b/ENSURE_\1/g' sigscheme/*.[ch]
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ENSURE_NO_MORE_ARG, ENSURE_PROPER_ARG_LIST): New macro which
	    implementation copied from correspondance of each ASSERT_*()
	  - (ASSERT_NO_MORE_ARG, ASSERT_PROPER_ARG_LIST): Rewrite with
	    ENSURE_*()
	  - (NO_MORE_ARG): Cosmetic change
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_ASSERT_LIVE_PORT, SCM_ENSURE_LIVE_PORT): Rename
	    SCM_ASSERT_LIVE_PORT to SCM_ENSURE_LIVE_PORT
	* sigscheme/io.c
	* sigscheme/print.c
	* sigscheme/operations-srfi6.c
	  - Follow the renaming by following script
	    perl -i -pe 's/ASSERT_LIVE_PORT\b/ENSURE_LIVE_PORT/g' sigscheme/*.[ch]
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_ASSERT_ALLOCATED, SCM_ENSURE_ALLOCATED): Rename
	    SCM_ASSERT_ALLOCATED to SCM_ENSURE_ALLOCATED
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_ALLOCATED, ENSURE_ALLOCATED):
	    * Rename ASSERT_ALLOCATED to ENSURE_ALLOCATED
	    * Follow the renaming
	* sigscheme/error.c
	* sigscheme/alloc.c
	  - Follow the renamings by following script
	    perl -i -pe 's/ASSERT_ALLOCATED\b/ENSURE_ALLOCATED/g' sigscheme/*.[ch]
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/MEMO.tkng
	* sigscheme/MEMO
	  - Rename MEMO to MEMO.tkng
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/mbcport.c
	* sigscheme/mbcport.h
	* sigscheme/sbcport.c
	* sigscheme/sbcport.h
	* sigscheme/basecport.c
	* sigscheme/baseport.h
	* sigscheme/operations-srfi34.c
	* sigscheme/strport.c
	* sigscheme/strport.h
	* sigscheme/nullport.c
	* sigscheme/nullport.h
	* sigscheme/test/test-syntax.scm
	* sigscheme/fileport.c
	* sigscheme/fileport.h
	  - Trim duplicate space in copyright by following script
	    svn ls -R | egrep '^sigscheme/' | egrep -v '/$' | xargs perl -i -pe 's/<(\S+)\s+AT\s+(\S+)>/<\1 AT \2>/'
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	* sigscheme/operations-r5rs-deepcadrs.c
	* sigscheme/mbcport.c
	* sigscheme/config.h
	* sigscheme/mbcport.h
	* sigscheme/read.c
	* sigscheme/sbcport.c
	* sigscheme/sbcport.h
	* sigscheme/basecport.c
	* sigscheme/baseport.h
	* sigscheme/encoding.c
	* sigscheme/storage-protection.c
	* sigscheme/error.c
	* sigscheme/encoding.h
	* sigscheme/operations-srfi34.c
	* sigscheme/c_template
	* sigscheme/operations-srfi38.c
	* sigscheme/sigschemetype-compact.h
	* sigscheme/storage.c
	* sigscheme/operations-srfi2.c
	* sigscheme/operations-srfi6.c
	* sigscheme/operations-srfi8.c
	* sigscheme/strport.c
	* sigscheme/strport.h
	* sigscheme/operations-srfi60.c
	* sigscheme/sigschemefunctable.c
	* sigscheme/sigschemefunctable.h
	* sigscheme/h_template
	* sigscheme/io.c
	* sigscheme/sigschemeinternal.h
	* sigscheme/storage-continuation.c
	* sigscheme/nullport.c
	* sigscheme/operations.c
	* sigscheme/nullport.h
	* sigscheme/operations-nonstd.c
	* sigscheme/storage-gc.c
	* sigscheme/storage-compact.h
	* sigscheme/test/test-srfi2.scm
	* sigscheme/test/test-syntax.scm
	* sigscheme/test/test-eval.scm
	* sigscheme/test/test-srfi6.scm
	* sigscheme/test/test-define.scm
	* sigscheme/test/test-exp.scm
	* sigscheme/test/test-tail-rec.scm
	* sigscheme/test/test-string.scm
	* sigscheme/test/test-srfi60.scm
	* sigscheme/test/test-equation.scm
	* sigscheme/test/test-enc-utf8.scm
	* sigscheme/test/unittest.scm
	* sigscheme/test/test-vector.scm
	* sigscheme/test/test-enc-eucjp.scm
	* sigscheme/test/test-srfi34-2.scm
	* sigscheme/test/test-continuation.scm
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-list.scm
	* sigscheme/test/test-enc-sjis.scm
	* sigscheme/test/test-enc-eucgeneric.scm
	* sigscheme/test/test-char.scm
	* sigscheme/test/test-srfi38.scm
	* sigscheme/test-compact.c
	* sigscheme/operations-srfi1.c
	* sigscheme/storage-symbol.c
	* sigscheme/sigscheme.c
	* sigscheme/experimental/imm-const/imm-test.c
	* sigscheme/sigscheme.h
	* sigscheme/operations-siod.c
	* sigscheme/script/build_func_table.rb
	* sigscheme/script/check_declare_func_typo.rb
	* sigscheme/script/functable-header.txt
	* sigscheme/script/scm_decl.rb
	* sigscheme/script/check_initialize_scm_null.rb
	* sigscheme/fileport.c
	* sigscheme/main.c
	* sigscheme/eval.c
	* sigscheme/operations-srfi23.c
	* sigscheme/fileport.h
	* sigscheme/alloc.c
	* sigscheme/print.c
	  - Update Copyright by following script
	    svn ls -R | egrep '^sigscheme/' | egrep -v '/$' | xargs perl -i -pe 's/\b(200\d)([,-\s]+200\d)*\s+(Kazuki|YamaKen|Jun)\b/\1-2006 \3/'
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	* sigscheme/operations-r5rs-deepcadrs.c
	* sigscheme/mbcport.c
	* sigscheme/config.h
	* sigscheme/mbcport.h
	* sigscheme/read.c
	* sigscheme/sbcport.c
	* sigscheme/sbcport.h
	* sigscheme/basecport.c
	* sigscheme/baseport.h
	* sigscheme/encoding.c
	* sigscheme/storage-protection.c
	* sigscheme/error.c
	* sigscheme/encoding.h
	* sigscheme/operations-srfi34.c
	* sigscheme/c_template
	* sigscheme/operations-srfi38.c
	* sigscheme/sigschemetype-compact.h
	* sigscheme/storage.c
	* sigscheme/operations-srfi2.c
	* sigscheme/operations-srfi6.c
	* sigscheme/operations-srfi8.c
	* sigscheme/strport.c
	* sigscheme/strport.h
	* sigscheme/operations-srfi60.c
	* sigscheme/sigschemefunctable.c
	* sigscheme/sigschemefunctable.h
	* sigscheme/h_template
	* sigscheme/io.c
	* sigscheme/sigschemeinternal.h
	* sigscheme/storage-continuation.c
	* sigscheme/nullport.c
	* sigscheme/operations.c
	* sigscheme/nullport.h
	* sigscheme/operations-nonstd.c
	* sigscheme/storage-gc.c
	* sigscheme/storage-compact.h
	* sigscheme/test/test-srfi2.scm
	* sigscheme/test/test-syntax.scm
	* sigscheme/test/test-eval.scm
	* sigscheme/test/test-srfi6.scm
	* sigscheme/test/test-define.scm
	* sigscheme/test/test-exp.scm
	* sigscheme/test/test-tail-rec.scm
	* sigscheme/test/test-string.scm
	* sigscheme/test/test-srfi60.scm
	* sigscheme/test/test-equation.scm
	* sigscheme/test/test-enc-utf8.scm
	* sigscheme/test/unittest.scm
	* sigscheme/test/test-vector.scm
	* sigscheme/test/test-enc-eucjp.scm
	* sigscheme/test/test-srfi34-2.scm
	* sigscheme/test/test-continuation.scm
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-list.scm
	* sigscheme/test/test-enc-sjis.scm
	* sigscheme/test/test-enc-eucgeneric.scm
	* sigscheme/test/test-char.scm
	* sigscheme/test/test-srfi38.scm
	* sigscheme/test-compact.c
	* sigscheme/operations-srfi1.c
	* sigscheme/storage-symbol.c
	* sigscheme/sigscheme.c
	* sigscheme/experimental/imm-const/imm-test.c
	* sigscheme/sigscheme.h
	* sigscheme/operations-siod.c
	* sigscheme/script/build_func_table.rb
	* sigscheme/script/check_declare_func_typo.rb
	* sigscheme/script/functable-header.txt
	* sigscheme/script/scm_decl.rb
	* sigscheme/script/check_initialize_scm_null.rb
	* sigscheme/fileport.c
	* sigscheme/main.c
	* sigscheme/eval.c
	* sigscheme/operations-srfi23.c
	* sigscheme/fileport.h
	* sigscheme/alloc.c
	* sigscheme/print.c
	  - Change Copyright format to popular one, and mangle mail address,
	    by following script
	    egrep -v '/$' ls.txt | xargs perl -i -pe 's/\bCopyright\s+\(C\)\s+(\d{4})([,-]\d{4})*\s+by\s+(Kazuki|YamaKen|Jun|Shiro)\b/Copyright (C) \1\2 \3/'
	    egrep -v '/$' ls.txt | xargs perl -i -pe 's/\bCopyright\s+\(C\)\s+(\d{4})([,-]\d{4})*\s+(Kazuki|YamaKen|Jun|Shiro)\b([^\(]*)\s+\(([^\)]+)\s*\b(@|AT)\s*\b([^\)]+)\)/Copyright (C) \1\2 \3\4 <\5 AT \7>/'
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - Removed
	* sigscheme/sigscheme.h
	  - Deprecate sigschemetype.h
	* sigscheme/Makefile.am
	  - (EXTRA_DIST): Add storage-{fatty,compact}.h
	  - (libsscm_la_SOURCES): Remove sigschemetype.h
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_MUTABLEP): Cosmetic change
	
2006-01-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (enum ScmStrMutationType, enum ScmStrMutability): Rename
	    ScmStrMutationType to ScmStrMutability
	  - (SCM_STRING_MUTATION_TYPE_MASK, SCM_STRING_MUTABILITY_MASK):
	    Rename SCM_STRING_MUTATION_TYPE_MASK to SCM_STRING_MUTABILITY_MASK
	  - (SCM_STRING_MUTATION_TYPE, SCM_STRING_MUTABILITY): Rename
	    SCM_STRING_MUTATION_TYPE to SCM_STRING_MUTABILITY
	  - (SCM_STRING_STR_VALUE_MASK, SCM_SAL_STRING_SET_STR,
	    SCM_SAL_STRING_MUTABLEP): Follow the renaming
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_MUTABLEP): Fix invalid reference to non-SAL API
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (SCM_STRING_MUTATION_TYPE_MASK): Make always safe
	  - (SCM_SAL_STRING_STR, SCM_STRING_MUTATION_TYPE,
	    SCM_SAL_STRING_SET_MUTABLE, SCM_SAL_STRING_SET_IMMUTABLE):
	    * Make 64bit-safe
	    * Cosmetic change
	  - (SCM_SAL_STRINGP, SCM_SAL_ENTYPE_STRING, SCM_SAL_STRING_LEN,
	    SCM_SAL_STRING_SET_LEN): Cosmetic change
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (SCM_SAL_STRING_SET_STR): Fix broken mutation bit retrieval. This
	    made the test in test-r4rs.scm passed
	* sigscheme/operations.c
	  - (scm_p_substring): Fix incorrect mutability check. This made the
	    test in test-apply.scm passed
	* sigscheme/TODO
	  - Update
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_token): Support multiple Unicode encodings
	* sigscheme/sigschemeinternal.h
	  - (scm_identifier_codec): New variable decl
	* sigscheme/sigscheme.c
	  - (scm_identifier_codec): New variable
	  - (scm_initialize_internal): Add initialization for scm_identifier_codec
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_integer2char, scm_p_string_setd): Simplify with
	    SCM_CHARCODEC_CHAR_LEN()
	* sigscheme/TODO
	  - Update
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.c
	  - (eucjp_char_len, euc_char_len, utf8_char_len, sjis_char_len): Fix
	    null character handling
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ENSURE_STATEFUL_CODEC, ENSURE_STATELESS_CODEC): Fix broken exp
	* sigscheme/operations.c
	  - (scm_p_string_ref): Support stateful encoding
	  - (scm_p_string_append): Add FIXME comment about stateful encoding
	  - (scm_p_string_setd, scm_p_string_filld): Reject stateful encoding
	* sigscheme/TODO
	  - Update
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_token, read_char, read_string): Reject multibyte char if not
	    an Unicode port
	  - (parse_unicode_sequence): Fix \Uxxxxxxxx
	* sigscheme/test/test-enc-utf8.scm
	* sigscheme/test/test-enc-eucjp.scm
	* sigscheme/test/test-enc-eucgeneric.scm
	* sigscheme/test/test-enc-sjis.scm
	  - Add test for SRFI-75
	* sigscheme/TODO
	  - Update
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (enum ScmCodedCharSet): Rename SCM_CCS_UNICODE to SCM_CCS_UCS4
	* sigscheme/encoding.c
	  - (utf8_ccs): Follow the change
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ENSURE_STATEFUL_CODEC, ENSURE_STATELESS_CODEC): New macro
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_port_encoding): Removed
	  - (scm_port_codec): New function decl
	* sigscheme/io.c
	  - (scm_port_encoding): Removed
	  - (scm_port_codec): New function
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (SCM_CHARCODEC_STATEFULP): New macro
	  - (ScmCharCodecMethod_statefulp): New type
	  - (struct ScmCharCodecVTbl_): Add new member 'statefulp'
	* sigscheme/encoding.c
	  - (pred_always_true, pred_always_false): New static function
	  - (utf8_codec, eucjp_codec, euccn_codec, euckr_codec, sjis_codec,
	    unibyte_codec): Add pred_always_false as statefulp
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_CHARPORT_ENCODING): Removed
	  - (SCM_CHARPORT_CODEC, SCM_CHARPORT_CCS): New macro
	  - (SCM_CHARPORT_ENCODING): Follow the API change
	  - (ScmCharPortMethod_encoding): Removed
	  - (ScmCharPortMethod_codec): New type
	  - (struct ScmCharPortVTbl_):
	    * Remove member 'encoding'
	    * Add new member 'codec'
	* sigscheme/basecport.c
	  - (basecport_encoding): Removed
	  - (basecport_codec): New function
	  - (ScmBaseCharPort_vtbl): Follow the specification change of struct
	    ScmCharPortVTbl_
	* sigscheme/sbcport.c
	  - (codec): New static variable
	  - (sbcport_encoding): Removed
	  - (sbcport_codec): New function
	  - (scm_sbcport_init): Follow the API change
	* sigscheme/mbcport.c
	  - (mbcport_encoding): Removed
	  - (mbcport_codec): New function
	  - (scm_mbcport_init): Follow the API change
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (SCM_CHARCODEC_CCS, SCM_CHARCODEC_CHAR_LEN): New macro
	  - (enum ScmCodedCharSet, ScmCharCodecMethod_ccs,
	    ScmCharCodecMethod_char_len): New type
	  - (struct ScmCharCodecVTbl_): Add new member 'ccs' and 'char_len'
	* sigscheme/encoding.c
	  - (eucjp_ccs, eucjp_char_len, sjis_ccs, sjis_char_len, euc_char_len,
	    euccn_ccs, euckr_ccs, utf8_ccs, utf8_char_len, unibyte_ccs,
	    unibyte_char_len): New function
	  - (utf8_codec_vtbl, euccn_codec_vtbl, eucjp_codec_vtbl,
	    euckr_codec_vtbl, sjis_codec_vtbl, unibyte_codec_vtbl): Follow the
	    specification change of ScmCharCodecVTbl
	
2006-01-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.c
	  - (sjis_int2str): Fix argument type
	
2005-12-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_CHICKEN_DEBUG): New macro
	* sigscheme/sigscheme.h
	  - (SCM_ASSERT): Add alternative implementation for each
	    SCM_CHICKEN_DEBUG and !SCM_DEBUG
	  - (SCM_ENSURE): New macro
	  - (SCM_ASSERT_ALLOCATED, SCM_ASSERT_LIVE_PORT): Add FIXME comment
	    about future renaming
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_TYPE, ASSERT_INTP, ASSERT_ALLOCATED, ASSERT_MUTABLEP): Add
	    FIXME comment about future renaming
	* sigscheme/TODO
	  - Update
	
2005-12-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - (tn): New alias
	  - Replace all testnames with the procedure test-name. No test logic
	    is changed
	
2005-12-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (total-report): Replace " : " in message with ": "
	  - (report-error):
	    * Ditto
	    * Make the arg-name consistent with other place in the file
	
2005-12-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (assert):
	    * Add new arg 'test-name'
	    * Display test-name instead of err-msg on *test-track-progress*
	  - (assert-true, assert-false, assert-eq?, assert-equal?,
	    assert-error): Follow the interface change of assert
	  - (test-name): New procedure
	* sigscheme/TODO
	  - Update
	
2005-12-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage.c
	* sigscheme/storage-continuation.c
	* sigscheme/storage-symbol.c
	* sigscheme/io.c
	* sigscheme/read.c
	* sigscheme/eval.c
	* sigscheme/operations.c
	* sigscheme/operations-srfi1.c
	* sigscheme/operations-srfi6.c
	* sigscheme/operations-srfi34.c
	* sigscheme/operations-srfi60.c
	* sigscheme/operations-siod.c
	* sigscheme/sigscheme.c
	  - Replace all scm_make_*() with MAKE_*()
	    ruby -i -pe 'gsub!(/^(.+)\bscm_make_(int|cons|symbol|char|string|string_copying|immutable_string|immutable_string_copying|func|closure|vector|port|continuation)\b/) { |m| $1 + if ($2 == "cons") then "CONS" else "MAKE_#{$2.upcase}" end}' sigscheme/*.c
	
	* uim/uim-scm.c
	* uim/uim-compat-scm.c
	  - Replace all scm_make_cons() with SCM_CONS()
	    ruby -i -pe 'gsub!(/^(.+)\bscm_make_(int|cons|symbol|char|string|string_copying|immutable_string|immutable_string_copying|func|closure|vector|port|continuation)\b/) { |m| "#{$1}SCM_" + if ($2 == "cons") then "CONS" else "MAKE_#{$2.upcase}" end}' uim/*.c
	
2005-12-27 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - (SCM_ALIGN_SCMCELL): renamed from SCM_ALIGNMENT_SCMOBJ
	  - (SCM_ALIGN_EVEN): renamed from SCM_ALIGNMENT_2BYTE
	  - (SCM_ALIGN_NONE): renamed from SCM_ALIGNMENT_NOTALIGNED
	  - (SCM_OTHERS_CAR_VAL_ALIGN_NONEP): renamed from
	    SCM_OTHERS_CAR_IS_NOTALIGNED_VAL
	
2005-12-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-12-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-siod.c
	  - (scm_p_set_symbol_valued): Make compilable with SCM_OBJ_COMPACT
	
2005-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage.c
	* sigscheme/storage-gc.c
	* sigscheme/main.c
	  - Cosmetic change
	
2005-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (scm_init_error): Fix possible GC corruption with
	    scm_gc_protect_with_init()
	* sigscheme/operations-srfi34.c
	  - (scm_initialize_srfi34): Ditto
	* sigscheme/storage.c
	  - (scm_init_storage): Ditto
	* sigscheme/operations-srfi6.c
	  - (scm_p_srfi6_open_input_string): Ditto
	* sigscheme/io.c
	  - (scm_init_io): Ditto
	* sigscheme/storage-continuation.c
	  - (scm_init_continuation, initialize_dynamic_extent,
	    initialize_continuation_env): Ditto
	* sigscheme/sigscheme.c
	  - (scm_initialize_internal): Ditto
	* sigscheme/operations-siod.c
	  - (scm_initialize_siod): Ditto
	* sigscheme/main.c
	  - (main): Ditto
	
2005-12-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_gc_protect_with_init): New function decl
	* sigscheme/storage-gc.c
	  - (scm_gc_protect_with_init): New function
	
2005-12-21 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage.c
	  - (scm_type): handle freecell
	
2005-12-21 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-gc.c
	  - (add_heap): not to print debug message in an initialization
	    phase
	
2005-12-21 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage.c
	  - (scm_type): use SCM_CELL_C[AD]R
	
2005-12-21 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - implement pointer handling types' accessor
	
	  - (SCM_ALIGNMENT_SCMOBJ
	     SCM_ALIGNMENT_2BYTE
	     SCM_ALIGNMENT_NOTALIGNED
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_SYMBOL
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_STRING
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_VECTOR
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_VALUES
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_FUNC
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_PORT
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_CONTINUATION
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_C_POINTER
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_C_FUNCPOINTER
	     SCM_OTHERS_CAR_VAL_ALIGNMENT_FREECELL
	     SCM_OTHERS_CAR_IS_NOTALIGNED_VAL
	     SCM_OTHERS_CDR_CARLSB_VAL_OFFSET
	     SCM_OTHERS_CDR_CARLSB_VAL_MASK
	     SCM_OTHERS_CDR_CARLSB_VAL
	     SCM_SAL_FUNC_CFUNC
	     SCM_SAL_FUNC_SET_CFUNC
	     SCM_SAL_FUNC_TYPECODE
	     SCM_SAL_FUNC_SET_TYPECODE
	     SCM_SAL_C_POINTER_VALUE
	     SCM_SAL_C_POINTER_SET_VALUE
	     SCM_SAL_C_FUNCPOINTER_VALUE
	     SCM_SAL_C_FUNCPOINTER_SET_VALUE
	     SCM_SAL_RECLAIM_CELL): new macro
	
	  - (SCM_OTHERS_CAR_VAL
	     SCM_OTHERS_SET_CAR_VAL
	     SCM_OTHERS_CDR_VAL
	     SCM_OTHERS_SET_CDR_VAL): handle unalined CAR's LSB value
	
	  - (SCM_SAL_TYPE): follow the renaming
	
	  - (SCM_SAL_SYMBOL_VCELL
	     SCM_SAL_VECTOR_VEC
	     SCM_SAL_VECTOR_LEN
	     SCM_SAL_PORT_IMPL
	     SCM_SAL_PORT_SET_IMPL
	     SCM_SAL_FREECELL_NEXT
	     SCM_SAL_FREECELL_SET_NEXT): add type info as argument
	
	  - (SCM_PTR_OTHERSBITS
	     SCM_PTR_RAW_LSB
	     SCM_PTR_LSB
	     SCM_PTR_VALUE
	     SCM_SET_PTR_OTHERSBITS
	     SCM_SET_PTR_LSB
	     SCM_SET_PTR_VALUE
	     SCM_FUNC_CFUNC
	     SCM_FUNC_SET_CFUNC
	     SCM_FUNC_TYPECODE
	     SCM_FUNC_SET_TYPECODE
	     SCM_C_POINTER_VALUE
	     SCM_C_POINTER_SET_VALUE
	     SCM_C_FUNCPOINTER_VALUE
	     SCM_C_FUNCPOINTER_SET_VALUE): removed
	
	
2005-12-21 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test-compact.c
	  - (scm_check_freecell): new func
	  - (scm_check_char, scm_check_int, scm_check_func,
	     scm_check_closure): move section
	  - (check_type): handle FREECELL
	
2005-12-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_MAKE_CONS, SCM_MAKE_SYMBOL, SCM_MAKE_FUNC, SCM_MAKE_CLOSURE,
	    SCM_MAKE_VECTOR, SCM_MAKE_PORT): Fix operator association precedence
	
2005-12-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (scm_init_io): Fix possible object corruption on GC
	* sigscheme/storage.c
	  - (scm_init_storage): Standardize GC protection procedure although
	    this cases do not cause the corruption
	* sigscheme/storage-continuation.c
	  - (scm_init_continuation, initialize_dynamic_extent,
	    initialize_continuation_env): Ditto
	* sigscheme/operations-siod.c
	  - (scm_initialize_siod): Ditto
	
2005-12-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_CONS): Replace scm_make_cons() with SCM_MAKE_CONS()
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_MAKE_INT, SCM_MAKE_CONS, SCM_MAKE_SYMBOL, SCM_MAKE_CHAR,
	    SCM_MAKE_STRING, SCM_MAKE_STRING_COPYING,
	    SCM_MAKE_IMMUTABLE_STRING, SCM_MAKE_IMMUTABLE_STRING_COPYING,
	    SCM_MAKE_FUNC, SCM_MAKE_CLOSURE, SCM_MAKE_VECTOR, SCM_MAKE_PORT,
	    SCM_MAKE_CONTINUATION, SCM_MAKE_C_POINTER, SCM_MAKE_C_FUNCPOINTER,
	    SCM_MAKE_VALUEPACKET): Make explicitly argumented
	  - (scm_make_cons, scm_make_int, scm_make_symbol, scm_make_char,
	    scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying, scm_make_func,
	    scm_make_closure, scm_make_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer): Move to storage-*.h
	* sigscheme/storage-fatty.h
	  - (scm_make_cons, scm_make_int, scm_make_symbol, scm_make_char,
	    scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying, scm_make_func,
	    scm_make_closure, scm_make_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer): Moved from sigscheme.h
	* sigscheme/storage-compact.h
	  - (scm_make_cons, scm_make_int, scm_make_symbol, scm_make_char,
	    scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying, scm_make_func,
	    scm_make_closure, scm_make_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet, scm_make_cpointer,
	    scm_make_cfunc_pointer): Moved from sigscheme.h
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage.c
	  - (scm_make_int, scm_make_char, scm_make_string_internal,
	    scm_make_immutable_string, scm_make_immutable_string_copying,
	    scm_make_string, scm_make_string_copying, scm_make_func,
	    scm_make_closure, scm_make_vector, scm_make_port,
	    scm_make_continuation, scm_make_value_packet): Cosmetic change
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_make_cons, scm_make_symbol, scm_make_cpointer,
	    scm_make_cfunc_pointer): Rename args
	* sigscheme/storage.c
	  - (scm_make_cons, scm_make_symbol, scm_make_cpointer,
	    scm_make_cfunc_pointer): Ditto
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-compact.h
	  - (SCM_SAL_MAKE_BOOL): Removed. The SAL does not define this interface
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (scm_p_eqp, scm_p_numberp, scm_p_zerop, scm_p_positivep,
	    scm_p_negativep, scm_p_oddp, scm_p_evenp, scm_p_not,
	    scm_p_booleanp, scm_p_pairp, scm_p_nullp, scm_p_listp,
	    scm_p_symbolp, scm_p_charp, scm_p_charequalp,
	    scm_p_char_alphabeticp, scm_p_char_numericp,
	    scm_p_char_whitespacep, scm_p_char_upper_casep,
	    scm_p_char_lower_casep, scm_p_stringp, scm_p_vectorp,
	    scm_p_procedurep): Simplify with MAKE_BOOL()
	* sigscheme/error.c
	  - (scm_p_error_objectp): Ditto
	* sigscheme/io.c
	  - (scm_p_input_portp, scm_p_output_portp, scm_p_eof_objectp,
	    scm_p_char_readyp): Ditto
	* sigscheme/operations-nonstd.c
	  - (scm_p_symbol_boundp, scm_p_providedp): Ditto
	* sigscheme/operations-srfi1.c
	  - (scm_p_srfi1_null_listp): Ditto
	* sigscheme/operations-srfi60.c
	  - (scm_p_srfi60_logtest): Ditto
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage.c
	  - (scm_make_int, scm_make_char): Eliminate dummy cell allocation
	    when SCM_OBJ_COMPACT
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_make_obj_from_heap, scm_alloc_cell): Rename
	    scm_make_obj_from_heap() with scm_alloc_cell()
	* sigscheme/storage-gc.c
	  - (scm_make_obj_from_heap, scm_alloc_cell): Rename
	    scm_make_obj_from_heap() with scm_alloc_cell()
	* sigscheme/storage.c
	  - (scm_make_cons, scm_make_int, scm_make_symbol, scm_make_char,
	    scm_make_string_internal, scm_make_func, scm_make_closure,
	    scm_make_vector, scm_make_port, scm_make_continuation,
	    scm_make_value_packet, scm_make_cpointer, scm_make_cfunc_pointer):
	    Follow the renaming
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (SCM_MARK, SCM_UNMARKER, SCM_MARKER): Removed
	  - (SCM_SAL_IS_MARKED, SCM_SAL_DO_MARK, SCM_SAL_DO_UNMARK): Simplify
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-fatty.h
	  - (SCM_VECTOR_CREF, SCM_VECTOR_SET_CREF, SCM_VECTOR_REF,
	    SCM_VECTOR_SET_REF, SCM_VECTOR_CHECK_IDX): Removed
	* sigscheme/storage-compact.h
	  - (SCM_VECTOR_CREF, SCM_VECTOR_SET_CREF, SCM_VECTOR_REF,
	    SCM_VECTOR_SET_REF, SCM_VECTOR_CHECK_IDX): Removed
	  - (SCM_SAL_VECTOR_VALID_INDEXP): New macro
	* sigscheme/test-compact.c
	  - (scm_check_vector): Follow the removal
	* sigscheme/operations.c
	  - (scm_p_equalp, scm_p_vector_ref, scm_p_vector_setd): Ditto
	* sigscheme/eval.c
	  - (TRV_GET_OBJ): Ditto
	* sigscheme/print.c
	  - (write_ss_scan): Ditto
	
2005-12-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-compact.h
	  - (SCM_SAL_MAKE_VALUEPACKET, SCM_SAL_SYM_QUOTE,
	    SCM_SAL_SYM_QUASIQUOTE, SCM_SAL_SYM_QUASIQUOTE,
	    SCM_SAL_SYM_UNQUOTE, SCM_SAL_SYM_UNQUOTE_SPLICING): Follow the
	    recent renamings
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi60.c
	  - (scm_initialize_srfi60): Cosmetic change
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_char): Replace " : " in message with ": "
	* sigscheme/error.c
	  - (scm_die): Ditto
	* sigscheme/storage.c
	  - (scm_type): Ditto
	* sigscheme/storage-gc.c
	  - (gc_mark_locations): Ditto
	* sigscheme/test-compact.c
	  - (die): Ditto
	* sigscheme/eval.c
	  - (call_closure): Ditto
	* sigscheme/print.c
	  - (print_string): Ditto
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/mbcport.c
	  - (struct ScmMultiByteCharPort_, mbcport_put_char): Replace
	    sizeof((char)'\0') with sizeof("")
	* sigscheme/read.c
	  - (MB_MAX_SIZE, CHAR_LITERAL_LEN_MAX, INT_LITERAL_LEN_MAX,
	    read_token, read_char, read_number_or_symbol, read_number): Ditto
	* sigscheme/strport.c
	  - (ostrport_append): Ditto
	* sigscheme/io.c
	  - (find_path): Ditto
	* sigscheme/operations.c
	  - (scm_p_integer2char, scm_p_string_setd, scm_p_string_filld): Ditto
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigschemeinternal.h
	  - (INVALIDP): Removed
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - Modify debugging configurations
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (show_arg): Fix code enabling condition
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_error_printf, scm_error_vprintf, scm_error_newline): Removed
	* sigscheme/io.c
	  - (scm_error_printf, scm_error_vprintf, scm_error_newline): Removed
	* sigscheme/read.c
	  - (scm_read, scm_categorized_debug, scm_debug, scm_p_inspect_error,
	    scm_error_obj, show_arg, scm_show_backtrace): Follow the removal
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (scm_p_inspect_error): Cosmetic change
	* sigscheme/io.c
	  - (scm_init_io): Ditto
	
2005-12-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_current_input_port, scm_in): Rename scm_current_input_port
	    with scm_in
	  - (scm_current_output_port, scm_out): Rename scm_current_output_port
	    with scm_out
	  - (scm_current_error_port, scm_err): Rename scm_current_error_port
	    with scm_err
	* sigscheme/io.c
	  - (scm_current_input_port, scm_in): Rename scm_current_input_port
	    with scm_in
	  - (scm_current_output_port, scm_out): Rename scm_current_output_port
	    with scm_out
	  - (scm_current_error_port, scm_err): Rename scm_current_error_port
	    with scm_err
	* Follow the renaming in all sigscheme/*.[hc]
	* uim/uim-scm.c
	  - (uim_scm_init): Follow the renaming
	
2005-12-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - implement String type accessor
	
	  - (SCM_OTHERS_CAR_VAL_OFFSET_SYMBOL
	     SCM_OTHERS_CAR_VAL_OFFSET_STRING
	     SCM_OTHERS_CAR_VAL_OFFSET_VECTOR
	     SCM_OTHERS_CAR_VAL_OFFSET_VALUES
	     SCM_OTHERS_CAR_VAL_OFFSET_FUNC
	     SCM_OTHERS_CAR_VAL_OFFSET_PORT
	     SCM_OTHERS_CAR_VAL_OFFSET_CONTINUATION
	     SCM_OTHERS_CAR_VAL_OFFSET_C_POINTER
	     SCM_OTHERS_CAR_VAL_OFFSET_C_FUNCPOINTER
	     SCM_OTHERS_CAR_VAL_OFFSET_FREECELL
	     SCM_OTHERS_CAR_STRING_MUTATIONBIT_OFFSET
	     SCM_OTHERS_CAR_STRING_MUTATIONBIT_MASK
	     SCM_OTHERS_CAR_STRING_MUTATIONBIT
	     SCM_OTHERS_STRING_STRIP_MUTATIONBIT
	     SCM_STRING_SET_MUTATION_TYPE
	     SCM_SAL_STRING_MUTABLEP
	     SCM_SAL_STRING_SET_MUTABLE
	     SCM_SAL_STRING_SET_IMMUTABLE
	     SCM_SAL_STRING_STR
	     SCM_SAL_STRING_SET_STR
	     SCM_SAL_STRING_LEN
	     SCM_SAL_STRING_SET_LEN): new macro
	
	  - (SCM_STRING_MUTATION_TYPE): rewrite
	
	  - (SCM_STRING_MUTATION_TYPE_OFFSET
	     SCM_STRING_MUTATION_TYPE_MASK
	     SCM_STRING_STR_VALUE_MASK
	     SCM_STRING_SET_MUTABLE
	     SCM_STRING_SET_IMMUTABLE
	     SCM_STRING_STR
	     SCM_STRING_LEN
	     SCM_STRING_SET_STR
	     SCM_STRING_SET_LEN): removed
	
	
2005-12-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - (SCM_OTHERS_CAR_VAL
	     SCM_OTHERS_SET_CAR_VAL
	     SCM_OTHERS_CDR_TAGGING
	     SCM_OTHERS_CDR_VAL
	     SCM_OTHERS_SET_CDR_VAL): new macro
	
	  - (SCM_OTHERS_CDR_VAL_OFFSET_SYMBOL): change to 0 for not to shift
	     char pointer value
	
	  - (SCM_SAL_SYMBOL_VCELL
	     SCM_SAL_SYMBOL_NAME
	     SCM_SAL_SYMBOL_SET_VCELL
	     SCM_SAL_SYMBOL_SET_NAME
	     SCM_SAL_VECTOR_VEC
	     SCM_SAL_VECTOR_LEN
	     SCM_SAL_VECTOR_SET_VEC
	     SCM_SAL_VECTOR_SET_LEN
	     SCM_VECTOR_CHECK_IDX
	     SCM_SAL_VALUEPACKET_VALUES
	     SCM_SAL_VALUEPACKET_SET_VALUES
	     SCM_SAL_PORT_IMPL
	     SCM_SAL_PORT_FLAG
	     SCM_SAL_PORT_SET_IMPL
	     SCM_SAL_PORT_SET_FLAG
	     SCM_SAL_CONTINUATION_OPAQUE
	     SCM_SAL_CONTINUATION_TAG
	     SCM_SAL_CONTINUATION_SET_OPAQUE
	     SCM_SAL_CONTINUATION_SET_TAG
	     SCM_SAL_FREECELL_NEXT
	     SCM_SAL_FREECELL_SET_NEXT): implemented
	
	  - (SCM_VECTOR_CREF
	     SCM_VECTOR_SET_CREF
	     SCM_VECTOR_REF
	     SCM_VECTOR_SET_REF): added for backward compatibility
	
	  - (SCM_SYMBOL_VCELL
	     SCM_SYMBOL_NAME
	     SCM_SYMBOL_SET_VCELL
	     SCM_SYMBOL_SET_NAME
	     SCM_VECTOR_VEC
	     SCM_VECTOR_LEN
	     SCM_VECTOR_SET_VEC
	     SCM_VECTOR_SET_LEN
	     SCM_MAKE_VALUEPACKET
	     SCM_VALUEPACKET_VALUES
	     SCM_VALUEPACKET_SET_VALUES
	     SCM_PORT_IMPL
	     SCM_PORT_FLAG
	     SCM_PORT_SET_IMPL
	     SCM_PORT_SET_FLAG
	     SCM_CONTINUATION_OPAQUE
	     SCM_CONTINUATION_TAG
	     SCM_CONTINUATION_SET_OPAQUE
	     SCM_CONTINUATION_SET_TAG
	     SCM_FREECELL_NEXT
	     SCM_FREECELL_SET_NEXT): removed
	
	
2005-12-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - implement 'cons', 'closure', 'imm' accessor
	
	  - NEW
	  - (SCM_GCBIT_MARKED, SCM_GCBIT_UNMARKED,
	     SCM_IMM_VAL_MASK_INT, SCM_IMM_VAL_MASK_CHAR,
	     SCM_CELL_SET_CAR, SCM_CELL_SET_CDR,
	     SCM_TAG_OTHERS_TYPEP, SCM_TAG_IMM_TYPEP,
	     SCM_CONS_CAR_VAL, SCM_CONS_CDR_VAL,
	     SCM_CONS_SET_CAR_VAL, SCM_CONS_SET_CDR_VAL,
	     SCM_CLOSURE_CAR_VAL, SCM_CLOSURE_CDR_VAL,
	     SCM_CLOSURE_SET_CAR_VAL, SCM_CLOSURE_SET_CDR_VAL,
	     SCM_IMM_TAGGING, SCM_IMM_VAL, SCM_IMM_SET_VAL,
	     SCM_SAL_CONS_CAR, SCM_SAL_CONS_CDR,
	     SCM_SAL_CONS_SET_CAR, SCM_SAL_CONS_SET_CDR,
	     SCM_SAL_CLOSURE_EXP SCM_SAL_CLOSURE_ENV,
	     SCM_SAL_CLOSURE_SET_EXP, SCM_SAL_CLOSURE_SET_ENV,
	     SCM_SAL_INT_VALUE, SCM_SAL_INT_SET_VALUE,
	     SCM_SAL_CHAR_VALUE, SCM_SAL_CHAR_SET_VALUE): new macro
	
	  - MODIFIED
	  - (SCM_TAG_OTHERSP
	     SCM_TAG_IMMP): change to only check the tag
	  - (SCM_SAL_SYMBOLP, SCM_SAL_STRINGP,
	     SCM_SAL_VECTORP, SCM_SAL_VALUEPACKETP,
	     SCM_SAL_FUNCP, SCM_SAL_PORTP,
	     SCM_SAL_CONTINUATIONP, SCM_SAL_C_POINTERP,
	     SCM_SAL_C_FUNCPOINTERP, SCM_SAL_FREECELLP,
	     SCM_SAL_INTP, SCM_SAL_CHARP, SCM_SAL_CONSTANTP,
	     SCM_SAL_ENTYPE_CONS, SCM_SAL_ENTYPE_CLOSURE)
	     : use *_TYPEP
	
	  - (SCM_SAL_IS_MARKED, SCM_SAL_IS_UNMARKED): use SCM_GCBIT_MARKED
	
	  - (SCM_SAL_DO_MARK, SCM_SAL_DO_UNMARK): more clear representation
	
	  - REMOVED
	  - (SCM_STRIP_OTHERS_CDR_PRIMARY_TAG
	     SCM_STRIP_OTHERS_CDR_SUB_TAG
	     SCM_STRIP_OTHERS_CDR_EXT_TAG
	     SCM_SET_CELL_CAR
	     SCM_SET_CELL_CDR
	     SCM_CAR
	     SCM_CDR
	     SCM_CONS_SET_CAR
	     SCM_CONS_SET_CDR
	     SCM_CLOSURE_EXP
	     SCM_CLOSURE_ENV
	     SCM_CLOSURE_SET_EXP
	     SCM_CLOSURE_SET_ENV
	     BITS_PER_BITE
	     SIZEOF_INT
	     SIGN_BIT_MASK
	     SIGN_VALUE_MASK
	     SIGNED_MARK
	     SCM_INT_VALUE
	     SCM_INT_SET_VALUE
	     SCM_CHAR_VALUE
	     SCM_CHAR_SET_VALUE): removed
	
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_port_printf, scm_port_vprintf, scm_port_newline): Change
	    return type
	* sigscheme/io.c
	  - (scm_port_printf, scm_port_vprintf, scm_port_newline): Change
	    return type
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit reorganize port API
	
	* sigscheme/sigscheme.h
	  - (SCM_PORT_CLOSE_IMPL, SCM_PORT_ENCODING, SCM_PORT_INSPECT,
	    SCM_PORT_GET_CHAR, SCM_PORT_PEEK_CHAR, SCM_PORT_CHAR_READYP,
	    SCM_PORT_VPRINTF, SCM_PORT_PUTS, SCM_PORT_PUT_CHAR,
	    SCM_PORT_FLUSH): Removed
	  - (scm_port_close, scm_port_encoding, scm_port_inspect,
	    scm_port_get_char, scm_port_peek_char, scm_port_char_readyp,
	    scm_port_puts, scm_port_put_char, scm_port_flush): New function decl
	* sigscheme/io.c
	  - (scm_port_close, scm_port_encoding, scm_port_inspect,
	    scm_port_get_char, scm_port_peek_char, scm_port_char_readyp,
	    scm_port_puts, scm_port_put_char, scm_port_flush): New function
	  - (scm_port_vprintf, scm_port_newline, scm_p_close_input_port,
	    scm_p_close_output_port, scm_p_read_char, scm_p_peek_char,
	    scm_p_char_readyp, scm_load_internal, parse_script_prelude):
	    Follow the reorganization
	* sigscheme/read.c
	  - (DISCARD_LOOKAHEAD, skip_comment_and_space, read_sequence,
	    read_token, read_sexpression, read_list, read_char, read_string,
	    read_number_or_symbol): Ditto
	* sigscheme/print.c
	  - (scm_write_to_port, scm_display_to_port, print_obj, print_char,
	    print_string, print_list, print_vector, print_port,
	    print_constant, print_errobj): Ditto
	* sigscheme/storage-gc.c
	  - (free_cell): Ditto
	* sigscheme/error.c
	  - (scm_p_inspect_error): Ditto
	* sigscheme/operations.c
	  - (scm_p_make_string, scm_p_list2string): Ditto
	* sigscheme/main.c
	  - (repl_loop): Ditto
	
2005-12-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - renaming macro names in accordance with the rule below.
	
	    _TAG_VALUE_ => _VAL_
	    _VALUE_     => _VAL_
	
	  - (SCM_OTHERS_CDR_PRIMARY_VAL_OFFSET
	     SCM_OTHERS_CDR_EXT_VAL_OFFSET
	     SCM_OTHERS_CDR_PTR_VAL_OFFSET
	     SCM_OTHERS_CDR_VAL_OFFSET_SYMBOL
	     SCM_OTHERS_CDR_VAL_MASK_SYMBOL
	     SCM_OTHERS_CDR_VAL_OFFSET_STRING
	     SCM_OTHERS_CDR_VAL_MASK_STRING
	     SCM_OTHERS_CDR_VAL_OFFSET_VECTOR
	     SCM_OTHERS_CDR_VAL_MASK_VECTOR
	     SCM_OTHERS_CDR_VAL_OFFSET_VALUES
	     SCM_OTHERS_CDR_VAL_MASK_VALUES
	     SCM_OTHERS_CDR_VAL_OFFSET_FUNC
	     SCM_OTHERS_CDR_VAL_MASK_FUNC
	     SCM_OTHERS_CDR_VAL_OFFSET_PORT
	     SCM_OTHERS_CDR_VAL_MASK_PORT
	     SCM_OTHERS_CDR_VAL_OFFSET_CONTINUATION
	     SCM_OTHERS_CDR_VAL_MASK_CONTINUATION
	     SCM_OTHERS_CDR_VAL_OFFSET_C_POINTER
	     SCM_OTHERS_CDR_VAL_MASK_C_POINTER
	     SCM_OTHERS_CDR_VAL_OFFSET_C_FUNCPOINTER
	     SCM_OTHERS_CDR_VAL_MASK_C_FUNCPOINTER
	     SCM_OTHERS_CDR_VAL_OFFSET_FREECELL
	     SCM_OTHERS_CDR_VAL_MASK_FREECELL
	     SCM_IMM_VAL_OFFSET_INT
	     SCM_IMM_VAL_OFFSET_CHAR): follow the renaming
	
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_REF_CAR, SCM_REF_CDR, SCM_REF_OFF_HEAP, SCM_DEREF, SCM_SET):
	    Strip outermost parens which causes syntax error if the definition
	    is not expression but block
	* sigscheme/sigschemeinternal.h
	  - (MAKE_TRACE_FRAME, SCM_ENTYPE_INT, SCM_ENTYPE_CONS,
	    SCM_ENTYPE_SYMBOL, SCM_ENTYPE_CHAR, SCM_ENTYPE_STRING,
	    SCM_ENTYPE_FUNC, SCM_ENTYPE_CLOSURE, SCM_ENTYPE_VECTOR,
	    SCM_ENTYPE_PORT, SCM_ENTYPE_CONTINUATION, SCM_ENTYPE_C_POINTER,
	    SCM_ENTYPE_C_FUNCPOINTER, SCM_ENTYPE_VALUEPACKET, SCM_NULLVALUESP,
	    SCM_VALUECONS_CAR, SCM_VALUECONS_CDR, SCM_VALUEPACKET_SET_VALUES,
	    SCM_ENTYPE_FREECELL, SCM_AS_FREECELL, SCM_FREECELLP): Ditto
	
2005-12-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - (SCM_SAL_MAKE_INT
	     SCM_SAL_MAKE_CONS
	     SCM_SAL_MAKE_SYMBOL
	     SCM_SAL_MAKE_CHAR
	     SCM_SAL_MAKE_STRING
	     SCM_SAL_MAKE_STRING_COPYING
	     SCM_SAL_MAKE_IMMUTABLE_STRING
	     SCM_SAL_MAKE_IMMUTABLE_STRING_COPYING
	     SCM_SAL_MAKE_FUNC
	     SCM_SAL_MAKE_CLOSURE
	     SCM_SAL_MAKE_VECTOR
	     SCM_SAL_MAKE_PORT
	     SCM_SAL_MAKE_CONTINUATION
	     SCM_SAL_MAKE_C_POINTER
	     SCM_SAL_MAKE_C_FUNCPOINTER): follow the recent function renaming
	
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc/style
	  - Revise the description since the example was not destructive or
	    side-effective
	
2005-12-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-compact.h
	  - this commit starts reformation of SCM_OBJ_COMPACT. discussed in the
	    anthy-dev thread starts with [Anthy-dev 2697]
	  - copied from sigschemetype-compact.h
	
	  - (__STORAGE_COMPACT_H
	     SCM_TAG_OFFSET
	     SCM_OTHERS_CDR_PRIMARY_TAG_WIDTH
	     SCM_OTHERS_CDR_PRIMARY_TAG_OFFSET
	     SCM_OTHERS_CDR_PRIMARY_TAG_MASK
	     SCM_OTHERS_CDR_PRIMARY_TAG_SYMBOL
	     SCM_OTHERS_CDR_PRIMARY_TAG_STRING
	     SCM_OTHERS_CDR_PRIMARY_TAG_VECTOR
	     SCM_OTHERS_CDR_PRIMARY_TAG_EXT
	     SCM_OTHERS_CDR_SUB_TAG_WIDTH
	     SCM_OTHERS_CDR_SUB_TAG_OFFSET
	     SCM_OTHERS_CDR_SUB_TAG_MASK
	     SCM_OTHERS_CDR_SUB_TAG_VALUES
	     SCM_OTHERS_CDR_SUB_TAG_FUNC
	     SCM_OTHERS_CDR_SUB_TAG_PORT
	     SCM_OTHERS_CDR_SUB_TAG_CONTINUATION
	     SCM_OTHERS_CDR_SUB_TAG_POINTER
	     SCM_OTHERS_CDR_SUB_TAG_RESERVED5
	     SCM_OTHERS_CDR_SUB_TAG_RESERVED6
	     SCM_OTHERS_CDR_SUB_TAG_FREECELL
	     SCM_OTHERS_CDR_EXT_TAG_WIDTH
	     SCM_OTHERS_CDR_EXT_TAG_OFFSET
	     SCM_OTHERS_CDR_EXT_TAG_MASK
	     SCM_OTHERS_CDR_EXT_TAG_VALUES
	     SCM_OTHERS_CDR_EXT_TAG_FUNC
	     SCM_OTHERS_CDR_EXT_TAG_PORT
	     SCM_OTHERS_CDR_EXT_TAG_CONTINUATION
	     SCM_OTHERS_CDR_EXT_TAG_POINTER
	     SCM_OTHERS_CDR_EXT_TAG_RESERVED5
	     SCM_OTHERS_CDR_EXT_TAG_RESERVED6
	     SCM_OTHERS_CDR_EXT_TAG_FREECELL
	     SCM_OTHERS_CDR_PTR_TAG_WIDTH
	     SCM_OTHERS_CDR_PTR_TAG_OFFSET
	     SCM_OTHERS_CDR_PTR_TAG_MASK
	     SCM_OTHERS_CDR_PTR_TAG_C_POINTER
	     SCM_OTHERS_CDR_PTR_TAG_C_FUNCPOINTER
	     SCM_OTHERS_CDR_PRIMARY_VALUE_OFFSET
	     SCM_OTHERS_CDR_EXT_VALUE_OFFSET
	     SCM_OTHERS_CDR_PTR_VALUE_OFFSET
	     SCM_OTHERS_CDR_TAG_SYMBOL
	     SCM_OTHERS_CDR_TAG_MASK_SYMBOL
	     SCM_OTHERS_CDR_TAG_WIDTH_SYMBOL
	     SCM_OTHERS_CDR_TAG_OFFSET_SYMBOL
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_SYMBOL
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_SYMBOL
	     SCM_OTHERS_CDR_TAG_STRING
	     SCM_OTHERS_CDR_TAG_MASK_STRING
	     SCM_OTHERS_CDR_TAG_WIDTH_STRING
	     SCM_OTHERS_CDR_TAG_OFFSET_STRING
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_STRING
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_STRING
	     SCM_OTHERS_CDR_TAG_VECTOR
	     SCM_OTHERS_CDR_TAG_MASK_VECTOR
	     SCM_OTHERS_CDR_TAG_WIDTH_VECTOR
	     SCM_OTHERS_CDR_TAG_OFFSET_VECTOR
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_VECTOR
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_VECTOR
	     SCM_OTHERS_CDR_TAG_VALUES
	     SCM_OTHERS_CDR_TAG_MASK_VALUES
	     SCM_OTHERS_CDR_TAG_WIDTH_VALUES
	     SCM_OTHERS_CDR_TAG_OFFSET_VALUES
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_VALUES
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_VALUES
	     SCM_OTHERS_CDR_TAG_FUNC
	     SCM_OTHERS_CDR_TAG_MASK_FUNC
	     SCM_OTHERS_CDR_TAG_WIDTH_FUNC
	     SCM_OTHERS_CDR_TAG_OFFSET_FUNC
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_FUNC
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_FUNC
	     SCM_OTHERS_CDR_TAG_PORT
	     SCM_OTHERS_CDR_TAG_MASK_PORT
	     SCM_OTHERS_CDR_TAG_WIDTH_PORT
	     SCM_OTHERS_CDR_TAG_OFFSET_PORT
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_PORT
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_PORT
	     SCM_OTHERS_CDR_TAG_CONTINUATION
	     SCM_OTHERS_CDR_TAG_MASK_CONTINUATION
	     SCM_OTHERS_CDR_TAG_WIDTH_CONTINUATION
	     SCM_OTHERS_CDR_TAG_OFFSET_CONTINUATION
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_CONTINUATION
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_CONTINUATION
	     SCM_OTHERS_CDR_TAG_C_POINTER
	     SCM_OTHERS_CDR_TAG_MASK_C_POINTER
	     SCM_OTHERS_CDR_TAG_WIDTH_C_POINTER
	     SCM_OTHERS_CDR_TAG_OFFSET_C_POINTER
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_C_POINTER
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_C_POINTER
	     SCM_OTHERS_CDR_TAG_C_FUNCPOINTER
	     SCM_OTHERS_CDR_TAG_MASK_C_FUNCPOINTER
	     SCM_OTHERS_CDR_TAG_WIDTH_C_FUNCPOINTER
	     SCM_OTHERS_CDR_TAG_OFFSET_C_FUNCPOINTER
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_C_FUNCPOINTER
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_C_FUNCPOINTER
	     SCM_OTHERS_CDR_TAG_FREECELL
	     SCM_OTHERS_CDR_TAG_MASK_FREECELL
	     SCM_OTHERS_CDR_TAG_WIDTH_FREECELL
	     SCM_OTHERS_CDR_TAG_OFFSET_FREECELL
	     SCM_OTHERS_CDR_TAG_VALUE_OFFSET_FREECELL
	     SCM_OTHERS_CDR_TAG_VALUE_MASK_FREECELL
	     SCM_IMM_TAG_MASK_INT
	     SCM_IMM_TAG_MASK_CHAR
	     SCM_IMM_TAG_MASK_CONSTANT
	     SCM_IMM_TAG_INT
	     SCM_IMM_TAG_CHAR
	     SCM_IMM_TAG_CONSTANT
	     SCM_IMM_TAG_NULL
	     SCM_IMM_TAG_INVALID
	     SCM_IMM_TAG_UNBOUND
	     SCM_IMM_TAG_FALSE
	     SCM_IMM_TAG_TRUE
	     SCM_IMM_TAG_EOF
	     SCM_IMM_TAG_UNDEF
	     SCM_IMM_TAG_VALUE_OFFSET_INT
	     SCM_IMM_TAG_VALUE_OFFSET_CHAR
	     SCM_CAST_INT
	     SCM_CAST_UINT
	     SCM_CAST_SCMOBJ
	     SCM_CAST_CHARP
	     SCM_STRIP_GCBIT
	     SCM_STRIP_TAG
	     SCM_STRIP_OTHERS_CDR_PRIMARY_TAG
	     SCM_STRIP_OTHERS_CDR_SUB_TAG
	     SCM_STRIP_OTHERS_CDR_EXT_TAG
	     SCM_GCBIT_ON
	     SCM_GCBIT_OFF
	     SCM_GCBIT
	     SCM_TAG
	     SCM_CELL_CAR
	     SCM_CELL_CDR
	     SCM_SET_CELL_CAR
	     SCM_SET_CELL_CDR
	     SCM_TAG_CONSP
	     SCM_TAG_CLOSUREP
	     SCM_TAG_OTHERSP
	     SCM_TAG_IMMP
	     SCM_IMM_TAG_NULLP
	     SCM_IMM_TAG_INVALIDP
	     SCM_IMM_TAG_UNBOUNDP
	     SCM_IMM_TAG_FALSEP
	     SCM_IMM_TAG_TRUEP
	     SCM_IMM_TAG_EOFP
	     SCM_IMM_TAG_UNDEFP
	     SCM_SAL_MAKE_BOOL
	     SCM_SAL_MAKE_INT
	     SCM_SAL_MAKE_CONS
	     SCM_SAL_MAKE_SYMBOL
	     SCM_SAL_MAKE_CHAR
	     SCM_SAL_MAKE_STRING
	     SCM_SAL_MAKE_STRING_COPYING
	     SCM_SAL_MAKE_IMMUTABLE_STRING
	     SCM_SAL_MAKE_IMMUTABLE_STRING_COPYING
	     SCM_SAL_MAKE_FUNC
	     SCM_SAL_MAKE_CLOSURE
	     SCM_SAL_MAKE_VECTOR
	     SCM_SAL_MAKE_PORT
	     SCM_SAL_MAKE_CONTINUATION
	     SCM_SAL_MAKE_C_POINTER
	     SCM_SAL_MAKE_C_FUNCPOINTER
	     SCM_SAL_MAKE_VALUEPACKET
	     SCM_SAL_CONSP
	     SCM_SAL_CLOSUREP
	     SCM_SAL_SYMBOLP
	     SCM_SAL_STRINGP
	     SCM_SAL_VECTORP
	     SCM_SAL_VALUEPACKETP
	     SCM_SAL_FUNCP
	     SCM_SAL_PORTP
	     SCM_SAL_CONTINUATIONP
	     SCM_SAL_C_POINTERP
	     SCM_SAL_C_FUNCPOINTERP
	     SCM_SAL_FREECELLP
	     SCM_SAL_INTP
	     SCM_SAL_CHARP
	     SCM_SAL_CONSTANTP
	     SCM_ENTYPE_TAG
	     SCM_ENTYPE_OTHERS_CDR_TAG
	     SCM_ENTYPE_TAG_CONS
	     SCM_ENTYPE_TAG_CLOSURE
	     SCM_ENTYPE_TAG_OTHERS
	     SCM_ENTYPE_TAG_IMM
	     SCM_SAL_ENTYPE_CONS
	     SCM_SAL_ENTYPE_CLOSURE
	     SCM_SAL_ENTYPE_SYMBOL
	     SCM_SAL_ENTYPE_STRING
	     SCM_SAL_ENTYPE_VECTOR
	     SCM_SAL_ENTYPE_VALUEPACKET
	     SCM_SAL_ENTYPE_FUNC
	     SCM_SAL_ENTYPE_PORT
	     SCM_SAL_ENTYPE_CONTINUATION
	     SCM_SAL_ENTYPE_C_POINTER
	     SCM_SAL_ENTYPE_C_FUNCPOINTER
	     SCM_SAL_ENTYPE_FREECELL
	     SCM_SAL_ENTYPE_INT
	     SCM_SAL_ENTYPE_CHAR
	     SCM_SAL_TYPE
	     SCM_CAR
	     SCM_CDR
	     SCM_CONS_SET_CAR
	     SCM_CONS_SET_CDR
	     SCM_CLOSURE_EXP
	     SCM_CLOSURE_ENV
	     SCM_CLOSURE_SET_EXP
	     SCM_CLOSURE_SET_ENV
	     SCM_SYMBOL_VCELL
	     SCM_SYMBOL_NAME
	     SCM_SYMBOL_SET_VCELL
	     SCM_SYMBOL_SET_NAME
	     SCM_STRING_MUTATION_TYPE_MASK
	     SCM_STRING_STR_VALUE_MASK
	     SCM_STRING_MUTATION_TYPE
	     SCM_STRING_SET_MUTABLE
	     SCM_STRING_SET_IMMUTABLE
	     SCM_STRING_STR
	     SCM_STRING_LEN
	     SCM_STRING_SET_STR
	     SCM_STRING_SET_LEN
	     SCM_MAKE_VALUEPACKET
	     SCM_PTR_RAW_LSB
	     SCM_SET_PTR_LSB
	     SCM_FREECELL_NEXT
	     SCM_FREECELL_SET_NEXT
	     SCM_INT_SET_VALUE
	     SCM_CHAR_VALUE
	     SCM_CHAR_SET_VALUE
	     SCM_CANBE_MARKED
	     SCM_STRIP_TAG_INFO
	     SCM_NEED_SWEEPP
	     SCM_TAG_SWEEP_PHASE_OTHERSP
	     SCM_SWEEP_PHASE_SYMBOLP
	     SCM_SWEEP_PHASE_STRINGP
	     SCM_SWEEP_PHASE_VECTORP
	     SCM_SWEEP_PHASE_PORTP
	     SCM_SWEEP_PHASE_CONTINUATIONP
	     SCM_SAL_IS_MARKED
	     SCM_SAL_IS_UNMARKED
	     SCM_SAL_DO_MARK
	     SCM_SAL_DO_UNMARK
	     SCM_SAL_INTERACTION_ENV
	     SCM_SAL_R5RS_ENV
	     SCM_SAL_NULL_ENV
	     SCM_SAL_ENVP
	     SCM_SAL_INVALID_REF
	     SCM_SAL_REF_CAR
	     SCM_SAL_REF_CDR
	     SCM_SAL_REF_OFF_HEAP
	     SCM_SAL_DEREF
	     SCM_SAL_SET
	     SCM_SAL_NULL
	     SCM_SAL_EOF
	     SCM_SAL_UNDEF
	     SCM_SAL_INVALID
	     SCM_SAL_UNBOUND
	     SCM_SAL_FALSE
	     SCM_SAL_TRUE
	     SCM_SAL_EQ
	     SCM_SAL_SYM_QUOTE
	     SCM_SAL_SYM_QUASIQUOTE
	     SCM_SAL_SYM_UNQUOTE
	     SCM_SAL_SYM_UNQUOTE_SPLICING): newmacro
	
	
	  - (__SIGSCMTYPE_COMPACT_H
	     SCM_FUNCTYPE_MAND_MAX
	     SCM_MAKE_BOOL
	     SCM_MAKE_INT
	     SCM_MAKE_CONS
	     SCM_MAKE_SYMBOL
	     SCM_MAKE_CHAR
	     SCM_MAKE_STRING
	     SCM_MAKE_STRING_COPYING
	     SCM_MAKE_IMMUTABLE_STRING
	     SCM_MAKE_IMMUTABLE_STRING_COPYING
	     SCM_MAKE_FUNC
	     SCM_MAKE_CLOSURE
	     SCM_MAKE_VECTOR
	     SCM_MAKE_PORT
	     SCM_MAKE_CONTINUATION
	     SCM_MAKE_C_POINTER
	     SCM_MAKE_C_FUNCPOINTER
	     SCM_MAKE_VALUEPACKET
	     SCM_GCBIT_UNMARKED
	     SCM_GCBIT_MARKED
	     SCM_TAG_OFFSET
	     SCM_VALUE_OFFSET
	     SCM_VALUE_MASK
	     SCM_TAG_OTHERS_MASK_SYMBOL
	     SCM_TAG_OTHERS_MASK_STRING
	     SCM_TAG_OTHERS_MASK_VECTOR
	     SCM_TAG_OTHERS_MASK_VALUES
	     SCM_TAG_OTHERS_MASK_FUNC
	     SCM_TAG_OTHERS_MASK_PORT
	     SCM_TAG_OTHERS_MASK_CONTINUATION
	     SCM_TAG_OTHERS_MASK_C_POINTER
	     SCM_TAG_OTHERS_SYMBOL
	     SCM_TAG_OTHERS_STRING
	     SCM_TAG_OTHERS_VECTOR
	     SCM_TAG_OTHERS_VALUES
	     SCM_TAG_OTHERS_FUNC
	     SCM_TAG_OTHERS_PORT
	     SCM_TAG_OTHERS_CONTINUATION
	     SCM_TAG_OTHERS_C_POINTER
	     SCM_TAG_OTHERS_C_FUNCPOINTER
	     SCM_TAG_OTHERS_VALUE_OFFSET_STRING
	     SCM_TAG_OTHERS_VALUE_OFFSET_VECTOR
	     SCM_TAG_OTHERS_VALUE_OFFSET_FUNC_LSBADDR
	     SCM_TAG_OTHERS_VALUE_OFFSET_FUNC_FUNCTYPE
	     SCM_TAG_OTHERS_VALUE_OFFSET_PORT
	     SCM_TAG_OTHERS_VALUE_OFFSET_CONTINUATION
	     SCM_TAG_OTHERS_VALUE_OFFSET_C_POINTER_LSBADDR
	     SCM_TAG_OTHERS_VALUE_OFFSET_C_FUNCPOINTER_LSBADDR
	     SCM_TAG_IMM_MASK_INT
	     SCM_TAG_IMM_MASK_CHAR
	     SCM_TAG_IMM_MASK_CONST
	     SCM_TAG_IMM_MASK_CONST_VALUE
	     SCM_TAG_IMM_INT
	     SCM_TAG_IMM_CHAR
	     SCM_IMM_NULL
	     SCM_IMM_INVALID
	     SCM_IMM_UNBOUND
	     SCM_IMM_FALSE
	     SCM_IMM_TRUE
	     SCM_IMM_EOF
	     SCM_IMM_UNDEF
	     SCM_TAG_IMM_VALUE_OFFSET_INT
	     SCM_TAG_IMM_VALUE_OFFSET_CHAR
	     SCM_GET_VALUE_AS_OBJ_DISCARDS_GCBIT
	     SCM_GET_VALUE_AS_INT_DISCARDS_GCBIT
	     SCM_GET_VALUE_AS_PTR_DISCARDS_GCBIT
	     SCM_GET_VALUE_AS_STR_DISCARDS_GCBIT
	     SCM_SET_VALUE_AS_OBJ_REMAIN_GCBIT
	     SCM_SET_VALUE_AS_INT_REMAIN_GCBIT
	     SCM_SET_VALUE_AS_PTR_REMAIN_GCBIT
	     SCM_SET_VALUE_AS_STR_REMAIN_GCBIT
	     SCM_PRIMARY_GET_VALUE_AS_OBJ
	     SCM_PRIMARY_GET_VALUE_AS_INT
	     SCM_PRIMARY_GET_VALUE_AS_PTR
	     SCM_PRIMARY_GET_VALUE_AS_STR
	     SCM_PRIMARY_SET_VALUE_AS_OBJ
	     SCM_PRIMARY_SET_VALUE_AS_INT
	     SCM_PRIMARY_SET_VALUE_AS_PTR
	     SCM_PRIMARY_SET_VALUE_AS_STR
	     SCM_GET_DIRECT_CAR
	     SCM_GET_DIRECT_CDR
	     SCM_SET_DIRECT_CAR
	     SCM_SET_DIRECT_CDR
	     SCM_CAR_GET_VALUE_AS_OBJ
	     SCM_CAR_GET_VALUE_AS_INT
	     SCM_CAR_GET_VALUE_AS_PTR
	     SCM_CAR_GET_VALUE_AS_STR
	     SCM_CAR_SET_VALUE_AS_OBJ
	     SCM_CAR_SET_VALUE_AS_INT
	     SCM_CAR_SET_VALUE_AS_PTR
	     SCM_CAR_SET_VALUE_AS_STR
	     SCM_CDR_GET_VALUE_AS_OBJ
	     SCM_CDR_GET_VALUE_AS_INT
	     SCM_CDR_GET_VALUE_AS_PTR
	     SCM_CDR_GET_VALUE_AS_STR
	     SCM_CDR_SET_VALUE_AS_OBJ
	     SCM_CDR_SET_VALUE_AS_INT
	     SCM_CDR_SET_VALUE_AS_PTR
	     SCM_CDR_SET_VALUE_AS_STR
	     SCM_CAST_UINT
	     SCM_CAST_CAR_UINT
	     SCM_CAST_CDR_UINT
	     SCM_GC_BIT
	     SCM_TAG_CONSP
	     SCM_TAG_CLOSUREP
	     SCM_TAG_OTHERSP
	     SCM_TAG_IMMP
	     SCM_TAG_OTHERS_SYMBOLP
	     SCM_TAG_OTHERS_STRINGP
	     SCM_TAG_OTHERS_VECTORP
	     SCM_TAG_OTHERS_VALUESP
	     SCM_TAG_OTHERS_FUNCP
	     SCM_TAG_OTHERS_PORTP
	     SCM_TAG_OTHERS_CONTINUATIONP
	     SCM_TAG_OTHERS_C_POINTERP
	     SCM_TAG_OTHERS_C_FUNCPOINTERP
	     SCM_TAG_OTHERS_FREECELLP
	     SCM_TAG_IMM_INTP
	     SCM_TAG_IMM_CHARP
	     SCM_TAG_IMM_CONSTANTP
	     SCM_TAG_IMM_NULLP
	     SCM_TAG_IMM_INVALIDP
	     SCM_TAG_IMM_UNBOUNDP
	     SCM_TAG_IMM_FALSEP
	     SCM_TAG_IMM_TRUEP
	     SCM_TAG_IMM_EOFP
	     SCM_TAG_IMM_UNDEFP
	     SCM_CONSP
	     SCM_CLOSUREP
	     SCM_SYMBOLP
	     SCM_STRINGP
	     SCM_VECTORP
	     SCM_VALUEPACKETP
	     SCM_FUNCP
	     SCM_PORTP
	     SCM_CONTINUATIONP
	     SCM_C_POINTERP
	     SCM_C_FUNCPOINTERP
	     SCM_INTP
	     SCM_CHARP
	     SCM_CONSTANTP
	     SCM_ASSERT_TYPE
	     SCM_ASSERT_TYPE
	     SCM_AS_CONS
	     SCM_AS_CLOSURE
	     SCM_AS_SYMBOL
	     SCM_AS_STRING
	     SCM_AS_VECTOR
	     SCM_AS_VALUEPACKET
	     SCM_AS_FUNC
	     SCM_AS_PORT
	     SCM_AS_CONTINUATION
	     SCM_AS_C_POINTER
	     SCM_AS_C_FUNCPOINTER
	     SCM_AS_INT
	     SCM_AS_CHAR
	     SCM_ENTYPE_TAG
	     SCM_ENTYPE_PRIMARY_TAG
	     SCM_ENTYPE_PRIMARY_TAG_CONS
	     SCM_ENTYPE_PRIMARY_TAG_CLOSURE
	     SCM_ENTYPE_PRIMARY_TAG_OTHERS
	     SCM_ENTYPE_CONS
	     SCM_ENTYPE_CLOSURE
	     SCM_ENTYPE_SYMBOL
	     SCM_ENTYPE_STRING
	     SCM_ENTYPE_VECTOR
	     SCM_ENTYPE_VALUEPACKET
	     SCM_ENTYPE_FUNC
	     SCM_ENTYPE_PORT
	     SCM_ENTYPE_CONTINUATION
	     SCM_ENTYPE_C_POINTER
	     SCM_ENTYPE_C_FUNCPOINTER
	     SCM_INIT_CONSTANT
	     SCM_ENTYPE_INT
	     SCM_ENTYPE_CHAR
	     SCM_ENTYPE_NULL
	     SCM_ENTYPE_INVALID
	     SCM_ENTYPE_UNBOUND
	     SCM_ENTYPE_FALSE
	     SCM_ENTYPE_TRUE
	     SCM_ENTYPE_EOF
	     SCM_ENTYPE_UNDEF
	     SCM_CAR
	     SCM_CDR
	     SCM_CONS_SET_CAR
	     SCM_CONS_SET_CDR
	     SCM_CAAR
	     SCM_CADR
	     SCM_CDAR
	     SCM_CDDR
	     SCM_CLOSURE_EXP
	     SCM_CLOSURE_ENV
	     SCM_CLOSURE_SET_EXP
	     SCM_CLOSURE_SET_ENV
	     SCM_SYMBOL_VCELL
	     SCM_SYMBOL_NAME
	     SCM_SYMBOL_SET_VCELL
	     SCM_SYMBOL_SET_NAME
	     SCM_STRING_MUTATION_TYPE_MASK
	     SCM_STRING_STR_VALUE_MASK
	     SCM_STRING_MUTATION_TYPE
	     SCM_STRING_SET_MUTABLE
	     SCM_STRING_SET_IMMUTABLE
	     SCM_STRING_LEN
	     SCM_STRING_STR
	     SCM_STRING_SET_LEN
	     SCM_STRING_SET_STR
	     SCM_PTR_RAW_LSB
	     SCM_SET_PTR_LSB
	     SCM_INT_SET_VALUE
	     SCM_CHAR_VALUE
	     SCM_CHAR_SET_VALUE
	     SCM_SYNTAXP
	     SCM_PROCEDUREP
	     SCM_NULL
	     SCM_EOF
	     SCM_UNDEF
	     SCM_INVALID
	     SCM_UNBOUND
	     SCM_FALSE
	     SCM_TRUE
	     SCM_EQ
	     SCM_VALIDP
	     SCM_INVALIDP
	     SCM_NULLP
	     SCM_FALSEP
	     SCM_NFALSEP
	     SCM_EOFP
	     SCM_DO_MARK
	     SCM_DO_UNMARK
	     SCM_IS_MARKED
	     SCM_IS_UNMARKED
	     SCM_CANBE_MARKED
	     SCM_STRIP_TAG_INFO
	     SCM_NEED_SWEEPP
	     SCM_SWEEP_PHASE_SYMBOLP
	     SCM_SWEEP_PHASE_STRINGP
	     SCM_SWEEP_PHASE_VECTORP
	     SCM_SWEEP_PHASE_PORTP
	     SCM_SWEEP_PHASE_CONTINUATIONP
	     SCM_SYM_QUOTE
	     SCM_SYM_QUASIQUOTE
	     SCM_SYM_UNQUOTE
	     SCM_SYM_UNQUOTE_SPLICING
	     SCM_INTERACTION_ENV
	     SCM_R5RS_ENV
	     SCM_NULL_ENV
	     SCM_ENVP
	     SCM_INVALID_REF
	     SCM_REF_CAR
	     SCM_REF_CDR
	     SCM_REF_OFF_HEAP
	     SCM_DEREF
	     SCM_SET
	     SCM_TYPE): removed
	
	  - (ScmPortFlag, ScmFuncTypeCode, ScmReductionState, ScmReturnType
	     ScmEvalState_, ScmObjType): removed
	
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (scm_s_cond_internal): Move the comment added in r2617 to doc/style
	* sigscheme/doc/style
	  - Add the comment and generalize
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_number_or_symbol): Cosmetic change
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit reorganizes string creators. Each invocation are
	  replaced as below
	
	  scm_make_mutable_string           -> MAKE_STRING
	  scm_make_mutable_string_copying   -> MAKE_STRING_COPYING
	  scm_make_immutable_string         -> MAKE_IMMUTABLE_STRING
	  scm_make_immutable_string_copying -> MAKE_IMMUTABLE_STRING_COPYING
	
	* sigscheme/sigscheme.h
	  - (scm_make_string): Removed decl
	  - (scm_make_mutable_string, scm_make_string): Rename
	    scm_make_mutable_string() with scm_make_string()
	  - (scm_make_mutable_string_copying, scm_make_string_copying): Rename
	    scm_make_mutable_string_copying() with scm_make_string_copying()
	* sigscheme/storage.c
	  - (scm_make_string_internal):
	    * Renamed from scm_make_string()
	    * Make static
	  - (scm_make_mutable_string, scm_make_string): Rename
	    scm_make_mutable_string() with scm_make_string()
	  - (scm_make_mutable_string_copying, scm_make_string_copying): Rename
	    scm_make_mutable_string_copying() with scm_make_string_copying()
	* sigscheme/storage-fatty.h
	  - (SCM_SAL_MAKE_STRING, SCM_SAL_MAKE_STRING_COPYING): Follow the
	    renaming
	* sigscheme/sigschemetype.h
	  - (SCM_MAKE_STRING, SCM_MAKE_STRING_COPYING): Ditto
	* sigscheme/sigschemetype-compact.h
	  - (SCM_MAKE_STRING, SCM_MAKE_STRING_COPYING): Ditto
	* sigscheme/read.c
	  - (read_string): Ditto
	* sigscheme/error.c
	  - (scm_init_error, scm_die, scm_error, scm_error_obj): Ditto
	* sigscheme/operations-srfi6.c
	  - (scm_p_srfi6_get_output_string): Ditto
	* sigscheme/io.c
	  - (scm_load_internal): Ditto
	* sigscheme/operations.c
	  - (scm_p_number2string, scm_p_symbol2string, scm_p_make_string,
	    scm_p_substring, scm_p_string_append, scm_p_list2string,
	    scm_p_string_copy, scm_p_string_filld): Ditto
	* sigscheme/operations-nonstd.c
	  - (scm_p_load_path, create_loaded_str): Ditto
	* sigscheme/sigscheme.c
	  - (scm_initialize_internal, scm_interpret_argv): Ditto
	* sigscheme/main.c
	  - (main): Ditto
	* sigscheme/operations-srfi34.c
	  - (MAKE_STR_COPYING): Removed
	  - (scm_initialize_srfi34): Replace MAKE_STR_COPYING() with
	    MAKE_IMMUTABLE_STRING_COPYING()
	
2005-12-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (scm_s_cond_internal): don't pass the function to the
	    macro as an argument.
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_number_or_symbol): Support non-R5RS '-sym form symbol for
	    uim when !SCM_STRICT_R5RS
	* sigscheme/test/test-syntax.scm
	  - Add tests for the form
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-r5rs-deepcadrs.c
	* sigscheme/mbcport.c
	* sigscheme/read.c
	* sigscheme/encoding.c
	* sigscheme/error.c
	* sigscheme/operations-srfi34.c
	* sigscheme/operations-srfi38.c
	* sigscheme/sigschemetype-compact.h
	* sigscheme/storage.c
	* sigscheme/operations-srfi2.c
	* sigscheme/operations-srfi6.c
	* sigscheme/operations-srfi8.c
	* sigscheme/strport.c
	* sigscheme/operations-srfi60.c
	* sigscheme/io.c
	* sigscheme/storage-continuation.c
	* sigscheme/nullport.c
	* sigscheme/operations.c
	* sigscheme/operations-nonstd.c
	* sigscheme/storage-gc.c
	* sigscheme/test-compact.c
	* sigscheme/operations-srfi1.c
	* sigscheme/storage-symbol.c
	* sigscheme/sigscheme.c
	* sigscheme/README
	* sigscheme/sigscheme.h
	* sigscheme/MEMO
	* sigscheme/operations-siod.c
	* sigscheme/fileport.c
	* sigscheme/eval.c
	* sigscheme/operations-srfi23.c
	* sigscheme/print.c
	  - Trim white space at end of lines
	    perl -i -pe 's/\s+$/\n/' sigscheme/*
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	* sigscheme/encoding.c
	* sigscheme/error.c
	* sigscheme/operations-srfi34.c
	* sigscheme/storage.c
	* sigscheme/operations-srfi6.c
	* sigscheme/io.c
	* sigscheme/storage-continuation.c
	* sigscheme/operations.c
	* sigscheme/operations-nonstd.c
	* sigscheme/storage-gc.c
	* sigscheme/test-compact.c
	* sigscheme/operations-srfi1.c
	* sigscheme/sigscheme.c
	* sigscheme/storage-symbol.c
	* sigscheme/main.c
	* sigscheme/eval.c
	* sigscheme/print.c
	  - Insert newline after all return type of static function
	    definitions, and trim argument list by hand
	    perl -i -pe '$/ = undef; s/^(static\s.+[^\s])\s*\b(\w+)(\([^{;]+\))\s*\n\s*\{/\1\n\2\3\n{/mg' sigscheme/*.c
	
2005-12-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (HAVE_POSIX_MEMALIGN): Disable when *BSD as temporary solution
	* sigscheme/alloc.c
	  - (scm_malloc_aligned):
	    * Replace manual error handling for posix_memalign(3) with
	      SCM_ASSERT_ALLOCATED()
	    * Add alignment assertion for posix_memalign(3)
	
2005-12-16 Jun Inoue <jun.lambda@gmail.com>
	
	Grand rename from JavaStyle to c_style.  Type names and function names
	that contain type names are left untouched.  Add a newline after the
	return type in function definitions.
	
	
	Noteworthy changes:
	
	* sigscheme/sigscheme.c
	  - (scm_return_value): rename to scm_return_value_cache
	  - (Scm_return_value): rename to scm_return_value
	
	* sigscheme/error.c
	  - (SigScm_ErrorObj): remove.
	  - (Scm_ErrorObj): rename to scm_error_obj
	
	* sigscheme/sigscheme.h
	  - (SCM_ASSERT_LIVE_PORT): use scm_error_obj() without specifying
	    current function.
	
	Systematic changes:
	
	SigScm_ --> scm_
	Scm_    --> scm_
	ScmOp_  --> scm_p_
	ScmExp_ --> scm_s_
	JavaStyle --> c_style
	
	* sigscheme/encoding.c
	  - (Scm_mb_bare_c_strlen): rename to scm_mb_bare_c_strlen
	  - (Scm_mb_find_codec): rename to scm_mb_find_codec
	  - (Scm_mb_strlen): rename to scm_mb_strlen
	  - (Scm_mb_substring): rename to scm_mb_substring
	* sigscheme/error.c
	  - (ScmOp_backtrace): rename to scm_p_backtrace
	  - (ScmOp_error_objectp): rename to scm_p_error_objectp
	  - (ScmOp_fatal_error): rename to scm_p_fatal_error
	  - (ScmOp_inspect_error): rename to scm_p_inspect_error
	  - (Scm_ErrorObj): rename to scm_error_obj
	  - (Scm_FatalError): rename to scm_fatal_error
	  - (Scm_MakeErrorObj): rename to scm_make_error_obj
	  - (Scm_RaiseError): rename to scm_raise_error
	  - (SigScm_CategorizedDebug): rename to scm_categorized_debug
	  - (SigScm_Debug): rename to scm_debug
	  - (SigScm_DebugCategories): rename to scm_debug_categories
	  - (SigScm_Die): rename to scm_die
	  - (SigScm_Error): rename to scm_error
	  - (SigScm_ErrorObj): rename to scm_error_obj
	  - (SigScm_InitError): rename to scm_init_error
	  - (SigScm_PredefinedDebugCategories): rename to scm_predefined_debug_categories
	  - (SigScm_SetDebugCategories): rename to scm_set_debug_categories
	  - (SigScm_ShowBacktrace): rename to scm_show_backtrace
	  - (SigScm_ShowErrorHeader): rename to scm_show_error_header
	* sigscheme/eval.c
	  - (ScmExp_and): rename to scm_s_and
	  - (ScmExp_begin): rename to scm_s_begin
	  - (ScmExp_case): rename to scm_s_case
	  - (ScmExp_cond): rename to scm_s_cond
	  - (ScmExp_cond_internal): rename to scm_s_cond_internal
	  - (ScmExp_define): rename to scm_s_define
	  - (ScmExp_delay): rename to scm_s_delay
	  - (ScmExp_do): rename to scm_s_do
	  - (ScmExp_if): rename to scm_s_if
	  - (ScmExp_lambda): rename to scm_s_lambda
	  - (ScmExp_let): rename to scm_s_let
	  - (ScmExp_letrec): rename to scm_s_letrec
	  - (ScmExp_letstar): rename to scm_s_letstar
	  - (ScmExp_or): rename to scm_s_or
	  - (ScmExp_quasiquote): rename to scm_s_quasiquote
	  - (ScmExp_quote): rename to scm_s_quote
	  - (ScmExp_setd): rename to scm_s_setd
	  - (ScmExp_unquote): rename to scm_s_unquote
	  - (ScmExp_unquote_splicing): rename to scm_s_unquote_splicing
	  - (ScmOp_apply): rename to scm_p_apply
	  - (ScmOp_eval): rename to scm_p_eval
	  - (ScmOp_interaction_environment): rename to scm_p_interaction_environment
	  - (ScmOp_null_environment): rename to scm_p_null_environment
	  - (ScmOp_scheme_report_environment): rename to scm_p_scheme_report_environment
	  - (Scm_AddEnvironment): rename to scm_add_environment
	  - (Scm_ExtendEnvironment): rename to scm_extend_environment
	  - (Scm_LookupEnvironment): rename to scm_lookup_environment
	  - (Scm_SymbolValue): rename to scm_symbol_value
	  - (Scm_call): rename to scm_call
	  - (Scm_eval): rename to scm_eval
	  - (Scm_tailcall): rename to scm_tailcall
	* sigscheme/fileport.c
	  - (Scm_fileport_init): rename to scm_fileport_init
	* sigscheme/io.c
	  - (ScmOp_call_with_input_file): rename to scm_p_call_with_input_file
	  - (ScmOp_call_with_output_file): rename to scm_p_call_with_output_file
	  - (ScmOp_char_readyp): rename to scm_p_char_readyp
	  - (ScmOp_close_input_port): rename to scm_p_close_input_port
	  - (ScmOp_close_output_port): rename to scm_p_close_output_port
	  - (ScmOp_current_input_port): rename to scm_p_current_input_port
	  - (ScmOp_current_output_port): rename to scm_p_current_output_port
	  - (ScmOp_display): rename to scm_p_display
	  - (ScmOp_eof_objectp): rename to scm_p_eof_objectp
	  - (ScmOp_input_portp): rename to scm_p_input_portp
	  - (ScmOp_load): rename to scm_p_load
	  - (ScmOp_newline): rename to scm_p_newline
	  - (ScmOp_open_input_file): rename to scm_p_open_input_file
	  - (ScmOp_open_output_file): rename to scm_p_open_output_file
	  - (ScmOp_output_portp): rename to scm_p_output_portp
	  - (ScmOp_peek_char): rename to scm_p_peek_char
	  - (ScmOp_read): rename to scm_p_read
	  - (ScmOp_read_char): rename to scm_p_read_char
	  - (ScmOp_with_input_from_file): rename to scm_p_with_input_from_file
	  - (ScmOp_with_output_to_file): rename to scm_p_with_output_to_file
	  - (ScmOp_write): rename to scm_p_write
	  - (ScmOp_write_char): rename to scm_p_write_char
	  - (Scm_InitIO): rename to scm_init_io
	  - (Scm_NewCharPort): rename to scm_make_char_port
	  - (SigScm_ErrorNewline): rename to scm_error_newline
	  - (SigScm_ErrorPrintf): rename to scm_error_printf
	  - (SigScm_PortNewline): rename to scm_port_newline
	  - (SigScm_PortPrintf): rename to scm_port_printf
	  - (SigScm_VErrorPrintf): rename to scm_error_vprintf
	  - (SigScm_VPortPrintf): rename to scm_port_vprintf
	  - (SigScm_load): rename to scm_load
	  - (SigScm_load_internal): rename to scm_load_internal
	  - (SigScm_set_lib_path): rename to scm_set_lib_path
	* sigscheme/nullport.c
	  - (Scm_nullport_init): rename to scm_nullport_init
	* sigscheme/operations-nonstd.c
	  - (ScmOp_delete_file): rename to scm_p_delete_file
	  - (ScmOp_file_existsp): rename to scm_p_file_existsp
	  - (ScmOp_load_path): rename to scm_p_load_path
	  - (ScmOp_provide): rename to scm_p_provide
	  - (ScmOp_providedp): rename to scm_p_providedp
	  - (ScmOp_require): rename to scm_p_require
	  - (ScmOp_symbol_boundp): rename to scm_p_symbol_boundp
	  - (SigScm_Initialize_NONSTD_FEATURES): rename to scm_initialize_nonstd_features
	* sigscheme/operations-r5rs-deepcadrs.c
	  - (ScmOp_caaaar): rename to scm_p_caaaar
	  - (ScmOp_caaadr): rename to scm_p_caaadr
	  - (ScmOp_caaar): rename to scm_p_caaar
	  - (ScmOp_caadar): rename to scm_p_caadar
	  - (ScmOp_caaddr): rename to scm_p_caaddr
	  - (ScmOp_caadr): rename to scm_p_caadr
	  - (ScmOp_cadaar): rename to scm_p_cadaar
	  - (ScmOp_cadadr): rename to scm_p_cadadr
	  - (ScmOp_cadar): rename to scm_p_cadar
	  - (ScmOp_caddar): rename to scm_p_caddar
	  - (ScmOp_cadddr): rename to scm_p_cadddr
	  - (ScmOp_cdaaar): rename to scm_p_cdaaar
	  - (ScmOp_cdaadr): rename to scm_p_cdaadr
	  - (ScmOp_cdaar): rename to scm_p_cdaar
	  - (ScmOp_cdadar): rename to scm_p_cdadar
	  - (ScmOp_cdaddr): rename to scm_p_cdaddr
	  - (ScmOp_cdadr): rename to scm_p_cdadr
	  - (ScmOp_cddaar): rename to scm_p_cddaar
	  - (ScmOp_cddadr): rename to scm_p_cddadr
	  - (ScmOp_cddar): rename to scm_p_cddar
	  - (ScmOp_cdddar): rename to scm_p_cdddar
	  - (ScmOp_cddddr): rename to scm_p_cddddr
	* sigscheme/operations-siod.c
	  - (ScmExp_undefine): rename to scm_s_undefine
	  - (ScmOp_SIOD_equal): rename to scm_p_siod_equal
	  - (ScmOp_closure_code): rename to scm_p_closure_code
	  - (ScmOp_eof_val): rename to scm_p_eof_val
	  - (ScmOp_set_symbol_valued): rename to scm_p_set_symbol_valued
	  - (ScmOp_symbol_value): rename to scm_p_symbol_value
	  - (ScmOp_the_environment): rename to scm_p_the_environment
	  - (ScmOp_verbose): rename to scm_p_verbose
	  - (SigScm_GetVerboseLevel): rename to scm_get_verbose_level
	  - (SigScm_Initialize_SIOD): rename to scm_initialize_siod
	  - (SigScm_SetVerboseLevel): rename to scm_set_verbose_level
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_carpluscdr): rename to scm_p_srfi1_carpluscdr
	  - (ScmOp_SRFI1_circular_list): rename to scm_p_srfi1_circular_list
	  - (ScmOp_SRFI1_circular_listp): rename to scm_p_srfi1_circular_listp
	  - (ScmOp_SRFI1_concatenate): rename to scm_p_srfi1_concatenate
	  - (ScmOp_SRFI1_consstar): rename to scm_p_srfi1_consstar
	  - (ScmOp_SRFI1_dotted_listp): rename to scm_p_srfi1_dotted_listp
	  - (ScmOp_SRFI1_drop): rename to scm_p_srfi1_drop
	  - (ScmOp_SRFI1_drop_right): rename to scm_p_srfi1_drop_right
	  - (ScmOp_SRFI1_drop_rightd): rename to scm_p_srfi1_drop_rightd
	  - (ScmOp_SRFI1_eighth): rename to scm_p_srfi1_eighth
	  - (ScmOp_SRFI1_fifth): rename to scm_p_srfi1_fifth
	  - (ScmOp_SRFI1_first): rename to scm_p_srfi1_first
	  - (ScmOp_SRFI1_fourth): rename to scm_p_srfi1_fourth
	  - (ScmOp_SRFI1_iota): rename to scm_p_srfi1_iota
	  - (ScmOp_SRFI1_last): rename to scm_p_srfi1_last
	  - (ScmOp_SRFI1_last_pair): rename to scm_p_srfi1_last_pair
	  - (ScmOp_SRFI1_lengthplus): rename to scm_p_srfi1_lengthplus
	  - (ScmOp_SRFI1_list_copy): rename to scm_p_srfi1_list_copy
	  - (ScmOp_SRFI1_list_tabulate): rename to scm_p_srfi1_list_tabulate
	  - (ScmOp_SRFI1_listequal): rename to scm_p_srfi1_listequal
	  - (ScmOp_SRFI1_make_list): rename to scm_p_srfi1_make_list
	  - (ScmOp_SRFI1_ninth): rename to scm_p_srfi1_ninth
	  - (ScmOp_SRFI1_not_pairp): rename to scm_p_srfi1_not_pairp
	  - (ScmOp_SRFI1_null_listp): rename to scm_p_srfi1_null_listp
	  - (ScmOp_SRFI1_proper_listp): rename to scm_p_srfi1_proper_listp
	  - (ScmOp_SRFI1_second): rename to scm_p_srfi1_second
	  - (ScmOp_SRFI1_seventh): rename to scm_p_srfi1_seventh
	  - (ScmOp_SRFI1_sixth): rename to scm_p_srfi1_sixth
	  - (ScmOp_SRFI1_split_at): rename to scm_p_srfi1_split_at
	  - (ScmOp_SRFI1_split_atd): rename to scm_p_srfi1_split_atd
	  - (ScmOp_SRFI1_take): rename to scm_p_srfi1_take
	  - (ScmOp_SRFI1_take_right): rename to scm_p_srfi1_take_right
	  - (ScmOp_SRFI1_taked): rename to scm_p_srfi1_taked
	  - (ScmOp_SRFI1_tenth): rename to scm_p_srfi1_tenth
	  - (ScmOp_SRFI1_third): rename to scm_p_srfi1_third
	  - (ScmOp_SRFI1_xcons): rename to scm_p_srfi1_xcons
	  - (SigScm_Initialize_SRFI1): rename to scm_initialize_srfi1
	* sigscheme/operations-srfi2.c
	  - (ScmExp_SRFI2_and_letstar): rename to scm_s_srfi2_and_letstar
	  - (SigScm_Initialize_SRFI2): rename to scm_initialize_srfi2
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error): rename to scm_p_srfi23_error
	  - (SigScm_Initialize_SRFI23): rename to scm_initialize_srfi23
	* sigscheme/operations-srfi34.c
	  - (ScmOp_SRFI34_raise): rename to scm_p_srfi34_raise
	  - (ScmOp_SRFI34_with_exception_handler): rename to scm_p_srfi34_with_exception_handler
	  - (SigScm_Initialize_SRFI34): rename to scm_initialize_srfi34
	* sigscheme/operations-srfi38.c
	  - (ScmOp_SRFI38_write_with_shared_structure): rename to scm_p_srfi38_write_with_shared_structure
	  - (SigScm_Initialize_SRFI38): rename to scm_initialize_srfi38
	* sigscheme/operations-srfi6.c
	  - (ScmOp_SRFI6_get_output_string): rename to scm_p_srfi6_get_output_string
	  - (ScmOp_SRFI6_open_input_string): rename to scm_p_srfi6_open_input_string
	  - (ScmOp_SRFI6_open_output_string): rename to scm_p_srfi6_open_output_string
	  - (SigScm_Initialize_SRFI6): rename to scm_initialize_srfi6
	* sigscheme/operations-srfi60.c
	  - (ScmOp_SRFI60_bitwise_if): rename to scm_p_srfi60_bitwise_if
	  - (ScmOp_SRFI60_lognot): rename to scm_p_srfi60_lognot
	  - (ScmOp_SRFI60_logtest): rename to scm_p_srfi60_logtest
	  - (SigScm_Initialize_SRFI60): rename to scm_initialize_srfi60
	* sigscheme/operations-srfi8.c
	  - (ScmExp_SRFI8_receive): rename to scm_s_srfi8_receive
	  - (SigScm_Initialize_SRFI8): rename to scm_initialize_srfi8
	* sigscheme/operations.c
	  - (ScmOp_abs): rename to scm_p_abs
	  - (ScmOp_add): rename to scm_p_add
	  - (ScmOp_append): rename to scm_p_append
	  - (ScmOp_assoc): rename to scm_p_assoc
	  - (ScmOp_assq): rename to scm_p_assq
	  - (ScmOp_assv): rename to scm_p_assv
	  - (ScmOp_booleanp): rename to scm_p_booleanp
	  - (ScmOp_c_length): rename to scm_p_c_length
	  - (ScmOp_caar): rename to scm_p_caar
	  - (ScmOp_caddr): rename to scm_p_caddr
	  - (ScmOp_cadr): rename to scm_p_cadr
	  - (ScmOp_call_with_current_continuation): rename to scm_p_call_with_current_continuation
	  - (ScmOp_car): rename to scm_p_car
	  - (ScmOp_cdar): rename to scm_p_cdar
	  - (ScmOp_cdddr): rename to scm_p_cdddr
	  - (ScmOp_cddr): rename to scm_p_cddr
	  - (ScmOp_cdr): rename to scm_p_cdr
	  - (ScmOp_char2integer): rename to scm_p_char2integer
	  - (ScmOp_char_alphabeticp): rename to scm_p_char_alphabeticp
	  - (ScmOp_char_downcase): rename to scm_p_char_downcase
	  - (ScmOp_char_lower_casep): rename to scm_p_char_lower_casep
	  - (ScmOp_char_numericp): rename to scm_p_char_numericp
	  - (ScmOp_char_upcase): rename to scm_p_char_upcase
	  - (ScmOp_char_upper_casep): rename to scm_p_char_upper_casep
	  - (ScmOp_char_whitespacep): rename to scm_p_char_whitespacep
	  - (ScmOp_charequalp): rename to scm_p_charequalp
	  - (ScmOp_charp): rename to scm_p_charp
	  - (ScmOp_cons): rename to scm_p_cons
	  - (ScmOp_divide): rename to scm_p_divide
	  - (ScmOp_dynamic_wind): rename to scm_p_dynamic_wind
	  - (ScmOp_eqp): rename to scm_p_eqp
	  - (ScmOp_equal): rename to scm_p_equal
	  - (ScmOp_equalp): rename to scm_p_equalp
	  - (ScmOp_eqvp): rename to scm_p_eqvp
	  - (ScmOp_evenp): rename to scm_p_evenp
	  - (ScmOp_for_each): rename to scm_p_for_each
	  - (ScmOp_force): rename to scm_p_force
	  - (ScmOp_greater): rename to scm_p_greater
	  - (ScmOp_greater_eq): rename to scm_p_greater_eq
	  - (ScmOp_integer2char): rename to scm_p_integer2char
	  - (ScmOp_length): rename to scm_p_length
	  - (ScmOp_less): rename to scm_p_less
	  - (ScmOp_less_eq): rename to scm_p_less_eq
	  - (ScmOp_list): rename to scm_p_list
	  - (ScmOp_list2string): rename to scm_p_list2string
	  - (ScmOp_list2vector): rename to scm_p_list2vector
	  - (ScmOp_list_ref): rename to scm_p_list_ref
	  - (ScmOp_list_tail): rename to scm_p_list_tail
	  - (ScmOp_listp): rename to scm_p_listp
	  - (ScmOp_listtail_internal): rename to scm_p_listtail_internal
	  - (ScmOp_make_string): rename to scm_p_make_string
	  - (ScmOp_make_vector): rename to scm_p_make_vector
	  - (ScmOp_map): rename to scm_p_map
	  - (ScmOp_max): rename to scm_p_max
	  - (ScmOp_member): rename to scm_p_member
	  - (ScmOp_memq): rename to scm_p_memq
	  - (ScmOp_memv): rename to scm_p_memv
	  - (ScmOp_min): rename to scm_p_min
	  - (ScmOp_modulo): rename to scm_p_modulo
	  - (ScmOp_multiply): rename to scm_p_multiply
	  - (ScmOp_negativep): rename to scm_p_negativep
	  - (ScmOp_not): rename to scm_p_not
	  - (ScmOp_nullp): rename to scm_p_nullp
	  - (ScmOp_number2string): rename to scm_p_number2string
	  - (ScmOp_numberp): rename to scm_p_numberp
	  - (ScmOp_oddp): rename to scm_p_oddp
	  - (ScmOp_pairp): rename to scm_p_pairp
	  - (ScmOp_positivep): rename to scm_p_positivep
	  - (ScmOp_procedurep): rename to scm_p_procedurep
	  - (ScmOp_quotient): rename to scm_p_quotient
	  - (ScmOp_remainder): rename to scm_p_remainder
	  - (ScmOp_reverse): rename to scm_p_reverse
	  - (ScmOp_set_card): rename to scm_p_set_card
	  - (ScmOp_set_cdrd): rename to scm_p_set_cdrd
	  - (ScmOp_string): rename to scm_p_string
	  - (ScmOp_string2list): rename to scm_p_string2list
	  - (ScmOp_string2number): rename to scm_p_string2number
	  - (ScmOp_string2symbol): rename to scm_p_string2symbol
	  - (ScmOp_string_append): rename to scm_p_string_append
	  - (ScmOp_string_copy): rename to scm_p_string_copy
	  - (ScmOp_string_filld): rename to scm_p_string_filld
	  - (ScmOp_string_length): rename to scm_p_string_length
	  - (ScmOp_string_ref): rename to scm_p_string_ref
	  - (ScmOp_string_setd): rename to scm_p_string_setd
	  - (ScmOp_stringequalp): rename to scm_p_stringequalp
	  - (ScmOp_stringp): rename to scm_p_stringp
	  - (ScmOp_substring): rename to scm_p_substring
	  - (ScmOp_subtract): rename to scm_p_subtract
	  - (ScmOp_symbol2string): rename to scm_p_symbol2string
	  - (ScmOp_symbolp): rename to scm_p_symbolp
	  - (ScmOp_values): rename to scm_p_values
	  - (ScmOp_vector): rename to scm_p_vector
	  - (ScmOp_vector2list): rename to scm_p_vector2list
	  - (ScmOp_vector_filld): rename to scm_p_vector_filld
	  - (ScmOp_vector_length): rename to scm_p_vector_length
	  - (ScmOp_vector_ref): rename to scm_p_vector_ref
	  - (ScmOp_vector_setd): rename to scm_p_vector_setd
	  - (ScmOp_vectorp): rename to scm_p_vectorp
	  - (ScmOp_zerop): rename to scm_p_zerop
	* sigscheme/print.c
	  - (SigScm_Display): rename to scm_display
	  - (SigScm_DisplayToPort): rename to scm_display_to_port
	  - (SigScm_WriteToPort): rename to scm_write_to_port
	  - (SigScm_WriteToPortWithSharedStructure): rename to scm_write_to_port_with_shared_structure
	* sigscheme/read.c
	  - (SigScm_Read): rename to scm_read
	  - (SigScm_Read_Char): rename to scm_read_char
	* sigscheme/sigscheme.c
	  - (ScmExp_use): rename to scm_s_use
	  - (Scm_DefineAlias): rename to scm_define_alias
	  - (Scm_FreeArgv): rename to scm_free_argv
	  - (Scm_InterpretArgv): rename to scm_interpret_argv
	  - (Scm_Provide): rename to scm_provide
	  - (Scm_Providedp): rename to scm_providedp
	  - (Scm_RegisterFunc): rename to scm_register_func
	  - (Scm_Use): rename to scm_use
	  - (Scm_eval_c_string): rename to scm_eval_c_string
	  - (Scm_eval_c_string_internal): rename to scm_eval_c_string_internal
	  - (SigScm_Finalize): rename to scm_finalize
	  - (SigScm_Initialize): rename to scm_initialize
	  - (SigScm_Initialize_internal): rename to scm_initialize_internal
	  - (Scm_sym_else): rename to scm_sym_else
	  - (Scm_sym_quasiquote): rename to scm_sym_quasiquote
	  - (Scm_sym_quote): rename to scm_sym_quote
	  - (Scm_sym_unquote): rename to scm_sym_unquote
	  - (Scm_sym_unquote_splicing): rename to scm_sym_unquote_splicing
	  - (Scm_sym_yields): rename to scm_sym_yields
	* sigscheme/storage-continuation.c
	  - (Scm_CallContinuation): rename to scm_call_continuation
	  - (Scm_CallWithCurrentContinuation): rename to scm_call_with_current_continuation
	  - (Scm_DestructContinuation): rename to scm_destruct_continuation
	  - (Scm_DynamicWind): rename to scm_dynamic_wind
	  - (Scm_PopTraceFrame): rename to scm_pop_trace_frame
	  - (Scm_PushTraceFrame): rename to scm_push_trace_frame
	  - (Scm_TraceStack): rename to scm_trace_stack
	  - (SigScm_FinalizeContinuation): rename to scm_finalize_continuation
	  - (SigScm_InitContinuation): rename to scm_init_continuation
	* sigscheme/storage-gc.c
	  - (SigScm_FinalizeGC): rename to scm_finalize_gc
	  - (SigScm_GC_Protect): rename to scm_gc_protect
	  - (SigScm_GC_ProtectStack): rename to scm_gc_protect_stack
	  - (SigScm_GC_ProtectStackInternal): rename to scm_gc_protect_stack_internal
	  - (SigScm_GC_Unprotect): rename to scm_gc_unprotect
	  - (SigScm_GC_UnprotectStack): rename to scm_gc_unprotect_stack
	  - (SigScm_NewObjFromHeap): rename to scm_make_obj_from_heap
	* sigscheme/storage-symbol.c
	  - (Scm_Intern): rename to scm_intern
	  - (Scm_SymbolBoundTo): rename to scm_symbol_bound_to
	  - (SigScm_FinalizeSymbol): rename to scm_finalize_symbol
	  - (SigScm_InitSymbol): rename to scm_init_symbol
	* sigscheme/storage.c
	  - (SigScm_null_values): rename to scm_null_values
	  - (SigScm_null): rename to scm_null
	  - (SigScm_true): rename to scm_true
	  - (SigScm_false): rename to scm_false
	  - (SigScm_eof): rename to scm_eof
	  - (SigScm_unbound): rename to scm_unbound
	  - (SigScm_undef): rename to scm_undef
	  - (Scm_NewCFuncPointer): rename to scm_make_cfunc_pointer
	  - (Scm_NewCPointer): rename to scm_make_cpointer
	  - (Scm_NewChar): rename to scm_make_char
	  - (Scm_NewClosure): rename to scm_make_closure
	  - (Scm_NewCons): rename to scm_make_cons
	  - (Scm_NewContinuation): rename to scm_make_continuation
	  - (Scm_NewFunc): rename to scm_make_func
	  - (Scm_NewImmutableString): rename to scm_make_immutable_string
	  - (Scm_NewImmutableStringCopying): rename to scm_make_immutable_string_copying
	  - (Scm_NewInt): rename to scm_make_int
	  - (Scm_NewMutableString): rename to scm_make_mutable_string
	  - (Scm_NewMutableStringCopying): rename to scm_make_mutable_string_copying
	  - (Scm_NewPort): rename to scm_make_port
	  - (Scm_NewString): rename to scm_make_string
	  - (Scm_NewSymbol): rename to scm_make_symbol
	  - (Scm_NewValuePacket): rename to scm_make_value_packet
	  - (Scm_NewVector): rename to scm_make_vector
	  - (Scm_Type): rename to scm_type
	  - (SigScm_FinalizeStorage): rename to scm_finalize_storage
	* sigscheme/strport.c
	  - (Scm_strport_init): rename to scm_strport_init
	* sigscheme/test-compact.c
	  - (Scm_CheckCFuncPointer): rename to scm_check_cfunc_pointer
	  - (Scm_CheckCPointer): rename to scm_check_cpointer
	  - (Scm_CheckChar): rename to scm_check_char
	  - (Scm_CheckClosure): rename to scm_check_closure
	  - (Scm_CheckCons): rename to scm_check_cons
	  - (Scm_CheckConstant): rename to scm_check_constant
	  - (Scm_CheckContinuation): rename to scm_check_continuation
	  - (Scm_CheckFunc): rename to scm_check_func
	  - (Scm_CheckInt): rename to scm_check_int
	  - (Scm_CheckPort): rename to scm_check_port
	  - (Scm_CheckRef): rename to scm_check_ref
	  - (Scm_CheckStringCopying): rename to scm_check_string_copying
	  - (Scm_CheckSymbol): rename to scm_check_symbol
	  - (Scm_CheckValuePacket): rename to scm_check_value_packet
	  - (Scm_CheckVector): rename to scm_check_vector
	
2005-12-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/basecport.c
	  - (basecport_close): Fix leak
	
2005-12-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/strport.c
	  - (ostrport_append): Revert the bad coding. Sorry for the bothering.
	
2005-12-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_ALLOC): Removed
	  - (SCM_PORT_MALLOC, SCM_PORT_CALLOC, SCM_PORT_REALLOC): New macro
	* sigscheme/sigscheme.h
	  - (SCM_PORT_MALLOC, SCM_PORT_CALLOC, SCM_PORT_REALLOC): New macro
	* sigscheme/mbcport.c
	  - (ScmMultiByteCharPort_new): Replace SCM_PORT_ALLOC() with
	    SCM_PORT_MALLOC()
	* sigscheme/sbcport.c
	  - (ScmSingleByteCharPort_new): Ditto
	* sigscheme/nullport.c
	  - (ScmNullPort_new): Ditto
	* sigscheme/fileport.c
	  - (fileport_new_internal): Ditto
	  - (fileport_inspect): Add allocation error check by
	    SCM_PORT_MALLOC()
	* sigscheme/basecport.c
	  - (ScmBaseCharPort_inspect): Ditto
	* sigscheme/strport.c
	  - (istrport_new, ScmOutputStrPort_new): Replace SCM_PORT_ALLOC()
	    with SCM_PORT_MALLOC()
	  - (ostrport_append): Replace manual error handling with
	    SCM_PORT_REALLOC()
	
2005-12-16 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/strport.c
	  - (ostrport_append): fixed the bug introduced in r2592
	
2005-12-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/strport.c
	  - (ostrport_append): Modify coding style
	
2005-12-16 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/strport.c
	  - (ostrport_append): fix invalid memory allocation size when 
	    port->buf_size is zero, and not to access NULL[port->cur]
	    when new_str is NULL.
	
2005-12-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_FREECELL_CAR, SCM_FREECELL_CDR, SCM_FREECELL_SET_CAR,
	    SCM_FREECELL_SET_CDR): Removed
	  - (SCM_FREECELL_NEXT, SCM_FREECELL_FREESLOT, SCM_FREECELL_SET_NEXT,
	    SCM_FREECELL_SET_FREESLOT, SCM_FREECELL_CLEAR_FREESLOT,
	    SCM_RECLAIM_CELL): New macro
	* sigscheme/storage-fatty.h
	  - (SCM_SAL_FREECELL_CAR, SCM_SAL_FREECELL_CDR,
	    SCM_SAL_FREECELL_SET_CAR, SCM_SAL_FREECELL_SET_CDR): Removed
	  - (SCM_SAL_FREECELL_NEXT, SCM_SAL_FREECELL_FREESLOT,
	    SCM_SAL_FREECELL_SET_NEXT, SCM_SAL_FREECELL_SET_FREESLOT,
	    SCM_SAL_FREECELL_CLEAR_FREESLOT, SCM_SAL_RECLAIM_CELL): New macro
	* sigscheme/storage-gc.c
	  - (SigScm_NewObjFromHeap, add_heap, gc_sweep): Follow the API changes
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit introduces the storage abstraction layer and
	  storage-fatty.h as an implementation
	
	* sigscheme/config.h
	  - (SCM_USE_STORAGE_ABSTRACTION_LAYER): New macro
	* sigscheme/sigscheme.h
	  - (SCM_CAR, SCM_CDR, SCM_CAAR, SCM_CADR, SCM_CDAR, SCM_CDDR): New
	    macro for SCM_USE_STORAGE_ABSTRACTION_LAYER
	  - (enum ScmObjType, enum ScmFuncTypeCode, enum ScmReductionState,
	    enum ScmReturnType, enum ScmPortFlag, struct ScmEvalState_,
	    ScmEvalState, SCM_MAKE_BOOL, SCM_SYNTAXP, SCM_PROCEDUREP,
	    SCM_NULLP, SCM_FALSEP, SCM_NFALSEP, SCM_EOFP): Copied from
	    sigschemetype.h for SCM_USE_STORAGE_ABSTRACTION_LAYER
	  - include storage-fatty.h or storage-compact.h when
	    SCM_USE_STORAGE_ABSTRACTION_LAYER
	  - (SCM_MAKE_INT, SCM_MAKE_CONS, SCM_MAKE_SYMBOL, SCM_MAKE_CHAR,
	    SCM_MAKE_STRING, SCM_MAKE_STRING_COPYING,
	    SCM_MAKE_IMMUTABLE_STRING, SCM_MAKE_IMMUTABLE_STRING_COPYING,
	    SCM_MAKE_FUNC, SCM_MAKE_CLOSURE, SCM_MAKE_VECTOR, SCM_MAKE_PORT,
	    SCM_MAKE_CONTINUATION, SCM_MAKE_C_POINTER, SCM_MAKE_C_FUNCPOINTER,
	    SCM_MAKE_VALUEPACKET, SCM_TYPE, SCM_INTP, SCM_INT_VALUE,
	    SCM_INT_SET_VALUE, SCM_CONSP, SCM_CONS_CAR, SCM_CONS_CDR,
	    SCM_CONS_SET_CAR, SCM_CONS_SET_CDR, SCM_SYMBOLP, SCM_SYMBOL_NAME,
	    SCM_SYMBOL_VCELL, SCM_SYMBOL_SET_NAME, SCM_SYMBOL_SET_VCELL,
	    SCM_CHARP, SCM_CHAR_VALUE, SCM_CHAR_SET_VALUE, SCM_STRINGP,
	    SCM_STRING_STR, SCM_STRING_LEN, SCM_STRING_SET_STR,
	    SCM_STRING_SET_LEN, SCM_STRING_MUTABLEP, SCM_STRING_SET_MUTABLE,
	    SCM_STRING_SET_IMMUTABLE, SCM_FUNCP, SCM_FUNC_TYPECODE,
	    SCM_FUNC_CFUNC, SCM_FUNC_SET_TYPECODE, SCM_FUNC_SET_CFUNC,
	    SCM_CLOSUREP, SCM_CLOSURE_EXP, SCM_CLOSURE_SET_EXP,
	    SCM_CLOSURE_ENV, SCM_CLOSURE_SET_ENV, SCM_VECTORP, SCM_VECTOR_VEC,
	    SCM_VECTOR_LEN, SCM_VECTOR_SET_VEC, SCM_VECTOR_SET_LEN,
	    SCM_VECTOR_VALID_INDEXP, SCM_PORTP, SCM_PORT_FLAG, SCM_PORT_IMPL,
	    SCM_PORT_SET_FLAG, SCM_PORT_SET_IMPL, SCM_CONTINUATIONP,
	    SCM_CONTINUATION_OPAQUE, SCM_CONTINUATION_TAG,
	    SCM_CONTINUATION_SET_OPAQUE, SCM_CONTINUATION_SET_TAG,
	    SCM_VALUEPACKETP, SCM_VALUEPACKET_VALUES, SCM_CONSTANTP,
	    SCM_C_POINTERP, SCM_C_POINTER_VALUE, SCM_C_POINTER_SET_VALUE,
	    SCM_C_FUNCPOINTERP, SCM_C_FUNCPOINTER_VALUE,
	    SCM_C_FUNCPOINTER_SET_VALUE, SCM_INTERACTION_ENV, SCM_R5RS_ENV,
	    SCM_NULL_ENV, SCM_ENVP, SCM_INVALID_REF, SCM_REF_CAR, SCM_REF_CDR,
	    SCM_REF_OFF_HEAP, SCM_DEREF, SCM_SET, SCM_INVALID, SCM_NULL,
	    SCM_TRUE, SCM_FALSE, SCM_EOF, SCM_UNBOUND, SCM_UNDEF, SCM_EQ
	    SCM_SYM_QUOTE, SCM_SYM_QUASIQUOTE, SCM_SYM_UNQUOTE,
	    SCM_SYM_UNQUOTE_SPLICING): New macro for
	    SCM_USE_STORAGE_ABSTRACTION_LAYER
	  - (SCM_ASSERT_TYPE, SCM_AS_INT, SCM_AS_CONS, SCM_AS_SYMBOL,
	    SCM_AS_CHAR, SCM_AS_STRING, SCM_AS_FUNC, SCM_AS_CLOSURE,
	    SCM_AS_VECTOR, SCM_AS_PORT, SCM_AS_CONTINUATION,
	    SCM_AS_VALUEPACKET, SCM_AS_C_POINTER, SCM_AS_C_FUNCPOINTER): New
	    macro copied from the equivalent definition for each macro of
	    sigschemetype.h
	* sigscheme/storage-fatty.h
	  - New file (copied from sigschemetype.h)
	  - (ScmCell, ScmObj, ScmRef, ScmFuncType, enum ScmStrMutationType,
	    struct ScmCell_): Copied from sigschemetype.h
	  - (SCM_ENTYPE, SCM_MARK, SCM_STRING_MUTATION_TYPE_MASK,
	    SCM_STRING_STR_VALUE_MASK, SCM_STRING_MUTATION_TYPE,
	    SCM_VECTOR_CREF, SCM_VECTOR_SET_CREF, SCM_VECTOR_REF,
	    SCM_VECTOR_SET_REF, SCM_VECTOR_CHECK_IDX, SigScm_null,
	    SigScm_true, SigScm_false, SigScm_eof, SigScm_unbound,
	    SigScm_undef, Scm_sym_quote, Scm_sym_quasiquote, Scm_sym_unquote,
	    Scm_sym_unquote_splicing, ): Copied from sigschemetype.h
	  - (SCM_SAL_MAKE_INT, SCM_SAL_MAKE_CONS, SCM_SAL_MAKE_SYMBOL,
	    SCM_SAL_MAKE_CHAR, SCM_SAL_MAKE_STRING,
	    SCM_SAL_MAKE_STRING_COPYING, SCM_SAL_MAKE_IMMUTABLE_STRING,
	    SCM_SAL_MAKE_IMMUTABLE_STRING_COPYING, SCM_SAL_MAKE_FUNC,
	    SCM_SAL_MAKE_CLOSURE, SCM_SAL_MAKE_VECTOR, SCM_SAL_MAKE_PORT,
	    SCM_SAL_MAKE_CONTINUATION, SCM_SAL_MAKE_C_POINTER,
	    SCM_SAL_MAKE_C_FUNCPOINTER, SCM_SAL_MAKE_VALUEPACKET): New macro
	  - (SCM_SAL_STRING_MUTABLEP, SCM_SAL_VECTOR_VALID_INDEXP): New macro
	  - (SCM_SAL_TYPE, SCM_SAL_INTP, SCM_SAL_ENTYPE_INT,
	    SCM_SAL_INT_VALUE, SCM_SAL_INT_SET_VALUE, SCM_SAL_CONSP,
	    SCM_SAL_ENTYPE_CONS, SCM_SAL_CONS_CAR, SCM_SAL_CONS_CDR,
	    SCM_SAL_CONS_SET_CAR, SCM_SAL_CONS_SET_CDR, SCM_SAL_SYMBOLP,
	    SCM_SAL_ENTYPE_SYMBOL, SCM_SAL_SYMBOL_NAME,
	    SCM_SAL_SYMBOL_SET_NAME, SCM_SAL_SYMBOL_VCELL,
	    SCM_SAL_SYMBOL_SET_VCELL, SCM_SAL_CHARP, SCM_SAL_ENTYPE_CHAR,
	    SCM_SAL_CHAR_VALUE, SCM_SAL_CHAR_SET_VALUE, SCM_SAL_STRINGP,
	    SCM_SAL_ENTYPE_STRING, SCM_SAL_STRING_STR, SCM_SAL_STRING_SET_STR,
	    SCM_SAL_STRING_LEN, SCM_SAL_STRING_SET_LEN,
	    SCM_SAL_STRING_SET_MUTABLE, SCM_SAL_STRING_SET_IMMUTABLE,
	    SCM_SAL_FUNCP, SCM_SAL_ENTYPE_FUNC, SCM_SAL_FUNC_TYPECODE,
	    SCM_SAL_FUNC_SET_TYPECODE, SCM_SAL_FUNC_CFUNC,
	    SCM_SAL_FUNC_SET_CFUNC, SCM_SAL_CLOSUREP, SCM_SAL_ENTYPE_CLOSURE,
	    SCM_SAL_CLOSURE_EXP, SCM_SAL_CLOSURE_SET_EXP, SCM_SAL_CLOSURE_ENV,
	    SCM_SAL_CLOSURE_SET_ENV, SCM_SAL_VECTORP, SCM_SAL_ENTYPE_VECTOR,
	    SCM_SAL_VECTOR_VEC, SCM_SAL_VECTOR_SET_VEC, SCM_SAL_VECTOR_LEN,
	    SCM_SAL_VECTOR_SET_LEN, SCM_SAL_PORTP, SCM_SAL_ENTYPE_PORT,
	    SCM_SAL_PORT_FLAG, SCM_SAL_PORT_SET_FLAG, SCM_SAL_PORT_IMPL,
	    SCM_SAL_PORT_SET_IMPL, SCM_SAL_CONTINUATIONP,
	    SCM_SAL_ENTYPE_CONTINUATION, SCM_SAL_CONTINUATION_OPAQUE,
	    SCM_SAL_CONTINUATION_SET_OPAQUE, SCM_SAL_CONTINUATION_TAG,
	    SCM_SAL_CONTINUATION_SET_TAG, SCM_SAL_VALUEPACKETP,
	    SCM_SAL_NULLVALUESP, SCM_SAL_ENTYPE_VALUEPACKET,
	    SCM_SAL_VALUEPACKET_VALUES, SCM_SAL_VALUECONS_CAR,
	    SCM_SAL_VALUECONS_CDR, SCM_SAL_VALUEPACKET_SET_VALUES,
	    SCM_SAL_CONSTANTP, SCM_SAL_C_POINTERP, SCM_SAL_ENTYPE_C_POINTER,
	    SCM_SAL_C_POINTER_VALUE, SCM_SAL_C_POINTER_SET_VALUE,
	    SCM_SAL_C_FUNCPOINTERP, SCM_SAL_ENTYPE_C_FUNCPOINTER,
	    SCM_SAL_C_FUNCPOINTER_VALUE, SCM_SAL_C_FUNCPOINTER_SET_VALUE,
	    SCM_SAL_INTERACTION_ENV, SCM_SAL_R5RS_ENV, SCM_SAL_NULL_ENV,
	    SCM_SAL_ENVP, SCM_SAL_INVALID_REF, SCM_SAL_REF_CAR,
	    SCM_SAL_REF_CDR, SCM_SAL_REF_OFF_HEAP, SCM_SAL_DEREF, SCM_SAL_SET,
	    SCM_SAL_INVALID, SCM_SAL_NULL, SCM_SAL_TRUE, SCM_SAL_FALSE,
	    SCM_SAL_EOF, SCM_SAL_UNBOUND, SCM_SAL_UNDEF, SCM_SAL_EQ,
	    SCM_SAL_SYM_QUOTE, SCM_SAL_SYM_QUASIQUOTE, SCM_SAL_SYM_UNQUOTE,
	    SCM_SAL_SYM_UNQUOTE_SPLICING): New macro copied from the
	    equivalent definition for each macro of sigschemetype.h
	  - (SCM_SAL_FREECELLP, SCM_SAL_AS_FREECELL, SCM_SAL_FREECELL_CAR,
	    SCM_SAL_FREECELL_CDR, SCM_SAL_ENTYPE_FREECELL,
	    SCM_SAL_FREECELL_SET_CAR, SCM_SAL_FREECELL_SET_CDR): New macro
	    copied from the equivalent definition for each macro of
	    sigschemeinternal.h
	  - (SCM_UNMARKER, SCM_MARKER): Copied from storage-gc.c
	  - (SCM_SAL_IS_MARKED, SCM_SAL_IS_UNMARKED, SCM_SAL_DO_MARK,
	    SCM_SAL_DO_UNMARK): New macro copied from the equivalent
	    definition for each macro of storage-gc.c
	* sigscheme/sigschemeinternal.h
	  - (SCM_ENTYPE_INT, SCM_ENTYPE_CONS, SCM_ENTYPE_SYMBOL,
	    SCM_ENTYPE_CHAR, SCM_ENTYPE_STRING, SCM_ENTYPE_FUNC,
	    SCM_ENTYPE_CLOSURE, SCM_ENTYPE_VECTOR, SCM_ENTYPE_PORT,
	    SCM_ENTYPE_CONTINUATION, SCM_ENTYPE_C_POINTER,
	    SCM_ENTYPE_C_FUNCPOINTER, SCM_ENTYPE_VALUEPACKET, SCM_NULLVALUESP,
	    SCM_VALUECONS_CAR, SCM_VALUECONS_CDR, SCM_VALUEPACKET_SET_VALUES,
	    SCM_ENTYPE_FREECELL, SCM_AS_FREECELL, SCM_FREECELLP,
	    SCM_FREECELL_CAR, SCM_FREECELL_CDR, SCM_FREECELL_SET_CAR,
	    SCM_FREECELL_SET_CDR, SCM_IS_MARKED, SCM_IS_UNMARKED, SCM_DO_MARK,
	    SCM_DO_UNMARK): New macro for SCM_USE_STORAGE_ABSTRACTION_LAYER
	* sigscheme/storage-gc.c
	  - (SCM_UNMARKER, SCM_MARKER, SCM_IS_MARKED, SCM_IS_UNMARKED,
	    SCM_DO_MARK, SCM_DO_UNMARK): Disable when
	    !SCM_USE_STORAGE_ABSTRACTION_LAYER
	* Makefile.am
	  - (EXTRA_DIST): Add storage-fatty.h
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_MAKE_BOOL, SCM_MAKE_INT, SCM_MAKE_CONS, SCM_MAKE_SYMBOL,
	    SCM_MAKE_CHAR, SCM_MAKE_STRING, SCM_MAKE_STRING_COPYING,
	    SCM_MAKE_IMMUTABLE_STRING, SCM_MAKE_IMMUTABLE_STRING_COPYING,
	    SCM_MAKE_FUNC, SCM_MAKE_CLOSURE, SCM_MAKE_VECTOR, SCM_MAKE_PORT,
	    SCM_MAKE_CONTINUATION, SCM_MAKE_C_POINTER,
	    SCM_MAKE_C_FUNCPOINTER): New macro
	* sigscheme/sigschemetype-compact.h
	  - (SCM_MAKE_BOOL, SCM_MAKE_INT, SCM_MAKE_CONS, SCM_MAKE_SYMBOL,
	    SCM_MAKE_CHAR, SCM_MAKE_STRING, SCM_MAKE_STRING_COPYING,
	    SCM_MAKE_IMMUTABLE_STRING, SCM_MAKE_IMMUTABLE_STRING_COPYING,
	    SCM_MAKE_FUNC, SCM_MAKE_CLOSURE, SCM_MAKE_VECTOR, SCM_MAKE_PORT,
	    SCM_MAKE_CONTINUATION, SCM_MAKE_C_POINTER,
	    SCM_MAKE_C_FUNCPOINTER): New macro
	  - (SCM_MAKE_VALUEPACKET): Simplify
	* sigscheme/sigschemeinternal.h
	  - (MAKE_BOOL, MAKE_INT, MAKE_CONS, MAKE_SYMBOL, MAKE_CHAR,
	    MAKE_STRING, MAKE_STRING_COPYING, MAKE_IMMUTABLE_STRING,
	    MAKE_IMMUTABLE_STRING_COPYING, MAKE_FUNC, MAKE_CLOSURE,
	    MAKE_VECTOR, MAKE_PORT, MAKE_CONTINUATION, MAKE_C_POINTER,
	    MAKE_C_FUNCPOINTER, MAKE_VALUEPACKET): New macro
	* sigscheme/sigscheme.h
	  - Add comments for Scm_New*()
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - Rename to print.c
	* sigscheme/print.c
	  - Renamed from debug.c
	* sigscheme/Makefile.am
	  - (libsscm_la_SOURCES): Follow the renaming
	* sigscheme/sigscheme.h
	* sigscheme/sigschemeinternal.h
	  - Follow the renaming in comments
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (print_ScmObj_internal): Rename to print_obj
	  - (print_obj):
	    * Renamed from print_ScmObj_internal
	    * Follow the renaming
	  - (SigScm_WriteToPort, SigScm_DisplayToPort, print_list,
	    print_vector): Follow the renaming
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/alloc.c
	  - (scm_malloc, scm_calloc, scm_realloc, scm_malloc_aligned):
	    Cosmetic change
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/alloc.c
	  - New file
	  - (uintptr_t): New type
	  - (scm_malloc, scm_calloc, scm_realloc): Moved from error.c
	  - (scm_malloc_aligned): Moved from storage-gc.c
	* sigscheme/error.c
	  - (SCM_ERRMSG_UNHANDLED_EXCEPTION, SCM_ERRMSG_MEMORY_EXHAUSTED,
	    SCM_ASSERT_ALLOCATED): Move to sigscheme.h
	  - (ASSERT_ALLOCATED): Move to sigschemeinternal.h
	  - (scm_malloc, scm_calloc, scm_realloc): Move to alloc.c
	* sigscheme/sigscheme.h
	  - (SCM_ERRMSG_UNHANDLED_EXCEPTION, SCM_ERRMSG_MEMORY_EXHAUSTED,
	    SCM_ASSERT_ALLOCATED): Moved from error.c
	  - (scm_malloc, scm_calloc, scm_realloc, scm_malloc_aligned): Moved
	    from sigschemeinternal.h
	  - (scm_malloc_aligned): Moved the decl from storage-gc.c
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_ALLOCATED): Moved from error.c
	  - (scm_malloc, scm_calloc, scm_realloc): Move to sigscheme.c
	* sigscheme/storage-gc.c
	  - (scm_malloc_aligned): Move to alloc.c
	* sigscheme/Makefile.am
	  - (libsscm_la_SOURCES): Add alloc.c
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (ERRMSG_UNHANDLED_EXCEPTION, ERRMSG_MEMORY_EXHAUSTED): Rename to
	    SCM_ERRMSG_*
	  - (SCM_ERRMSG_UNHANDLED_EXCEPTION, SCM_ERRMSG_MEMORY_EXHAUSTED):
	    Renamed from ERRMSG_*
	  - (SCM_ASSERT_ALLOCATED):
	    * Renamed from ASSERT_ALLOCATED
	    * Replace ERR with Scm_FatalError()
	  - (ASSERT_ALLOCATED): Redefine as alias to SCM_ASSERT_ALLOCATED
	  - (scm_malloc, scm_calloc, scm_realloc): Replace manual error
	    handling with ASSERT_ALLOCATED()
	  - (ScmOp_inspect_error): Follow the renaming of
	    ERRMSG_UNHANDLED_EXCEPTION
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* perl -i -pe 's/Scm_([a-z]+alloc)/scm_\1/g' *.[ch]
	
	* sigscheme/error.c
	  - (Scm_malloc, Scm_calloc, Scm_realloc): Rename to scm_*()
	  - (scm_malloc, scm_calloc, scm_realloc): Renamed from Scm_*()
	* sigscheme/sigschemeinternal.h
	  - (Scm_malloc, Scm_calloc, Scm_realloc): Rename to scm_*()
	  - (scm_malloc, scm_calloc, scm_realloc): Renamed from Scm_*()
	  - (LBUF_ALLOC, LBUF_REALLOC): Follow the renamings
	* sigscheme/debug.c
	  - (hash_grow, SigScm_WriteToPortWithSharedStructure): Ditto
	* sigscheme/io.c
	  - (find_path, parse_script_prelude): Ditto
	* sigscheme/operations.c
	  - (ScmOp_string_setd, ScmOp_substring, ScmOp_string_append,
	    ScmOp_string_filld, ScmOp_make_vector, ScmOp_vector,
	    ScmOp_list2vector): Ditto
	* sigscheme/operations-nonstd.c
	  - (create_loaded_str): Ditto
	* sigscheme/storage-gc.c
	  - (SigScm_GC_Protect, scm_malloc_aligned, add_heap): Ditto
	* sigscheme/storage-symbol.c
	  - (initialize_symbol_hash): Ditto
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (malloc_aligned): Renamed to scm_malloc_aligned()
	  - (scm_malloc_aligned):
	    * Renamed from malloc_aligned
	    * Make global
	  - (add_heap): Follow the renaming
	
2005-12-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (debug_mask, SigScm_DebugCategories, SigScm_SetDebugCategories,
	    SigScm_PredefinedDebugCategories, SigScm_CategorizedDebug,
	    SigScm_Debug): Move to error.c
	* sigscheme/error.c
	  - (debug_mask, SigScm_DebugCategories, SigScm_SetDebugCategories,
	    SigScm_PredefinedDebugCategories, SigScm_CategorizedDebug,
	    SigScm_Debug): Moved from debug.c
	* sigscheme/sigscheme.h
	  - Move section of the functions
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi60.c
	  - (BITWISE_OPERATION_BODY): Replace SigScm_Error() with ERR()
	* sigscheme/operations.c
	  - (ScmOp_eqvp): Ditto
	* sigscheme/operations-siod.c
	  - (SigScm_SetVerboseLevel): Ditto
	* sigscheme/main.c
	  - (main): Ditto
	* sigscheme/eval.c
	  - (call, Scm_eval, ScmExp_let, ScmExp_letstar, ScmExp_letrec,
	    ScmExp_do, ScmExp_unquote, ScmExp_unquote_splicing,
	    ScmOp_scheme_report_environment, ScmOp_null_environment): Ditto
	* sigscheme/TODO
	  - Update
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_WRITESS_TO_PORT): Remove FIXME comment
	* sigscheme/TODO
	  - Update
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_SHIFT_RAW, SCM_SHIFT_RAW_1, SCM_SHIFT_RAW_2,
	    SCM_SHIFT_RAW_3): Removed
	* sigscheme/TODO
	  - Update
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi2.c
	  - (ScmExp_SRFI2_and_letstar): Replace SCM_SHIFT_RAW_2() with
	    LIST_2_P()
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi2.c
	  - (ScmExp_SRFI2_and_letstar): Fix (<symbol>) style claw handling
	* sigscheme/test/test-srfi2.scm
	  - Add test for (<symbol>) style claw handling
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (enter_dynamic_extent): Replace SCM_SHIFT_RAW*() with POP_ARG()
	
	* sigscheme/operations.c
	  - (ScmOp_vector): Ditto
	
2005-12-12 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/misc/scm-obj-compact-gdbinit
	  - new file. handy gdb macros for debugging
	    SCM_OBJ_COMPACT
	
2005-12-12 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_TAG_IMM_NULLP,
	     SCM_TAG_IMM_INVALIDP,
	     SCM_TAG_IMM_UNBOUNDP,
	     SCM_TAG_IMM_FALSEP,
	     SCM_TAG_IMM_TRUEP,
	     SCM_TAG_IMM_EOFP,
	     SCM_TAG_IMM_UNDEFP): check equality with SCM_EQ
	  - (SCM_DEREF): should not care GC bit
	
	* sigscheme/test-compact.c
	  - (Scm_CheckRef): testcases around ScmRef
	
2005-12-12 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_EQ): SCM_EQ should not care GC bit
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (IS_LIST_LEN_1, QQUOTE_SET_VERBATIM, QQUOTE_IS_VERBATIM): Removed
	  - (lookup_frame): Remove obsolete condition
	  - (enum _tr_msg, vectran): Fix a typo
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (fatal_err_looped, fatal_error_looped): Rename fatal_err_looped
	    with fatal_error_looped
	  - (SigScm_InitError, ScmOp_fatal_error): Follow the renaming
	  - (show_arg): Enclose #if SCM_DEBUG
	  - (SigScm_ShowBacktrace): Cosmetic change
	
2005-12-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - Make asprintf(3) and vasprintf(3) required
	* sigscheme/error.c
	  - (SCM_BACKTRACE_SEP, ASSERT_ALLOCATED): New macro
	  - (Scm_FatalError): Replace "Error: " with SCM_ERR_HEADER
	  - (SigScm_Error, Scm_ErrorObj):
	    * Remove HAVE_V?ASPRINTF handling
	    * Add error check for memory allocation
	  - (SigScm_Die):
	    * Ditto
	    * Modify message
	  - (SigScm_ShowBacktrace): Rewrite with SCM_BACKTRACE_SEP
	* sigscheme/sigscheme.h
	  - (SCM_ASSERT):
	    * Add FIXME comment
	    * Modify message
	* sigscheme/TODO
	  - Update
	
2005-12-11 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/eval.c
	  - Fix comment.
	
2005-12-11 Jun Inoue <jun.lambda@gmail.com>
	
	Refactor vector handling inside quasiquote and refine sequential datum
	translators.
	
	* sigscheme/eval.c
	  - (list_translator): change member `ptr' to `cur'
	  - (sequence_translator, sequence_translator): new types.
	  - (tr_msg): add/remove some members.
	  - (LISTRAN_INIT, LISTRAN_EXTRACT): Changed prefix to "TRL"
	  - (LISTRAN_NEXT): change prefix and semantics.
	  - (LISTRAN_CURPOS): remove.
	  - (TRL_INIT, TRL_EXTRACT, TRL_NEXT): rename from LISTRAN_INIT,
	    LISTRAN_EXTRACT, and LISTRAN_NEXT.
	  - (TRL_GET_OBJ, TRL_ENDP, TRL_GET_SUBLS, TRL_SET_SUBLS, TRL_CALL,
	    TRV_INIT, TRV_GET_OBJ, TRV_NEXT, TRV_ENDP, TRV_EXTRACT, TRV_CALL,
	    TR_CALL, TR_GET_OBJ, TR_NEXT, TR_ENDP, TR_EXTRACT): new macros.
	  - (listran): change return type and add support for new messages.
	  - (vectran): new function.
	  - (qquote_vector): removed.  Merged with qquote_internal().
	  - (qquote_internal): incorporate functionality of qquote_vector().
	
	* sigscheme/test/test-quote.scm
	  - Add new tests.
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (LBUF_ALLOC, LBUF_REALLOC): Replace ?alloc() with Scm_?alloc() and
	    remove manual error handling
	* sigscheme/storage-gc.c
	  - (malloc_aligned):
	    * Replace malloc() with Scm_malloc()
	    * Add error handling for posix_memalign()
	  - (SigScm_GC_Protect, add_heap): Replace ?alloc() with Scm_?alloc()
	    and remove manual error handling
	* sigscheme/storage-symbol.c
	  - (initialize_symbol_hash): Replace malloc() with Scm_malloc() and
	    remove manual error handling
	* sigscheme/debug.c
	  - (hash_grow, SigScm_WriteToPortWithSharedStructure): Replace
	    malloc(), realloc() and calloc() with Scm_?alloc()
	* sigscheme/io.c
	  - (find_path, parse_script_prelude, parse_script_prelude): Ditto
	* sigscheme/operations.c
	  - (ScmOp_string_setd, ScmOp_substring, ScmOp_string_append,
	    ScmOp_string_filld, ScmOp_make_vector, ScmOp_list2vector): Ditto
	* sigscheme/operations-nonstd.c
	  - (create_loaded_str): Ditto
	* sigscheme/eval.c
	  - (qquote_vector): Ditto
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_malloc, Scm_calloc, Scm_realloc): New function decl
	* sigscheme/error.c
	  - (ERRMSG_MEMORY_EXHAUSTED): New macro
	  - (Scm_malloc, Scm_calloc, Scm_realloc): New function
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_unicode_sequence): Fix error handling
	* sigscheme/storage-gc.c
	  - (add_heap): Ditto
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (Scm_FatalError): Add error header
	  - (ScmOp_fatal_error): Fix possible infinite loop
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (SigScm_Die): Replace ScmOp_fatal_error() with
	    Scm_FatalError(). This also remove Scheme-level port dependency
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (cb_fatal_error): New static variable
	  - (SigScm_InitError): Initialize cb_fatal_error
	  - (Scm_FatalError, Scm_SetFatalErrorCallback): New function
	  - (ScmOp_fatal_error): Rewrite with Scm_FatalError()
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (show_arg): New static function
	  - (SigScm_ShowBacktrace):
	    * Simplify with show_arg()
	    * Fix broken dot list handling of SCM_DEBUG_BACKTRACE_VAL
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize, ScmExp_use, Scm_eval_c_string,
	    Scm_eval_c_string_internal): Simplify
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - (repl_loop):
	    * Make 'read' error-proof
	    * Eliminate result printing when error
	    * Simplify
	  - (is_repl_prompt, show_promptp): Rename is_repl_prompt() to
	    show_promptp()
	  - (main): Simplify
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_PORT_GETC, SCM_PORT_UNGETC, SCM_PORT_PRINT): Removed
	* sigscheme/error.c
	  - (ScmOp_inspect_error): Replace SCM_PORT_PRINT() with SCM_PORT_PUTS()
	* sigscheme/debug.c
	  - (print_ScmObj_internal, print_string, print_list, print_vector,
	    print_port, print_errobj): Ditto
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (struct ScmSpecialCharInfo_): Change 'code' type to int
	* sigscheme/debug.c
	  - (uintptr_t): New type
	  - (Scm_writess_func): Initialize with SigScm_WriteToPort even if
	    SCM_USE_SRFI38
	  - (print_ScmObj_internal, print_char, print_string, print_list,
	    print_vector, print_port, print_constant, print_errobj,
	    hash_grow): Simplify
	* sigscheme/operations-srfi38.c
	  - (SigScm_Initialize_SRFI38): Update Scm_writess_func
	    to_WriteToPortWithSharedStructure
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_InitIO): New function
	* sigscheme/read.c
	  - (Scm_special_char_table): Moved from io.c
	* sigscheme/io.c
	  - (Scm_special_char_table): Move to read.c
	  - (create_valid_path): Rename to find_path()
	  - (find_path):
	    * Renamed from create_valid_path()
	    * Simplify
	  - (Scm_InitIO): New function
	  - (ScmOp_call_with_input_file, ScmOp_call_with_output_file,
	    ScmOp_with_input_from_file, ScmOp_with_output_to_file, ScmOp_read,
	    ScmOp_read_char, ScmOp_peek_char, ScmOp_char_readyp, ScmOp_write,
	    ScmOp_display, ScmOp_newline, ScmOp_write_char, SigScm_load,
	    SigScm_load_internal, file_existsp): Simplify
	  - (ScmOp_load): Fix argument assertion
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Replace port initializations with
	    Scm_InitIO()
	
2005-12-10 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_CANBE_MARKED): remove null check. its a workaround code.
	
2005-12-10 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_SET): add masking to SCM_CAST_UINT(obj)
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (wind_onto_dynamic_extent, unwind_dynamic_extent,
	    enter_dynamic_extent, exit_dynamic_extent, Scm_DynamicWind,
	    continuation_stack_pop, continuation_stack_unwind,
	    Scm_CallWithCurrentContinuation): Simplify
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-symbol.c
	  - (Scm_Intern, Scm_SymbolBoundTo, initialize_symbol_hash): Simplify
	
2005-12-10 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage.c
	  - (Scm_Type): more detail error message. handle ScmConstant.
	
2005-12-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-symbol.c
	  - (Scm_Intern, initialize_symbol_hash, symbol_name_hash): Simplify
	    and make efficient
	  - Remove obvious comment
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (enum ScmObjType): Remove ScmInvalid
	* sigscheme/sigschemetype-compact.h
	  - (enum ScmObjType): Ditto
	* sigscheme/storage.c
	  - (Scm_Type): Cause error instead of returning ScmInvalid
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Align heap size to page, and extend
	    maximum size to large enough
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (struct gc_protected_var_, gc_protected_var, protected_var_list):
	    Removed
	  - (protected_vars, protected_vars_size, n_empty_protected_vars): New
	    static variables
	  - (SigScm_InitGC): Add initialization for the variables
	  - (locate_protected_var): New static function
	  - (SigScm_GC_Protect, SigScm_GC_Unprotect, finalize_protected_var,
	    gc_mark_protected_var): Replace list-based protected variable
	    repository with vector-based one
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (heaps_lowest, heaps_highest): New static variable
	  - (add_heap, within_heapp): Improve average performance using
	    heaps_lowest and heaps_highest
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - Simplify the description about the GC
	  - (gc_mark):
	    * Reorder mark functions for efficiency
	    * Remove debug message
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (is_pointer_to_heap, within_heapp): Rename is_pointer_to_heap to
	    within_heapp
	  - (SigScm_InitGC): Add initialization for stack_start_pointer and
	    protected_var_list
	  - (gc_mark_locations_n): Change arg type
	  - (gc_mark_definite_locations_n): New static function
	  - (gc_mark_symbol_hash): Removed
	  - (gc_mark): Replace gc_mark_symbol_hash() with
	    gc_mark_definite_locations_n()
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SigScm_InitStorage, SigScm_InitGC): Add heap configuration args
	* sigscheme/storage.c
	  - (SigScm_InitStorage): Ditto
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Add heap configuration args to
	    SigScm_InitStorage()
	* sigscheme/storage-gc.c
	  - (SCM_HEAP_SIZE, NHEAP_INITIAL, NHEAP_MAX): Removed
	  - (scm_heap_num, n_heaps): Rename scm_heap_num to n_heaps
	  - (scm_heaps, heaps): Rename scm_heaps to heaps
	  - (scm_freelist, freelist): Rename scm_freelist to freelist
	  - (heap_size, heap_alloc_threshold, n_heaps_max): New static variable
	  - (SigScm_InitGC): Add heap configuration args
	  - (SigScm_NewObjFromHeap, finalize_heap, is_pointer_to_heap): Follow
	    the renamings
	  - (initialize_heap): Add heap configuration args
	  - (add_heap):
	    * Remove heap configuration args for excessive generalization
	    * Add error handlings
	  - (gc_mark_and_sweep): Add heap_alloc_threshold handling
	  - (gc_sweep): Return number of collected objects
	
2005-12-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (sweep_compact_cell, sweep_obj): Combine into free_cell()
	  - (free_cell): New static function
	  - (finalize_heap, gc_sweep): Follow the function reorganization
	
2005-12-09 kzk <mover@hct.zaq.ne.jp>
	
	* simplify accessors of pointer handling types
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_TAG_OTHERS_VALUE_OFFSET_C_POINTER_LSBADDR,
	     SCM_PTR_OTHERSBITS,
	     SCM_PTR_RAW_LSB,
	     SCM_PTR_LSB, 
	     SCM_PTR_VALUE,
	     SCM_SET_PTR_OTHERSBITS,
	     SCM_SET_PTR_LSB,
	     SCM_SET_PTR_VALUE): new macro
	  - (SCM_FUNC_CFUNC, SCM_FUNC_SET_CFUNC,
	     SCM_FUNC_TYPECODE, SCM_FUNC_SET_TYPECODE,
	     SCM_C_POINTER_VALUE, SCM_C_POINTER_SET_VALUE,
	     SCM_C_FUNCPOINTER_VALUE, SCM_C_FUNCPOINTER_SET_VALUE)
	     : rewrite with new macros
	  - (SCM_SYNTAXP, SCM_PROCEDUREP): move to new section
	
2005-12-09 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/io.c
	  - (SigScm_PortPrintf, SigScm_VPortPrintf
	     SigScm_PortNewline): revert r2377
	
2005-12-07 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_NEED_SWEEPP,
	     SCM_SWEEP_PHASE_SYMBOLP,
	     SCM_SWEEP_PHASE_STRINGP,
	     SCM_SWEEP_PHASE_VECTORP,
	     SCM_SWEEP_PHASE_PORTP,
	     SCM_SWEEP_PHASE_CONTINUATIONP): new macro
	
	* sigscheme/storage-gc.c
	  - (sweep_compact_cell): new func
	  - (finalize_heap, gc_sweep): use sweep_compact_cell when
	    SCM_OBJ_COMPACT flag is on
	
	
2005-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (is_pointer_to_heap):
	    * Fix comment position
	    * Rename a local variable
	
2005-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (is_pointer_to_heap): Fix broken tag information reference
	
2005-12-07 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage.c
	  - (Scm_Type): make efficient by using tag.
	    BTW, we also need to hide the internal representation here?
	
2005-12-07 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_IS_UNMARKED): fixed typo
	  - (SCM_CANBE_MARKED,
	     SCM_STRIP_TAG_INFO): new macro
	
	* sigscheme/storage-gc.c
	  - (is_pointer_to_heap):
	     - reject immediate objects here for efficiency
	     - hide internal representation of stripping GC bit
	
2005-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (HAVE_POSIX_MEMALIGN): New macro
	* sigscheme/storage-gc.c
	  - (malloc_aligned): Resurrect posix_memalign(3) for HAVE_POSIX_MEMALIGN
	  - Remove obsolete wordaround for posix_memalign(3)
	
2005-12-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (finalize_heap): Add comment
	  - (mark_obj):
	    * Ditto
	    * Make efficient
	  - (gc_mark_locations_n, gc_mark_symbol_hash): Simplify and make
	    efficient
	  - (gc_sweep):
	    * Ditto
	    * Add FIXME comment for SCM_OBJ_COMPACT
	  - (gc_mark_locations): Remove comment and unneeded initialization
	  - (sweep_obj): Remove unneeded comment
	
2005-12-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit eliminates inefficient gc_preprocess()
	
	* sigscheme/storage-gc.c
	  - (SCM_INITIAL_MARKER, SCM_MARKER): Rename SCM_INITIAL_MARKER to
	    SCM_MARKER
	  - (SCM_IS_MARKED, SCM_DO_MARK): Replace scm_cur_marker with
	    SCM_MARKER
	  - (SCM_IS_UNMARKED): Fix broken macro definition
	  - (SCM_MARK_CORRUPTED, scm_cur_marker, gc_preprocess): Removed
	  - (finalize_heap):
	    * Simplify
	    * Add placeholder for SCM_OBJ_COMPACT
	  - (gc_mark_and_sweep): Remove gc_preprocess()
	  - (gc_sweep): Add SCM_DO_UNMARK() for marked obj
	
2005-12-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fixes permanent fixed-size heap allocation. It has been
	  changed to increase on demand
	
	* sigscheme/storage-gc.c
	  - (SCM_HEAP_SIZE): Change to macro
	  - (NHEAP_INITIAL, NHEAP_MAX): New macro
	  - (scm_heap_num): Remove permanent fixed number assignment
	  - (SigScm_InitGC): Replace allocate_heap() with initialize_heap()
	  - (allocate_heap): Removed
	  - (initialize_heap): New static function
	  - (add_heap):
	    * Replace inappropriate argument name HEAP_SIZE with heap_size
	    * Fix incorrect typing
	    * Simplify
	    * Add NHEAP_MAX handling
	  - (gc_mark_symbol_hash): Fix GC before SigScm_InitSymbol()
	  - (gc_sweep): Fix empty freelist assumption
	
2005-12-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Fix unprotected global ScmObj
	
2005-12-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (uintptr_t): New type
	  - (malloc_aligned): Add assertion for alignment
	  - (is_pointer_to_heap): Simplify and make efficient
	
2005-12-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (ScmObjHeap): Fix incorrect type representation. ((ScmCell *) !=
	    ScmObj) in SCM_OBJ_COMPACT
	  - (is_pointer_to_heap):
	    * Fix incorrect type representation
	    * Add FIXME comments
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype.h
	* sigscheme/sigschemetype-compact.h
	  - add ScmInvalid type to ScmObjType
	
	* sigscheme/storage.c
	  - (Scm_Type): return ScmInvalid instead of raise an error to avoid
	    infinite loop.
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-gc.c
	  - (allocate_heap): not to print debug information, because this
	    function is called at initialization phase. So, output port
	    is not yet initialized.
	
	  - (mark_obj): no need to mark constants
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-gc.c
	  - (is_pointer_to_heap): when SCM_OBJ_COMPACT is enabled, the pointer
	    on the stack is 'tagged' to represent its types. So, we need to
	    ignore the tag to get its real pointer value.
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* simplify with SCM_CAST_C[AD]R_UINT
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_STRING_MUTATION_TYPE,
	     SCM_STRING_SET_MUTABLE,
	     SCM_STRING_SET_IMMUTABLE,
	     SCM_DO_MARK, SCM_DO_UNMARK, SCM_IS_MARKED)
	    : simplify with SCM_CAST_C[AD]R_UINT
	  - (SCM_FUNC_SET_CFUNC_LSB, SCM_C_FUNCPOINTER_SET_LSB)
	    : use SCM_SET_DIRECT_CDR
	
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* enable SCM_ACCESSOR_ASSERT for SCM_OBJ_COMPACT
	
	* sigscheme/sigschemetype-compact.h
	  - add section headings for accessors
	  - enable SCM_ACCESSOR_ASSERT
	  - enable assert for CONS, CLOSURE, SYMBOL, VECTOR,
	    VALUEPACKET, FUNC, PORT, C_POINTER.
	    CFUNC, C_FUNC_POINTER, INT, CHAR is not yet enabled.
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_ENTYPE_CONS, SCM_ENTYPE_CLOSURE,
	     SCM_ENTYPE_SYMBOL, SCM_ENTYPE_STRING,
	     SCM_ENTYPE_VECTOR, SCM_ENTYPE_VALUEPACKET, 
	     SCM_ENTYPE_FUNC, SCM_ENTYPE_PORT,
	     SCM_ENTYPE_CONTINUATION, SCM_ENTYPE_C_POINTER,
	     SCM_ENTYPE_C_FUNCPOINTER): add parenthesis in accordance
	     with macro definition style written in doc/style
	
	  - (SCM_PORT_SET_IMPL): remove needless casting
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* implement GC related functions for SCM_OBJ_COMPACT
	  Now bench/bench-fib.scm works.
	
	* sigscheme/storage-gc.c
	  - (gc_preprocess,
	     mark_obj,
	     sweep_obj,
	     gc_sweep): implement for SCM_OBJ_COMPACT
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* This is a workaround fix for scm_current_error_port
	  When error occurs in InitStorage or so, scm_current_error_port
	  is not initialize (its value is NULL) and cause SEGV.
	
	* sigscheme/io.c
	  - (SigScm_PortPrintf, SigScm_VPortPrintf
	     SigScm_PortNewline): add sanity check for port
	
2005-12-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_cond_internal): handle bad dot clause
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_DEREF): Remove the alternative for SCM_DEBUG since the
	    non-debug version is already returns rvalue
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (Scm_CallContinuation): Rewrite back to original logic of r2367 to
	    resurrect the succeed-case-centric control flow
	
2005-12-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-continuation.c
	  - (Scm_CallContinuation): avoid multiple calls of
	    continuation_stack_unwind.
	
2005-12-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigschemetype-compact.h
	  - (SCM_GET_VALUE_AS_STR_DISCARDS_GCBIT,
	     SCM_SET_VALUE_AS_PTR_REMAIN_GCBIT,
	     SCM_PRIMARY_GET_VALUE_AS_STR,
	     SCM_PRIMARY_SET_VALUE_AS_STR,
	     SCM_CAR_GET_VALUE_AS_STR, SCM_CDR_GET_VALUE_AS_STR,
	     SCM_CAR_SET_VALUE_AS_STR, SCM_CDR_SET_VALUE_AS_STR,)
	    : more comprehensive
	
	  - (SCM_INIT_CONSTANT): new macro
	  - (SCM_ENTYPE_INT, SCM_ENTYPE_CHAR,
	     SCM_ENTYPE_NULL, SCM_ENTYPE_INVALID, SCM_ENTYPE_UNBOUND,
	     SCM_ENTYPE_FALSE, SCM_ENTYPE_TRUE, SCM_ENTYPE_EOF,
	     SCM_ENTYPE_UNDEF): initialize with SCM_INIT_CONSTANT
	
	  - (SCM_DEREF): discards GC bit because SCM_REF doesn't care
	    GC bit (it uses SCM_GET_DIRECT_* macro).
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ScmExp_cond_internal): Add 'case_key' arg
	* sigscheme/eval.c
	  - (ScmExp_cond_internal):
	    * Add 'case_key' arg
	    * Support 'case' syntax
	    * Fix invalid (else => proc) clause handling
	  - (ScmExp_cond): Follow the interface change of ScmExp_cond_internal()
	  - (ScmExp_case):
	    * Replace the implementation with ScmExp_cond_internal()
	    * Fix SEGVs
	    * Handle 'else' as pure syntactic keyword without #t value binding
	    * Support tested value as result (case 'key ((key))) => key
	    * Support procedure application  (case 'key ((key) => symbol?)) => #t
	* sigscheme/operations-srfi34.c
	  - (guard_handler_body): Follow the interface change of
	    ScmExp_cond_internal()
	* sigscheme/operations.c
	  - (ScmOp_memq, ScmOp_memv, ScmOp_member): Add properness check for
	    the list argument
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Remove 'else' -> #t binding
	* sigscheme/test/test-exp.scm
	  - Add invalid (cond (else => values)) form
	  - Add tests for 'case'
	* sigscheme/TODO
	  - Update
	
2005-12-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test-compact.c
	  - change to more strict check
	    now I've found c_pointer type cannot handle odd address. 
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_substring): Remove misunderstood FIXME comment
	* sigscheme/TODO
	  - Update
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_define):
	    * Simplify syntax check
	    * Make proper list check optional
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_if):
	    * Add strict syntax check. The test in test-exp.scm has been passed
	    * Make efficient
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let, ScmExp_letstar, ScmExp_letrec): Simplify binding form
	    checking, and also fix the loose checking. The 6 tests for it in
	    test-exp.scm has been passed
	
2005-12-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let): Remove inefficient 'reverse' for named let
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let, ScmExp_letstar, ScmExp_letrec): Fix the loose args
	    check that causes SEGV
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_CAR, SCM_CDR): Reject lvalue access
	  - (SCM_CONS_SET_CAR, SCM_CONS_SET_CDR, SCM_REF_CAR, SCM_REF_CDR):
	    Follow the change
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_DEREF): Reject lvalue use
	* sigscheme/sigschemetype-compact.h
	  - (SCM_DEREF): Ditto
	* sigscheme/sigschemeinternal.h
	  - (SCM_QUEUE_APPEND, SCM_QUEUE_SLOPPY_APPEND): Fix DEREF() as lvalue
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi8.c
	  - (ScmExp_SRFI8_receive): Make efficient with the rewritten
	    Scm_ExtendEnvironment()
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let, ScmExp_letstar): Replace manual environment extension
	    with Scm_ExtendEnvironment()
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (Scm_AddEnvironment): Simplify
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit simplifies the environment handlings with ScmRef as
	    described in http://d.hatena.ne.jp/jun0/20050925#1127590537
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_LookupEnvironment): Change return type ScmObj to ScmRef
	* sigscheme/eval.c
	  - (Scm_ExtendEnvironment, Scm_LookupEnvironment, lookup_frame):
	    Simplify environment handlings with ScmRef-based one
	  - (Scm_SymbolValue, ScmExp_setd, ScmExp_do): Follow the change
	* sigscheme/error.c
	  - (UNBOUNDP): Ditto
	* sigscheme/operations-nonstd.c
	  - (ScmOp_symbol_boundp): Ditto
	* sigscheme/operations-siod.c
	  - (ScmExp_undefine): Ditto
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (EVAL_ARGS, SUPPRESS_EVAL_ARGS): New macro
	  - (Scm_tailcall, Scm_call, Scm_eval, ScmOp_apply): Make 4th argument
	    to call() symbolic
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-nonstd.c
	  - (ScmOp_providedp): Remove unused variable
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_map): Modify an error message
	  - (map_multiple_args): Fix infinite loop on improper list
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_QUEUE_TERMINATE): Removed since SCM_QUEUE_SLOPPY_APPEND() is
	    sufficient in most cases
	* sigscheme/read.c
	  - (read_list): Replace SCM_QUEUE_TERMINATE() with
	    SCM_QUEUE_SLOPPY_APPEND()
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_apply, map_eval): Simplify with ScmQueue
	* sigscheme/operations.c
	  - (ScmOp_append, ScmOp_string2list, ScmOp_vector2list,
	    map_single_arg, map_multiple_args): Ditto
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - Reorder functions. No actual code is changed
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_INT_VALUE): cast to normal int
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_sexpression): Optimize by case label reordering. No logic is
	    changed
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SigScm_features): Removed
	* sigscheme/io.c
	  - (SigScm_features): Removed
	* sigscheme/operations-nonstd.c
	  - (SigScm_Initialize_NONSTD_FEATURES): New function
	  - (ScmOp_provide): Replace main code with Scm_Provide()
	  - (ScmOp_providedp): Replace main code with Scm_Providedp()
	* sigscheme/sigscheme.h
	  - (Scm_Provide, Scm_Providedp, SigScm_Initialize_NONSTD_FEATURES):
	    New function
	* sigscheme/sigscheme.c
	  - (features): New static variable
	  - (module_info_table): Enable "sscm"
	  - (SigScm_Initialize_internal):
	    * Remove SigScm_features initialization
	    * Add 'features' initialization
	    * Replace NONSTD_FEATURES initialization by Scm_Use("sscm")
	    * Replace all ScmOp_provide() with Scm_Provide()
	  - (Scm_Provide, Scm_Providedp): New function
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/debug.c
	  - (SigScm_WriteToPortWithSharedStructure): initialize ents with
	    SCM_INVALID, because SCM_INVALID in SCM_OBJ_COMPACT is not NULL
	    pointer.
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-gc.c
	  - (mark_obj): temporally disable for SCM_OBJ_COMPACT
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_stack_start_pointer): Removed
	* sigscheme/storage-gc.c
	  - (scm_stack_start_pointer): Rename to stack_start_pointer
	  - (stack_start_pointer):
	    * Renamed from scm_stack_start_pointer
	    * Make static
	  - (SigScm_GC_ProtectStackInternal, SigScm_GC_ProtectStack,
	    SigScm_GC_UnprotectStack, gc_mark): Follow the renaming
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* Now you can compile SCM_OBJ_COMPACT again
	  - but cause SEGV at exception handling part.
	    try to investigate this big problem.
	
	* sigscheme/sigschemetype-compact.h
	  - update comment about String Mutability information handling
	  - (ScmStrMutationType): new enum
	  - (SCM_STRING_MUTATION_TYPE_OFFSET,
	     SCM_STRING_MUTATION_TYPE_MASK,
	     SCM_STRING_STR_VALUE_MASK, 
	     SCM_STRING_MUTATION_TYPE,
	     SCM_STRING_SET_MUTABLE,
	     SCM_STRING_SET_IMMUTABLE): new macro
	  - (SCM_STRING_LEN, SCM_STRING_STR,
	     SCM_STRING_SET_LEN, SCM_STRING_SET_STR): change to handle
	     mutability information
	
	* sigscheme/test-compact.c
	  - (Scm_CheckStringCopying): enable this function and add tests
	    for string mutability
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (skip_comment_and_space): Fix non-ASCII char handling
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (CASE_ISSPACE, read_word): Removed
	* sigscheme/TODO
	  - Update
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - add comment for required alignment
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_symbol): Replace the fixed size buffer with LBUF and fix the
	    stack problem
	  - (read_number_or_symbol): Fix the stack problem and leak with
	    read_symbol()
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (OK): New macro
	  - (TOKEN_BUF_EXCEEDED): Follow the interface change of read_token()
	  - (read_token): Fix error indication interface
	  - (read_list, read_char, read_number_or_symbol, read_number): Follow
	    the change
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_C_FUNCPOINTER_OTHERSB,
	     SCM_C_FUNCPOINTER_LSB,
	     SCM_C_FUNCPOINTER_SET_OTHERSB,
	     SCM_C_FUNCPOINTER_SET_LSB): new macro
	  - (SCM_C_FUNCPOINTER_VALUE,
	     SCM_C_FUNCPOINTER_SET_VALUE): handle LSB for unaligned
	     function pointer address.
	
	  - (SCM_FUNC_SET_CFUNC): add parenthesis
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (TOKEN_BUF_EXCEEDED): New macro
	  - (read_token): Support partial read
	  - (read_char, read_number_or_symbol, read_number): Follow the new
	    interface of read_token() and generate more specific error message
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - write description of others type's S->car usage
	  - write the way to store LSB bit of Func and CFuncPtr value 
	
	  - (SCM_TAG_OTHERS_VALUE_OFFSET_FUNC): removed
	  - (SCM_TAG_OTHERS_VALUE_OFFSET_FUNC_LSBADDR,
	     SCM_TAG_OTHERS_VALUE_OFFSET_FUNC_FUNCTYPE,
	     SCM_TAG_OTHERS_VALUE_OFFSET_C_FUNCPOINTER_LSBADDR): new macro
	
	  - (SCM_FUNC_CFUNC_OTHERB, SCM_FUNC_CFUNC_LSB,
	     SCM_FUNC_SET_CFUNC_LSB, SCM_FUNC_SET_CFUNC_OTHERB): new macro
	  - (SCM_FUNC_CFUNC, SCM_FUNC_TYPECODE,
	     SCM_FUNC_SET_CFUNC, SCM_FUNC_SET_TYPECODE): change to handle LSB
	     of value
	
	* sigscheme/test-compact.c
	  - (Scm_CheckFunc): check unaligned func addr
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_INITIAL_STRING_BUF_SIZE, SCM_INITIAL_SYMBOL_BUF_SIZE,
	    SCM_LBUF_F_STRING, SCM_LBUF_F_SYMBOL): New macro
	* sigscheme/read.c
	  - (MB_MAX_SIZE): New macro
	  - (INITIAL_STRING_BUF_SIZE): Removed
	  - (read_string): Replace the fixed size buffer with LBUF and fix the
	    stack problem
	
2005-12-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ScmLBuf, LBUF_BUF, LBUF_END, LBUF_SIZE, LBUF_INIT_SIZE,
	    LBUF_EXT_CNT, LBUF_INIT, LBUF_FREE, LBUF_ALLOC, LBUF_REALLOC,
	    LBUF_EXTEND, LBUF_F_LINEAR, LBUF_F_EXPONENTIAL): New macro
	
2005-12-04 kzk <mover@hct.zaq.ne.jp>
	
	* SCM_OBJ_COMPACT
	  - change to int based char
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_CHAR_VALUE, SCM_CHAR_SET_VALUE): fix wrong parameter
	* sigscheme/test-compact.c
	  - (Scm_CheckChar): change to int based char
	  - (Scm_CheckString): disabled temporally
	
	
2005-12-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Provide "siod-bugs" if
	    SCM_COMPAT_SIOD_BUGS
	* sigscheme/test/test-exp.scm
	  - Switch tests for let, let* and letrec if SCM_COMPAT_SIOD_BUGS
	
2005-12-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Add tests for let, let* and letrec that causes SEGV
	
	* sigscheme/test/test-define.scm
	  - Insert license header
	
2005-12-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_LISTP): Fix internal name reference
	* sigscheme/sigschemeinternal.h
	  - Cosmetic change
	
2005-12-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_LIST_1_P, SCM_LIST_2_P, SCM_LIST_3_P, SCM_LIST_4_P,
	    SCM_LIST_5_P): New macro
	* sigscheme/sigschemeinternal.h
	  - (LIST_1_P, LIST_2_P, LIST_3_P, LIST_4_P, LIST_5_P): New macro
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-define.scm
	  - add testcases for "define" invalid forms
	
	* sigscheme/eval.c
	  - (ScmExp_define): fix crash bug, more strict check for argument
	    extraction.
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let, ScmExp_letstar, ScmExp_letrec, ScmExp_define): not to
	    use SCM_SHIFT* macro. But I don't use POP_ARG macro basically for
	    more kinder error messages.
	
	  - (ScmExp_do): initialize "vars" and "vals" with SCM_NULL
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-exp.scm
	  - add more test cases for invalid "let", "let*", "letrec" forms
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/main.c
	  - add SCM_COMPAT_SIOD flag where "feature_id_siod" is used.
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_do): use POP_ARG macro, initialize local variable with
	    SCM_FALSE, add nullp check, fix invalid return value.
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-exp.scm
	  - add test cases for invalid syntax forms
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_string_filld): handle empty string more easy way
	
	* sigscheme/test/test-string.scm
	  - add testcase for string-fill!
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-srfi6.scm
	* sigscheme/test/test-string.scm
	  - modify existig testcases' name around immutable and mutable string
	
2005-12-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-srfi6.scm
	* sigscheme/test/test-string.scm
	  - Add test cases for testing both immutable and mutable strings.
	    I'll modify existing test cases' comment at the next commit.
	
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_QUEUE_TERMINATE): New macro
	* sigscheme/read.c
	  - (DELIMITER_CHARS): Remove ' (quote) to conform to R5RS
	  - (read_list):
	    * Simplify
	    * Remove the stack problem
	    * Reject symbols that beginning with dot to conform to R5RS
	    * Add delimiter handling around dot. See the comment
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Provide "strict-r5rs"
	* sigscheme/test/test-syntax.scm
	  - Add tests for dot pair
	* sigscheme/test/unittest.scm
	  - (assert-parseable): New procedure
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_sexpression): Simplify
	
	* sigscheme/test/test-syntax.scm
	  - Add comment about test result
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_number): Split parse_number() off
	  - (parse_number): New static function
	  - (read_number_or_symbol):
	    * Parse ^[+-.@] correctly
	    * Add a FIXME comment
	  - (read_sexpression): 
	
2005-12-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/TODO
	  - assign my job
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_sexpression): Remove invalid boolean expression #T and #F
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (string-eval): New procedure
	* sigscheme/test/test-syntax.scm
	  - New file
	  - Add lexical tests. 11 tests are failed
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (INT_LITERAL_LEN_MAX): New macro
	  - (parse_number): Rename to read_number()
	  - (read_number):
	    * Renamed from parse_number()
	    * Optimize and remove the stack problem
	  - (read_sexpression): Optimize
	  - (read_char): Fix a broken format string
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (parse_unicode_sequence): Add arg 'len'
	  - (read_unicode_sequence, read_char): Follow the change
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (WHITESPACE_CHARS, DELIMITER_CHARS): New macro
	  - (read_char_sequence): Removed
	  - (read_token): New static function
	  - (read_char):
	    * Optimize
	    * Fix invalid named char acception
	
2005-12-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds some SRFI-75 features
	
	* sigscheme/config.h
	  - (SCM_USE_SRFI75): New macro
	* sigscheme/read.c
	  - (read_sequence, read_unicode_sequence):
	    New static function
	  - (parse_unicode_sequence):
	    * New static function
	    * Port hexadecimal char parser from read_char()
	    * Fix invalid signed hexadecimal char acceptance such as #\x-0
	  - (read_char):
	    * Support Unicode sequence
	    * Move hexadecimal char support to parse_unicode_sequence() of
	      SRFI-75
	  - (read_string): Support Unicode sequence
	* sigscheme/io.c
	  - (Scm_special_char_table): Add "\|" for SRFI-75
	* sigscheme/test/test-string.scm
	  - Uncomment SRFI-75 tests
	* sigscheme/TODO
	  - Update
	
2005-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (skip_comment_and_space, read_list): Fix passing non-ASCII char to
	    isspace(3)
	
2005-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_sscm_error_objectp, ScmOp_sscm_fatal_error,
	    ScmOp_sscm_inspect_error, ScmOp_sscm_backtrace,
	    ScmOp_sscm_closure_code): Rename to ScmOp_*()
	  - (ScmOp_error_objectp, ScmOp_fatal_error, ScmOp_inspect_error,
	    ScmOp_backtrace, ScmOp_closure_code): Renamed from ScmOp_sscm_*()
	  - (SCM_ERROBJP): Follow the renamings
	* sigscheme/error.c
	  - (ScmOp_sscm_error_objectp, ScmOp_sscm_fatal_error,
	    ScmOp_sscm_inspect_error, ScmOp_sscm_backtrace): Rename to
	    ScmOp_*()
	  - (ScmOp_error_objectp, ScmOp_inspect_error, ScmOp_backtrace):
	    Renamed from ScmOp_sscm_*()
	  - (ScmOp_fatal_error):
	    * Renamed from ScmOp_sscm_fatal_error()
	    * Follow the renamings
	  - (SigScm_Die): Follow the renamings
	* sigscheme/operations-siod.c
	  - (ScmOp_sscm_closure_code, ScmOp_closure_code): Rename
	    ScmOp_sscm_closure_code() with ScmOp_closure_code()
	* sigscheme/operations-srfi34.c
	  - (ScmOp_SRFI34_raise): Follow the renamings
	
2005-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit changes string-based charcter object to int-based
	
	* sigscheme/sigscheme.h
	  - (Scm_NewChar): Adapt to int-based char
	* sigscheme/sigschemetype.h
	  - (SCM_CHARCELL_SIZE): Removed
	  - (struct ScmCell_, SCM_CHAR_VALUE, SCM_CHAR_SET_VALUE): Adapt to
	    int-based char
	* sigscheme/sigschemetype-compact.h
	  - (SCM_CHAR_VALUE, SCM_CHAR_SET_VALUE): Adapt to int-based char
	* sigscheme/test-compact.c
	  - (Scm_CheckChar): Add FIXME comment
	* sigscheme/storage.c
	  - Remove SCM_CHARCELL_SIZE handling
	  - (Scm_NewChar): Adapt to int-based char
	* sigscheme/storage-gc.c
	  - (sweep_obj): Adapt to int-based char
	* sigscheme/encoding.h
	  - (Scm_mb_scan_char): Removed
	* sigscheme/encoding.c
	  - (Scm_mb_scan_char): Removed
	  - (Scm_mb_strlen, Scm_mb_substring): Replace Scm_mb_scan_char() with
	    SCM_CHARCODEC_SCAN_CHAR()
	  - (IS_ASCII): Replace the cast (uchar) with (uint) to multibyte char
	  - (eucjp_str2int): Fix broken 3byte char handling
	  - (LEADING_VAL, TRAILING_VAL): Fix broken expression
	  - (utf8_int2str): Follow the change of TRAILING_VAL()
	* sigscheme/read.c
	  - (CHAR_LITERAL_LEN_MAX, INITIAL_STRING_BUF_SIZE): New macro
	  - (read_char):
	    * Support multibyte char
	    * Adapt to int-based char
	  - (read_string):
	    * Ditto
	    * Fix buffer overflow
	    * Simplify
	  - (read_char_sequence):
	    * Fix fixed-size large buffer on stack
	    * Fix buffer overflow
	    * Simplify
	    * Add non-ASCII char rejection
	* sigscheme/io.c
	  - (ScmOp_read_char, ScmOp_peek_char):
	    * Adapt to int-based char
	    * Support multibyte char
	* sigscheme/debug.c
	  - (print_char):
	    * Support multibyte char
	    * Adapt to int-based char
	    * Simplify
	* sigscheme/operations.c
	  - (ScmOp_charequalp, ScmOp_char_alphabeticp, ScmOp_char_numericp,
	    ScmOp_char_whitespacep, ScmOp_char_upper_casep,
	    ScmOp_char_lower_casep, ScmOp_char2integer, ScmOp_integer2char,
	    ScmOp_char_upcase, ScmOp_char_downcase, ScmOp_make_string,
	    ScmOp_string_ref, ScmOp_string_setd, ScmOp_string2list,
	    ScmOp_list2string, ScmOp_string_filld): Adapt to int-based char
	* sigscheme/TODO
	  - Update
	
2005-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Enclose (write (values)) into assert-error to follow the strict
	    checking
	
	* sigscheme/test/gauche-euc-jp.scm
	* sigscheme/test/bigloo-bchar.scm
	* sigscheme/test/test-char.scm
	  - Add encoding specifier
	* sigscheme/test/test-equation.scm
	  - Ditto
	  - Insert license header
	
	* sigscheme/test/test-enc-sjis.scm
	  - Disable *test-track-progress*
	
2005-11-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/mbcport.c
	  - (mbcport_fill_rbuf): Fix null character reading
	
	* sigscheme/strport.c
	  - (ScmOutputStrPort_str): Return "" instead of NULL
	
	* sigscheme/basecport.c
	  - Include lacking stdio.h and string.h
	
2005-11-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.c
	  - (sjis_int2str): Fix mishandling for single byte char
	* sigscheme/test/test-enc-sjis.scm
	  - Add some tests
	
2005-11-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-enc-utf8.scm
	* sigscheme/test/test-enc-eucjp.scm
	  - Fix coding-system specification
	
	* sigscheme/test/test-enc-eucgeneric.scm
	  - Fix coding-system specification
	  - Remove a JIS X 0201
	
	* sigscheme/test/test-enc-sjis.scm
	  - Fix coding-system specification
	  - Fix EUC-JP encoded text to SJIS
	  - Fix broken JIS X 0213 plain 2 character to 0xf040
	
2005-11-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-enc-utf8.scm
	* sigscheme/test/test-enc-eucgeneric.scm
	* sigscheme/test/test-enc-eucjp.scm
	* sigscheme/test/test-enc-sjis.scm
	  - Add encoding specification using the UNIX script prelude
	  - Make executable
	  - Insert license header
	
2005-11-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sbcport.h
	  - (ScmBaseCharPort, struct ScmBaseCharPort_, ScmBaseCharPort_vptr,
	    ScmBaseCharPort_construct, ScmBaseCharPort_inspect,
	    ScmBaseCharPort_line_number): Move to basecport.h
	* sigscheme/baseport.h
	  - (ScmBaseCharPort, struct ScmBaseCharPort_, ScmBaseCharPort_vptr,
	    ScmBaseCharPort_construct, ScmBaseCharPort_inspect,
	    ScmBaseCharPort_line_number): Moved from sbcport.h
	* sigscheme/sbcport.c
	  - (ScmBaseCharPort, struct ScmBaseCharPort_, ScmBaseCharPort_vptr,
	    ScmBaseCharPort_construct, ScmBaseCharPort_inspect,
	    ScmBaseCharPort_line_number): Move to basecport.h
	  - (ScmBaseCharPort_vtbl, basecport_dyn_cast, basecport_close,
	    basecport_encoding, basecport_inspect, basecport_get_char,
	    basecport_peek_char, basecport_char_readyp, basecport_vprintf,
	    basecport_puts, basecport_put_char, basecport_flush): Move to
	    basecport.h
	* sigscheme/basecport.c
	  - New file
	  - (ScmBaseCharPort, struct ScmBaseCharPort_, ScmBaseCharPort_vptr,
	    ScmBaseCharPort_construct, ScmBaseCharPort_inspect,
	    ScmBaseCharPort_line_number): Moved from sbcport.c
	  - (ScmBaseCharPort_vtbl, basecport_dyn_cast, basecport_close,
	    basecport_encoding, basecport_inspect, basecport_get_char,
	    basecport_peek_char, basecport_char_readyp, basecport_vprintf,
	    basecport_puts, basecport_put_char, basecport_flush): Moved from
	    sbcport.c
	* sigscheme/io.c
	  - Include sbcport.c only when !SCM_USE_MULTIBYTE_CHAR
	  - Remove #include "fileport.c"
	* sigscheme/Makefile.am
	  - (libsscm_la_SOURCES): Add basecport.c fileport.c
	* sigscheme/read.c
	  - Remove #include "sbcport.h"
	* sigscheme/operations-srfi6.c
	  - Ditto
	* sigscheme/mbcport.c
	  - Ditto
	  - (Scm_mbcport_init): Remove sbcport dependency
	* sigscheme/fileport.c
	  - (FALSE, TRUE): New macro
	
2005-11-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit enables multibyte character port, SRFI-22, runtime
	  encoding specification with optional argument to sscm, and automatic
	  encoding switching on file loading using the optional argument
	  written in UNIX script prelude of the file
	
	* sigscheme/config.h
	  - (SCM_USE_SRFI22): New macro
	* sigscheme/sbcport.c
	  - (ScmBaseCharPort_construct): Fix wrong vptr initialization
	* sigscheme/mbcport.h
	  - (ScmMultiByteCharPort_set_codec): New function decl
	* sigscheme/mbcport.c
	  - (ScmMultiByteCharPort_set_codec): New function
	  - (mbcport_fill_rbuf): Fix partial char handling
	* sigscheme/encoding.h
	  - (SCM_CHARCODEC_ENCODING, SCM_CHARCODEC_SCAN_CHAR,
	    SCM_CHARCODEC_STR2INT, SCM_CHARCODEC_INT2STR): Fix operator
	    precedence
	  - (Scm_mb_find_codec): New function decl
	* sigscheme/encoding.c
	  - (available_codecs): New static variable
	  - (Scm_mb_find_codec): New function
	* sigscheme/io.c
	  - Include mbcport.c
	  - (SCRIPT_PRELUDE_MAXLEN, SCRIPT_PRELUDE_DELIM): New macro
	  - (interpret_script_prelude, parse_script_prelude): New static
	    function
	  - (Scm_NewCharPort): New function
	  - (Scm_MakeSharedFilePort, ScmOp_open_input_file,
	    ScmOp_open_output_file): Support multibyte char port
	  - (SigScm_load_internal): Support SRFI-22, and automatic encoding
	    switching using it
	* sigscheme/sigscheme.c
	  - (scm_initialized): New static variable
	  - (SigScm_Initialize_internal):
	    * Add initialization for multibyte char port
	    * Add scm_initialized handling
	  - (SigScm_Finalize): Add scm_initialized handling
	  - (Scm_eval_c_string_internal): Support multibyte char port
	  - (Scm_InterpretArgv, Scm_FreeArgv): New function
	* sigscheme/main.c
	  - (main): Replace argv processing with Scm_InterpretArgv()
	* sigscheme/operations-srfi6.c
	  - (ScmOp_SRFI6_open_input_string, ScmOp_SRFI6_open_output_string):
	    Support multibyte char port
	* sigscheme/operations-siod.c
	  - (SigScm_Initialize_SIOD): Support multibyte char port
	* sigscheme/sigschemeinternal.h
	  - (SCM_ERR_HEADER): Moved from error.c
	  - (Scm_NewCharPort, Scm_InterpretArgv, Scm_FreeArgv): New function
	    decl
	* sigscheme/error.c
	  - (SCM_ERR_HEADER): Move to sigschemeinternal.h
	
2005-11-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/mbcport.c
	  - (struct ScmMultiByteCharPort_):
	    * Add lacking 'linenum' of the superclass
	    * Remove SCM_USE_STATEFUL_ENCODING for 'state'
	  - (ScmMultiByteCharPort_construct): Fix a variable name
	  - (mbcport_inspect): Cast correctly
	  - (mbcport_get_char, mbcport_peek_char, mbcport_put_char,
	    mbcport_fill_rbuf): Fix state information handlings
	* sigscheme/io.c
	  - Include mbcport.c
	
2005-11-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit makes dummy printing of no-object error message suppressed
	
	* sigscheme/error.c
	  - (Scm_MakeErrorObj): Accept null objs
	  - (SigScm_Error): Pass SCM_NULL as error objs
	* sigscheme/sigschemeinternal.h
	  - (SCM_ERROBJP): Move to sigscheme.h
	  - (LISTP, ASSERT_LISTP): New macro
	* sigscheme/sigscheme.h
	  - (SCM_ERROBJP): Moved from sigschemeinternal.h
	  - (SCM_LISTP): New macro
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_make_string): change error message
	  - (ScmOp_make_vector): more strict length check
	  - (ScmOp_vector_ref): more strict index range check
	  - (ScmOp_vector_setd): more strict index range check
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-vector.scm
	  - add copyright
	  - add many testcases
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* remove STL name "string", and rename it to "str"
	
	* sigscheme/operations.c
	  - (ScmOp_string_append)
	    : rename strings to strlst. initialize with SCM_FALSE
	  - (ScmOp_string2list): rename string to str
	  - (ScmOp_string_copy): rename string to str
	  - (ScmOp_string_filld): rename string to str
	* sigscheme/sigscheme.h
	  - (ScmOp_string2list): rename string to str
	  - (ScmOp_string_copy): rename string to str
	  - (ScmOp_string_filld): rename string to str
	
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_string_ref, ScmOp_string_setd, ScmOp_substring)
	    : more strict check for specified index
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test-string.scm
	  - add more testcases for string related procedures
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* test/test-string.scm
	* test/test-enc-eucjp.scm
	  - move testcases which uses eucjp multibyte string
	    to test-enc-eucjp.scm
	
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_QUEUE_APPEND): add CONSTCOND
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* Introduce mutable & immutable string
	
	* sigscheme/read.c
	  - (read_string): use Scm_NewImmutableStringCopying
	* sigscheme/error.c
	  - (SigScm_InitError, SigScm_Die, SigScm_Error, SigScm_ErrorObj,
	     Scm_ErrorObj): use Scm_NewImmutableStringCopying
	* sigscheme/operations-srfi34.c
	  - (MAKE_STR_COPYING): use Scm_NewImmutableStringCopying
	* sigscheme/storage.c
	  - (Scm_NewString): change args
	  - (Scm_NewImmutableString, Scm_NewImmutableStringCopying,
	     Scm_NewMutableString, Scm_NewMutableStringCopying): new func
	* sigscheme/operations-srfi6.c
	  - (ScmOp_SRFI6_get_output_string): use Scm_NewMutableStringCopying
	* sigscheme/io.c
	  - (SigScm_load_internal): use Scm_NewImmutableString
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_MUTABLEP): new macro
	* sigscheme/operations.c
	  - (ScmOp_number2string): use Scm_NewMutableStringCopying
	  - (ScmOp_make_string): use Scm_NewMutableString*
	  - (ScmOp_string_setd): add ASSERT_MUTABLEP
	  - (ScmOp_substring): add ASSERT_MUTABLEP, use Scm_NewMutableString
	  - (ScmOp_string_append): use Scm_NewMutableString*
	  - (ScmOp_list2string): use Scm_NewMutableString*
	  - (ScmOp_string_copy): use Scm_NewMutableStringCopying
	  - (ScmOp_string_filld): add ASSERT_MUTABLEP
	* sigscheme/operations-nonstd.c
	  - (ScmOp_load_path, create_loaded_str)
	    : use Scm_NewMutableStringCopying
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): use Scm_NewImmutableStringCopying
	* sigscheme/sigscheme.h
	  - (Scm_NewString): change args
	  - (Scm_NewImmutableString, Scm_NewImmutableStringCopying,
	     Scm_NewMutableString, Scm_NewMutableStringCopying): new func
	* sigscheme/sigschemetype.h
	  - (SCM_STRING_SET_MUTABLE, SCM_STRING_SET_IMMUTABLE): add casting
	* sigscheme/main.c
	  - (main): use Scm_NewImmutableStringCopying
	
	
2005-11-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds character codec feature, and implement
	  char<->integer conversion procedures by using it
	
	* sigscheme/config.h
	  - (SCM_USE_EUCCN, SCM_USE_EUCJP, SCM_USE_EUCKR, SCM_USE_SJIS):
	    Enable by default
	  - (SCM_USE_UTF8_AS_DEFAULT, SCM_USE_EUCCN_AS_DEFAULT,
	    SCM_USE_EUCJP_AS_DEFAULT, SCM_USE_EUCKR_AS_DEFAULT,
	    SCM_USE_SJIS_AS_DEFAULT, SCM_USE_MULTIBYTE_CHAR): New macro
	* sigscheme/encoding.h
	  - (SCM_CHARCODEC_STR2INT, SCM_CHARCODEC_INT2STR): Add argument
	    'state' and rename others
	  - (SCM_MB_STATELESS): New macro
	  - (ScmCharCodec): Add const to the typedef
	  - (ScmCharCodecMethod_str2int, ScmCharCodecMethod_int2str): Add
	    argument 'state' and rename others
	  - (Scm_current_char_codec): New variable decl
	* sigscheme/encoding.c
	  - (uint): New type
	  - (eucjp_encoding, eucjp_str2int, eucjp_int2str, sjis_encoding,
	    sjis_int2str, dbc_str2int, euc_int2str, euccn_encoding,
	    euckr_encoding, utf8_encoding, utf8_str2int, utf8_int2str,
	    unibyte_encoding, unibyte_str2int, unibyte_int2str): New static
	    function
	  - (utf8_codec_vtbl, euccn_codec_vtbl, eucjp_codec_vtbl,
	    euckr_codec_vtbl, sjis_codec_vtbl, unibyte_codec_vtbl): New static
	    variable
	  - (utf8_codec, euccn_codec, eucjp_codec, euckr_codec, sjis_codec,
	    unibyte_codec): New macro
	  - (Scm_mb_scan_char): Make default-encoding sensitive
	  - (Scm_current_char_codec): New variable
	  - (CHAR_BITS, BYTE_MASK, IS_1BYTE, IS_2BYTES, IS_3BYTES, IN_OCT_BMP,
	    IN_BMP, IN_SMP, LEN_CODE_BITS, TRAILING_CODE_BITS,
	    TRAILING_VAL_BITS, LEADING_VAL_BITS, LEADING_VAL, TRAILING_VAL):
	    New macro
	* sigscheme/sigscheme.h
	  - (ScmOp_char2integer): New function decl
	* sigscheme/operations.c
	  - (ScmOp_char2integer): New function
	  - (ScmOp_integer2char): Support multibyte char
	* sigscheme/TODO
	  - Update
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* abolish Scm_NewStringWithLen
	
	* sigscheme/storage.c
	  - (Scm_NewStringWithLen): removed
	
	* sigscheme/sigscheme.h
	  - (Scm_NewStringWithLen): removed
	
	* sigscheme/operations.c
	  - (ScmOp_make_string): not to use Scm_NewStringWithLen.
	    more solid code.
	  - (Scm_NewStringWithLen): not to use Scm_NewStringWithLen.
	    but this makes a bit slower.
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype.h
	  - (enum ScmStrMutationType): new enumeration
	  - (SCM_STRING_MUTATION_TYPE_MASK, SCM_STRING_STR_VALUE_MASK,
	     SCM_STRING_MUTATION_TYPE, SCM_STRING_SET_MUTABLE,
	     SCM_STRING_SET_IMMMUTABLE): new macro for handling mutation type.
	     this is achieved by tagged pointer.
	  - (SCM_STRING_STR, SCM_STRING_SET_STR): use tagged pointer
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-enc-utf8.scm
	  - add missing "total-report"
	
2005-11-23 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_string): more kind error message
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Fix broken escape sequence of r2226. Sorry.
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Add some tests for empty string
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Resurrect mistakenly discarded tests in r2222 for null character,
	    and follow the fix about misrecognized specification in the
	    revision.
	
	    Discarding preexisting tests is bad habit even if it is felt that
	    not required. But this case, test patterns for null character are
	    MUST NOT be removed since they are obviously possible edge cases.
	    Don't discard them, fix instead.
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* support radix of "string->number"
	
	* sigscheme/operations.c
	  - (ScmOp_string2number): change function args and change function
	    type to support radix.
	
	* sigscheme/sigscheme.h
	  - (ScmOp_string2number): change argument
	
	* sigscheme/test/test-num.scm
	  - add testcases for "string->number"
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/io.c
	  - (Scm_special_char_table): fix invalid "nul"'s escape sequence
	    representation. see at SRFI-75.
	
	* sigscheme/test/test-string.scm
	  - remove wrong testcase for "nul"
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_string): OOps, I mistakenly committed debug code
	    at r2221. revert it.
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_string): make "\x" an error
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (struct continuation_frame): Add a comment
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_trace_root): Removed obsolete decl
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - Modify some comments
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (struct continuation_frame):
	    * Add members 'ret_val' and 'trace_stack'
	    * Add volatile qualifier to all ScmObj
	  - (current_dynamic_extent, continuation_stack, trace_stack): Add
	    volatile qualifier
	  - (continuation_thrown_obj): Removed
	  - (SigScm_InitContinuation, initialize_dynamic_extent): Follow the
	    type changes of static variables
	  - (initialize_continuation_env):
	    * Ditto
	    * Remove continuation_thrown_obj handlings
	  - (Scm_CallWithCurrentContinuation):
	    * Add volatile qualifier to all local ScmObj
	    * Follow the reorganization of struct continuation_frame
	    * Change value receiving method
	  - (Scm_CallContinuation): Change value returning method
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	* sigscheme/storage-continuation.c
	* sigscheme/storage-gc.c
	  - Revert r2199 since the object marking is also implicitly performed
	    by stack scanning
	
2005-11-22 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - Revert r2212 because each continuation must have its own
	    saved_trace_stack
	  - (Scm_CallWithCurrentContinuation): Add volatile qualifier to
	    saved_trace_stack. Etsushi, please let me know the result. I'll
	    simplify the code more if it worked
	
2005-11-22 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/storage-continuation.c (saved_trace_stack) : Static
	  variable in this file.
	(Scm_CallWithCurrentContinuation) : Move saved_trace_stack as
	  static variable since the use of local variable in this function
	  causes SEGV on Mac OS X 10.3.8.
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_string): simplify
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - call SigScm_Error when invalid escape sequence is found.
	    but this doesn't properly handle \x yet.
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-string.scm
	  - temporally comment out vertical bar testcase
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_char): more strict for hexadecimal char form
	
2005-11-22 kzk <mover@hct.zaq.ne.jp>
	
	* now, all tests in test-char.scm is passed.
	
	* sigscheme/debug.c
	  - (print_char): handling printable char and hexadecimal char
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	* sigscheme/sigscheme.h
	* sigscheme/sigschemetype.h
	  - s/datas\.c/storage.c/ in comments
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV,
	    CONTINUATION_DYNEXT, CONTINUATION_SET_DYNEXT): Removed
	  - (struct continuation_frame):
	    * Rename the member 'env' to 'c_env'
	    * Change type of c_env jmp_buf * to jmp_buf
	  - (Scm_MarkContinuation): Fix expired continuation handling
	  - (Scm_CallWithCurrentContinuation, Scm_CallContinuation): Follow
	    the above changes
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fixes a GC bug on continuation object
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_MarkObj, Scm_MarkContinuation): New function decl
	* sigscheme/storage-continuation.c
	  - (Scm_MarkContinuation): New function
	* sigscheme/storage-gc.c
	  - (mark_obj): Rename to Scm_MarkObj()
	  - (Scm_MarkObj):
	    * Renamed from mark_obj() and made global
	    * Replace recursive mark_obj() invocations too
	    * Add Scm_MarkContinuation() invocation for continuation object
	  - (gc_mark_protected_var, gc_mark_locations_n, gc_mark_symbol_hash):
	    Follow the renaming
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (lookup_frame): Add a FIXME comment
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_writess_func): New variable decl
	* sigscheme/debug.c
	  - (Scm_writess_func): New variable
	* sigscheme/sigscheme.h
	  - (SCM_WRITESS_TO_PORT): New macro
	* sigscheme/main.c
	  - (repl_loop): Simplify write/ss invocation with SCM_WRITESS_TO_PORT()
	
2005-11-21 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/storage-continuation.c
	(Scm_CallWithCurrentContinuation) : Initialize saved_trace_stack.
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi38.scm
	  - Fix broken form of latter test
	  - Follow the specification change of external form of closure
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (Scm_ExtendEnvironment): Add vars/vals number matching check
	
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace): Use write/ss if enabled
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-siod.c
	  - (SigScm_Initialize_SIOD): Cosmetic change
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_sscm_equal, ScmOp_SIOD_equal): Rename ScmOp_sscm_equal() to
	    ScmOp_SIOD_equal()
	* sigscheme/operations-siod.c
	  - (ScmOp_sscm_equal, ScmOp_SIOD_equal):
	    * Ditto
	    * Rename Scheme-level function name "%%=" to "="
	  - (SigScm_Initialize_SIOD):
	    * Remove obsolete alias definition
	    * Simplify 'use'
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-gc.c
	  - (SigScm_GC_Unprotect): Fix infinite loop. This make
	    test-{string,char}.scm working (!= passed)
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (SigScm_Error): Fix lacking va_list handling
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* uim/uim-util.c
	  - (string_escape): Add handling for '\v'
	* sigscheme/TODO
	  - Update
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi38.c
	  - (SigScm_Initialize_SRFI38): Add alias 'write/ss'
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (call): Make argument check for continuation exact
	  - (map_eval): Change multiple value checking to SCM_STRICT_ARGCHECK
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - Fix the revision information
	
2005-11-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi34.c
	  - (delay): New static function
	  - (guard_handler_body): Fix multiple values handling
	  - (guard_body): Simplify with the 'delay'
	* sigscheme/eval.c
	  - (call): Change multiple value checking to SCM_STRICT_ARGCHECK
	* sigscheme/test/test-srfi34.scm
	  - Add set of test for edge cases. All tests are passed
	* sigscheme/TODO
	  - Update
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (print_ScmObj_internal, write_ss_scan): Fix broken multiple values
	    printing when SCM_USE_VALUECONS
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (get_shared_index): Fix the case looking up unseen obj which
	    causes SEGV
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (print_ScmObj_internal): Fix broken printing format for multiple
	    values
	
	* sigscheme/error.c
	  - (Scm_ErrorObj): Remove redundant ": " of error message
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (Scm_CallContinuation): Add error check for multiple values. This
	    make test-continuation.scm passed
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-continuation.scm
	  - Add 3 tests for multiple values as the value for continuation. 2
	    test failed
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_REF_NULL, SCM_INVALID_REF): Rename SCM_REF_NULL to
	    SCM_INVALID_REF since the name SCM_REF_* is reserved for
	    referencing action
	  - (SCM_REF): Removed to be unified to SCM_REF_OFF_HEAP
	  - (SCM_REF_OFF_HEAP): Rename the argument name 'cons' with 'obj' to
	    be generalized
	  - (SCM_REF_CAR, SCM_REF_CDR): Substitute semantically inappropriate
	    use of SCM_REF() with the unary operator '&'. SCM_REF() was
	    created to abstract referencing, but these two macro definitions
	    should not be abstract (i.e. don't hide raw cell access here)
	* sigscheme/sigschemetype-compact.h
	  - Follow the changes of sigschemetype.h
	  - (SCM_REF_NULL, SCM_REF): Removed
	  - (SCM_INVALID_REF, SCM_REF_OFF_HEAP): New macro
	  - (SCM_REF_CAR, SCM_REF_CDR): Follow the changes of sigschemetype.h
	* sigscheme/operations.c
	  - (ScmOp_append): Replace SCM_REF() with SCM_REF_OFF_HEAP()
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (INVALID_CONTINUATION_OPAQUE): Revert wrong change in r2170
	
2005-11-20 Jun Inoue <jun.lambda@gmail.com>
	
	This commit refactors quasiquote handling.  It also fixes some bugs
	and adds tests for them.
	
	* sigscheme/sigschemeinternal.h
	  - (REF_OFF_HEAP): New macro.
	  - (ScmQueue): New type.
	  - (SCM_QUEUE_INVALIDATE, SCM_QUEUE_VALIDP, SCM_QUEUE_POINT_TO,
	    SCM_QUEUE_ADD, SCM_QUEUE_APPEND, SCM_QUEUE_TERMINATOR,
	    SCM_QUEUE_SLOPPY_APPEND): New macros.
	
	* sigscheme/eval.c
	  - (SCM_REF_OFF_HEAP): New macro.
	  - (qquote_internal, qquote_vector): Update prototype.  Move
	    definition closer to that of ScmExp_quasiquote().
	  - (list_translator, tr_msg, qquote_result): New types.
	  - (LISTRAN_INIT, LISTRAN_CURPOS, LISTRAN_NEXT, LISTRAN_EXTRACT): New macros.
	  - (listran): New function.
	
	* sigscheme/test/test-quote.scm
	  - Add new tests.
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_EXCEPTION_HANDLING): Removed
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Remove preparation of SRFI-34
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - Revert r2154 since SCM_USE_SRFI34 is the exception handling
	
2005-11-20 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (INVALID_CONTINUATION_OPAQUE): Replace the value NULL with
	    SCM_FALSE since NULL is not a safe ScmObj
	
	* sigscheme/storage-continuation.c
	  - (struct continuation_frame): Reorder members
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/io.c
	  - (create_valid_path): simplify. use snprintf
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am
	  - add scm_decl.rb to BUILD_FUNCTBL_SOURCES
	
	* sigscheme/script/build_func_table.rb
	  - remove duplicate code and require scm_decl.rb
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* This is a workaround commit for working compaction.
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_FUNC_CFUNC, SCM_FUNC_SET_CFUNC): get and set function pointer
	    directly. but desn't care GC bit.
	
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - fix call assert-error
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am
	  - (BUILD_FUNCTBL_SOURCES): new
	  - (EXTRA_DIST): added BUILD_FUNCTBL_SOURCES
	  - each function table now depends on BUILD_FUNCTBL_SOURCES
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am 
	  - change the argument of script/build_func_table.rb
	  - simplify
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/script/build_func_table.rb
	  - introduce new code from scm_decl.rb
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage-continuation.c
	  - (current_dynamic_extent): renamed from scm_current_dynamic_extent
	    and now this variable is static
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test-compact.c
	  - add minus value test case
	
2005-11-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_REF): Fix operator association precedence
	    problem. Consider some cases such as SCM_REF(var =
	    obj). Read "Macro definition" section of sigscheme/doc/style
	    and avoid such bug-attracting coding
	* sigscheme/sigschemetype-compact.h
	  - (SCM_REF): Ditto
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (BITS_PER_BITE, SIZEOF_INT,
	     SIGN_BIT_MASK, SIGN_VALUE_MASK,
	     SIGNED_MARK): new macro
	  - (SCM_INT_VALUE, SCM_INT_SET_VALUE): rewritten with new macro to
	     handle minus value
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/main.c
	  - (repl_loop): use flag SCM_EXCEPTION_HANDLING
	    instead of SCM_USE_SRFI34
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_REF, SCM_REF_NULL): new macro. see r2152
	  - (SCM_REF_CAR, SCM_REF_CDR, SCM_SET): reimplemented
	
2005-11-19 kzk <mover@hct.zaq.ne.jp>
	
	* invalid storage model assumption of ScmOp_append() and qquote_internal()
	
	* sigscheme/sigschemetype.h
	  - (SCM_REF, SCM_REF_NULL): new macro
	  - (SCM_REF_CAR, SCM_REF_CDR): use SCM_REF
	
	* sigscheme/operations.c
	  - remove comment
	  - (ScmOp_append): use SCM_REF* macro and ScmRef
	
	* sigscheme/eval.c
	  - (qquote_internal): use SCM_REF* macro and ScmRef
	
	* sigscheme/TODO
	  - update
	
2005-11-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-new-srfi34.c
	  - Renamed to operations-srfi34.c
	* sigscheme/operations-srfi34.c
	  - Renamed from operations-new-srfi34.c
	* sigscheme/sigschemefunctable.c
	* sigscheme/operations.c
	  - Follow the file renaming
	* sigscheme/Makefile.am
	  - (FUNC_TABLES): Ditto
	  - Add generation rule for sigschemefunctable-srfi34.c rewritten from
	    for sigschemefunctable-new-srfi34.c
	
2005-11-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit removes the obsoleted SRFI-34 implementation
	
	* sigscheme/config.h
	  - (SCM_USE_FORMER_SRFI34, SCM_USE_NEW_SRFI34): Removed
	* sigscheme/sigscheme.h
	  - (ScmExp_SRFI34_guard): Removed the SCM_USE_FORMER_SRFI34 version
	* sigscheme/sigschemeinternal.h
	  - (scm_exception_handlers, scm_exception_continuations): Removed
	  - (CURRENT_EXCEPTION_HANDLER, PUSH_EXCEPTION_HANDLER,
	    POP_EXCEPTION_HANDLER, CURRENT_EXCEPTION_CONTINUATION,
	    PUSH_EXCEPTION_CONTINUATION, POP_EXCEPTION_CONTINUATION): Removed
	* sigscheme/operations-srfi34.c
	  - Removed file
	  - (CONTINUATION_FRAME, CONTINUATION_SET_FRAME, CONTINUATION_JMPENV,
	    CONTINUATION_SET_JMPENV, CONTINUATION_DYNEXT,
	    CONTINUATION_SET_DYNEXT, struct continuation_frame,
	    scm_exception_handlers, scm_exception_continuations,
	    exception_thrown_obj, guard_handle_clauses,
	    SigScm_Initialize_SRFI34, ScmOp_SRFI34_with_exception_handler,
	    ScmExp_SRFI34_guard, ScmOp_SRFI34_raise): Removed
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error): Remove SCM_USE_FORMER_SRFI34 support
	* sigscheme/error.c
	  - (Scm_ThrowException): Removed
	  - (SigScm_Die, SigScm_Error, SigScm_ErrorObj, Scm_ErrorObj): Remove
	    SCM_USE_FORMER_SRFI34 support
	* sigscheme/main.c
	  - (repl_loop): Remove SCM_USE_FORMER_SRFI34 support
	* sigscheme/sigschemefunctable.h
	* sigscheme/sigschemefunctable.c
	* sigscheme/operations.c
	  - Remove SCM_USE_FORMER_SRFI34 support
	* sigscheme/Makefile.am
	  - (FUNC_TABLES): Remove sigschemefunctable-srfi34.c
	  - Remove the generation rule for sigschemefunctable-srfi34.c
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Resurrect the 'else => #t binding
	    always. At least 'case' syntax is still depending on this
	
2005-11-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (HAVE_ASPRINTF): New macro
	
2005-11-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fixes the last serious bug of SRFI-34. All tests have
	  been passed
	
	* sigscheme/operations-new-srfi34.c
	  - (guard_handler_body): Fix unevaled use of handler_k
	* sigscheme/test/test-srfi34-2.scm
	  - Remove all 'SEGV' status
	  - Disable *test-track-progress*
	* sigscheme/test/test-srfi34.scm
	  - Remove all 'SEGV' and 'FAILED' status
	  - Disable *test-track-progress*
	  - Add "guard handler reraise #3"
	  - Fix misrecognized specification in "mixed exception handling #2"
	    with assert-error
	
2005-11-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-srfi34-2.scm
	  - Uncomment all tests. statuses are not updated, and some tests are
	    still failed
	
2005-11-15 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (Scm_use, Scm_Use): Rename Scm_use to Scm_Use
	* sigscheme/sigscheme.c
	  - (Scm_use, Scm_Use): Ditto
	* sigscheme/operations-new-srfi34.c
	  - (SigScm_Initialize_SRFI34): Follow the renaming
	* sigscheme/main.c
	  - (main): Ditto
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit reorganizes the error and exception handlings based on
	  the new SRFI-34 implementation and an error object. It basically
	  works and become default
	
	* sigscheme/config.h
	  - Make SCM_USE_NEW_SRFI34 default
	* sigscheme/sigscheme.h
	  - (Scm_MakeErrorObj, Scm_RaiseError, ScmOp_sscm_error_objectp,
	    ScmOp_sscm_fatal_error, ScmOp_sscm_inspect_error): New function decl
	* sigscheme/sigschemeinternal.h
	  - (SCM_ERROBJP, ERROBJP, ASSERT_ERROBJP): New macro
	  - (SigScm_InitError): New function decl
	* sigscheme/error.c
	  - (ERRMSG_UNHANDLED_EXCEPTION): New macro
	  - (srfi34_is_provided, fatal_err_looped, err_obj_tag, str_srfi34):
	    New static variable
	  - (srfi34_providedp): New static function
	  - (SigScm_InitError, ScmOp_sscm_error_objectp, Scm_MakeErrorObj, Scm_RaiseError, ScmOp_sscm_fatal_error, ScmOp_sscm_inspect_error): New function
	  - (ScmOp_sscm_backtrace): Moved from operations-nonstd.c
	  - (Scm_ThrowException): Disable when SCM_USE_FORMER_SRFI34 is disabled
	  - (SigScm_Die, SigScm_Error, SigScm_ErrorObj, Scm_ErrorObj):
	    Delegate the error handling to Scm_RaiseError() when SCM_USE_NEW_SRFI34
	* sigscheme/operations-nonstd.c
	  - (ScmOp_sscm_backtrace): Move to error.c
	* sigscheme/debug.c
	  - (print_errobj): New static function
	  - (print_ScmObj_internal): Add error object support
	* sigscheme/operations-new-srfi34.c
	  - (USE_WITH_SIGSCHEME_FATAL_ERROR, ERRMSG_FALLBACK_EXHAUSTED): New
	    macro
	  - (errmsg_fallback_exhausted): New static variable
	  - (global_var_list): Add errmsg_fallback_exhausted
	  - (SigScm_Initialize_SRFI34):
	    * Add errmsg_fallback_exhausted initialization
	    * Initialize proc_fallback_handler cooperates with error.c when
	      USE_WITH_SIGSCHEME_FATAL_ERROR
	  - (with_exception_handlers): Remove never-fail sanity check
	  - (ScmOp_SRFI34_raise):
	    * Add handler exhaustion check
	    * Make cooperate with error.c
	    * Fix double evaluation for the obj
	  - (guard_handler_body): Fix double evaluation for the condition object
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error): Make cooperate with error.c and SRFI-34 when
	    SCM_USE_NEW_SRFI34
	* sigscheme/main.c
	  - (repl): Move initialization for feature_id_siod to main() as
	    proper responsibility separation
	  - (main): Moved feature_id_siod initialization from repl() and add
	    lacking GC protection for it
	  - (repl_loop): Follow the reorganization of error.c and SRFI-34 for
	    SCM_USE_NEW_SRFI34
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal):
	    * Add SigScm_InitError()
	    * Enclose the 'else => #t binding into #if SCM_USE_FORMER_SRFI34
	  -(SigScm_features): Add a comment
	* sigscheme/Makefile.am
	  - (FUNC_TABLES): Add sigschemefunctable-error.c
	  - Add generation rule for sigschemefunctable-error.c
	* sigscheme/sigschemefunctable.h
	  - (scm_error_func_info_table): New variable decl
	* sigscheme/sigschemefunctable.c
	  - Add sigschemefunctable-error.c
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (Scm_SymbolBoundTo): New function decl
	* sigscheme/storage-symbol.c
	  - (Scm_SymbolBoundTo): New function
	* sigscheme/debug.c
	  - (print_ScmObj_internal):
	    * Add procedure/syntax name printing using Scm_SymbolBoundTo()
	    * Remove the unfamiliar colon in closure expression
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace): Fix trace_stack traversing enbuged in r2130
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (SigScm_InitContinuation): Fix lacking GC protection for trace_stack
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SigScm_ShowBacktrace): Add argument 'trace_stack' to receive
	    trace stack explicitly. This is required to be used with SRFI-34
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace): Ditto
	  - (Scm_ThrowException, SigScm_Die): Follow the API change of
	    SigScm_ShowBacktrace()
	* sigscheme/operations-nonstd.c
	  - (ScmOp_sscm_backtrace): Ditto
	* sigscheme/eval.c
	  - (Scm_eval): Follow the API change of Scm_PushTraceFrame()
	* sigscheme/sigschemeinternal.h
	  - (struct trace_frame): Removed
	  - (MAKE_TRACE_FRAME, TRACE_FRAME_OBJ, TRACE_FRAME_ENV): New macro
	  - (Scm_PushTraceFrame): Change argument
	  - (Scm_TraceStack): Change return type
	* sigscheme/storage-continuation.c
	  - (trace_stack): Change type
	  - (SigScm_InitContinuation, Scm_CallWithCurrentContinuation,
	    Scm_PopTraceFrame): Follow the type change of trace_stack
	  - (Scm_PushTraceFrame):
	    * Change argument
	    * Follow the type change of trace_stack
	  - (Scm_TraceStack):
	    * Change return type
	    * Follow the type change of trace_stack
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-new-srfi34.c
	  - (global_var_list): Add const qualifier
	  - (SigScm_Initialize_SRFI34): Follow the type change
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-new-srfi34.c
	  - (global_obj_list): Rename to global_var_list
	  - (global_var_list): Renamed from global_obj_list
	  - (SigScm_Initialize_SRFI34): Follow the renaming
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-new-srfi34.c
	  - (global_obj_list): New static variable
	  - (SigScm_Initialize_SRFI34): Fix lacking GC protection for global
	    variables
	
2005-11-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds new implementation of SRFI-34 to resolve the
	  problems. It basically works, but some error-handling related part
	  is not yet reorganized. It will be fixed soon.
	
	* sigscheme/config.h
	  - (SCM_USE_FORMER_SRFI34, SCM_USE_NEW_SRFI34): New macro
	  - Add dependency resolution for SCM_USE_NEW_SRFI34
	* sigscheme/sigscheme.h
	  - (ScmExp_SRFI34_guard): Add different type definition for
	    SCM_USE_NEW_SRFI34
	* sigscheme/operations-new-srfi34.c
	  - New file
	  - (ERRMSG_UNHANDLED_EXCEPTION, ERRMSG_HANDLER_RETURNED,
	    MAKE_STR_COPYING, DECLARE_PRIVATE_FUNCTION): New macro
	  - (current_exception_handlers, errmsg_unhandled_exception,
	    errmsg_handler_returned, sym_error, sym_raise, sym_lex_env,
	    sym_cond_catch, sym_body, sym_condition, sym_guard_k,
	    sym_handler_k, syn_apply, proc_values, syn_set_cur_handlers,
	    proc_fallback_handler, proc_with_exception_handlers,
	    syn_guard_internal, syn_guard_handler, syn_guard_handler_body,
	    syn_guard_body): New static variable
	  - (set_cur_handlers, with_exception_handlers, guard_internal,
	    guard_handler, guard_handler_body, guard_body): New static
	    function
	  - (SigScm_Initialize_SRFI34, ScmOp_SRFI34_with_exception_handler,
	    ScmOp_SRFI34_raise, ScmExp_SRFI34_guard): New function
	* sigscheme/main.c
	  - (repl_loop): Add error-proof evaluation for SCM_USE_NEW_SRFI34
	  - (main): prepare SRFI-34 when SCM_USE_SRFI34
	* sigscheme/sigschemeinternal.h
	  - (scm_exception_handlers, scm_exception_continuations,
	    CURRENT_EXCEPTION_HANDLER, PUSH_EXCEPTION_HANDLER,
	    POP_EXCEPTION_HANDLER, CURRENT_EXCEPTION_CONTINUATION,
	    PUSH_EXCEPTION_CONTINUATION, POP_EXCEPTION_CONTINUATION): Disable
	    when SCM_USE_NEW_SRFI34
	* sigscheme/sigschemefunctable.h
	* sigscheme/sigschemefunctable.c
	* sigscheme/operations.c
	  - Support SCM_USE_NEW_SRFI34
	* sigscheme/Makefile.am
	  - (BUILD_FUNCTBL): New variable
	  - (FUNC_TABLES): Add sigschemefunctable-new-srfi34.c
	  - Add generation rule for sigschemefunctable-new-srfi34.c
	
2005-11-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-continuation.c
	  - (wind_onto_dynamic_extent): Cosmetic change
	
2005-11-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (print_ScmObj_internal): Add #<syntax> for syntax object
	
2005-11-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (Scm_use): New function decl
	* sigscheme/sigscheme.c
	  - (Scm_use): New function
	
2005-11-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ScmExp_cond_internal): New function decl
	* sigscheme/eval.c
	  - (ScmExp_cond_internal): New function. The code is moved from
	    former ScmExp_cond() and modified
	  - (ScmExp_cond): Move the code to ScmExp_cond_internal() and reform
	    as wrapper to the function
	
2005-11-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmExp_lambda): Change argument organization
	* sigscheme/eval.c
	  - (ScmExp_lambda): Ditto
	
2005-11-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_cond): Fix unhandled eval_state->ret_type
	
2005-11-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - (repl_loop, main): Trivial cleanup
	
2005-11-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fixes the problem reported in [Anthy-dev 2616]. Thanks
	  Etsushi.
	
	* sigscheme/nullport.h
	  - New file
	  - (ScmNullPort_vptr): New variable decl
	  - (Scm_nullport_init, ScmNullPort_new): New function decl
	* sigscheme/nullport.c
	  - New file
	  - (OK): New macro
	  - (ScmNullPort): New type
	  - (ScmNullPort_vtbl): New static variable
	  - (ScmNullPort_vptr): New variable
	  - (nullport_dyn_cast, nullport_close, nullport_inspect,
	    nullport_get_byte, nullport_peek_byte, nullport_byte_readyp,
	    nullport_vprintf, nullport_puts, nullport_write, nullport_flush):
	    New static function
	  - (Scm_nullport_init, ScmNullPort_new): New function
	* sigscheme/operations-siod.c
	  - Include nullport.c
	  - (null_port): New static variable
	  - (SigScm_Initialize_SIOD): Add initialization for the null port
	  - (SigScm_SetVerboseLevel): Replace the output ports disablement
	    when verbose level has been changed to 0 with null_port
	* sigscheme/io.c
	  - (SigScm_VPortPrintf, SigScm_PortNewline): Remove port existence
	    check
	* sigscheme/debug.c
	  - (SigScm_WriteToPort, SigScm_DisplayToPort): Ditto
	* sigscheme/main.c
	  - (is_repl_show_result): Removed
	  - (repl_loop): Remove port existence check
	
2005-11-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Add tests for conventional escape sequence and raw control chars
	
	* sigscheme/test/test-char.scm
	  - Add tests for character literals
	
2005-11-11 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (assert-parse-error, obj->literal, string-read): New procedure
	
2005-11-10 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_char): support #\xFF style character. now only support ASCII.
	
2005-11-10 kzk <mover@hct.zaq.ne.jp>
	
	* Reorganize accessors with proper abstraction
	
	* (SCM_GET_VALUE_AS_OBJ, SCM_GET_VALUE_AS_INT,
	   SCM_GET_VALUE_AS_PTR, SCM_GET_VALUE_AS_STR,
	   SCM_SET_VALUE_AS_OBJ, SCM_SET_VALUE_AS_INT,
	   SCM_SET_VALUE_AS_PTR, SCM_SET_VALUE_AS_STR,
	   SCM_GET_CAR, SCM_GET_CDR, SCM_SET_CAR, SCM_SET_CDR)
	  : removed
	* (SCM_GET_VALUE_AS_OBJ_DISCARDS_GCBIT,
	   SCM_GET_VALUE_AS_INT_DISCARDS_GCBIT,
	   SCM_GET_VALUE_AS_PTR_DISCARDS_GCBIT,
	   SCM_GET_VALUE_AS_STR_DISCARDS_GCBIT,
	   SCM_SET_VALUE_AS_OBJ_REMAIN_GCBIT,
	   SCM_SET_VALUE_AS_INT_REMAIN_GCBIT,
	   SCM_SET_VALUE_AS_PTR_REMAIN_GCBIT,
	   SCM_SET_VALUE_AS_STR_REMAIN_GCBIT,
	   SCM_PRIMARY_GET_VALUE_AS_OBJ,
	   SCM_PRIMARY_GET_VALUE_AS_INT,
	   SCM_PRIMARY_GET_VALUE_AS_PTR,
	   SCM_PRIMARY_GET_VALUE_AS_STR,
	   SCM_PRIMARY_SET_VALUE_AS_OBJ,
	   SCM_PRIMARY_SET_VALUE_AS_INT,
	   SCM_PRIMARY_SET_VALUE_AS_PTR,
	   SCM_PRIMARY_SET_VALUE_AS_STR,
	   SCM_GET_DIRECT_CAR, SCM_GET_DIRECT_CDR,
	   SCM_SET_DIRECT_CAR, SCM_SET_DIRECT_CDR,
	   SCM_CAR_GET_VALUE_AS_OBJ, SCM_CAR_GET_VALUE_AS_INT,
	   SCM_CAR_GET_VALUE_AS_PTR, SCM_CAR_GET_VALUE_AS_STR,
	   SCM_CAR_SET_VALUE_AS_OBJ, SCM_CAR_SET_VALUE_AS_INT,
	   SCM_CAR_SET_VALUE_AS_PTR, SCM_CAR_SET_VALUE_AS_STR,
	   SCM_CDR_GET_VALUE_AS_OBJ, SCM_CDR_GET_VALUE_AS_INT,
	   SCM_CDR_GET_VALUE_AS_PTR, SCM_CDR_GET_VALUE_AS_STR,
	   SCM_CDR_SET_VALUE_AS_OBJ, SCM_CDR_SET_VALUE_AS_INT,
	   SCM_CDR_SET_VALUE_AS_PTR, SCM_CDR_SET_VALUE_AS_STR)
	  : new macros for get and set the data to the object
	 - rewrite all the accessor macros with above macros
	
	
2005-11-10 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test-compact.c
	  - more strict check for GC mark and unmark.
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - (my-assert-error): New procedure
	  - Add more tests. Currently 10 SEGV and 8 FAILED
	* sigscheme/TODO
	  - Update
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_CONS_SET_CAR, SCM_CONS_SET_CDR,
	     SCM_SYMBOL_SET_VCELL, SCM_VALUEPACKET_SET_VALUES): no need to mask
	  - (SCM_CLOSURE_SET_EXP, SCM_CLOSURE_SET_ENV)
	    : no need to mask, and fixed typo
	
	* sigscheme/test-compact.c
	  - add test for Closure
	  - add test for SCM_DO_MARK and SCM_DO_UNMARK
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (*test-track-progress*): New variable
	  - (assert): Add progress tracking to locate SEGV point
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-srfi34-2.scm
	  - Enable *test-track-progress* to locate SEGV point
	  - Remove manual printings of progress
	  - Append tracking number to each test names
	  - Mark current status as SEGV and FAILED to some tests
	  - Comment out SEGV'ed tests temporarily
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_WORD_CAST): New macro
	  - (SCM_REINTERPRET_CAST): Resurrect previous definition before r2100
	* sigscheme/test-compact.c
	  - (SCM_REINTERPRET_CAST): Removed the re-definition
	* sigscheme/sigschemetype-compact.h
	  - (SCM_FUNC_CFUNC, SCM_FUNC_SET_CFUNC, SCM_C_FUNCPOINTER_VALUE,
	    SCM_C_FUNCPOINTER_SET_VALUE): Replace SCM_REINTERPRET_CAST() with
	    SCM_WORD_CAST()
	* sigscheme/debug.c
	  - (print_ScmObj_internal): Ditto
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* Abolish hardcoded Scm_Register*
	* Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/config.h
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/sigschemeinternal.h
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi34.c
	  - (SigScm_Initialize_SRFI34): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi38.c
	  - (SigScm_Initialize_SRFI38): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi1.c
	  - (SigScm_Initialize_SRFI1): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi2.c
	  - (SigScm_Initialize_SRFI2): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi6.c
	  - (SigScm_Initialize_SRFI6): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi8.c
	  - (SigScm_Initialize_SRFI8): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-siod.c
	  - (SigScm_Initialize_SIOD): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi23.c
	  - (SigScm_Initialize_SRFI23): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	* sigscheme/operations-srfi60.c
	  - (SigScm_Initialize_SRFI60): Abolish hardcoded Scm_Register*
	  - Remove SCM_USE_REGISTER_TABLE flag
	
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* Now, SCM_OBJ_COMPACT code is working without GC.
	  (BTW, cannot handle minus value yet)
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_TAG_OTHERS_MASK_SYMBOL, SCM_TAG_OTHERS_MASK_STRING,
	     SCM_TAG_OTHERS_MASK_VECTOR, SCM_TAG_OTHERS_MASK_VALUES,
	     SCM_TAG_OTHERS_MASK_FUNC, SCM_TAG_OTHERS_MASK_PORT,
	     SCM_TAG_OTHERS_MASK_CONTINUATION, SCM_TAG_OTHERS_MASK_C_POINTER,
	     SCM_TAG_IMM_MASK_INT, SCM_TAG_IMM_MASK_CHAR,
	     SCM_TAG_IMM_CONSTANTP)
	    : fix wrong value
	  - (SCM_TAG_IMM_NULLP, SCM_TAG_IMM_INVALIDP, SCM_TAG_IMM_UNBOUNDP,
	     SCM_TAG_IMM_FALSEP, SCM_TAG_IMM_TRUEP, SCM_TAG_IMM_EOFP,
	     SCM_TAG_IMM_UNDEFP): abolish and operation
	
	* sigscheme/test-compact.c
	  - add Constant test
	  - add more strict type check test
	  - (Scm_CheckConstant, check_type, typecode2typestr
	     PRINT_SECTION): new
	  - (SCM_REINTERPRET_CAST): use temporary (int) casting
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/storage.c
	  - (Scm_Type): handle ScmConstant, add error handling.
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* (SCM_REINTERPRET_CAST): change to use temporary (int) casting.
	  The code before this commit has the problem around
	  functpointer <=> normal pointer casting.
	
	  Notice: I don't know this is the proper solution.
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	* sigscheme/eval.c
	  - Update comments
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am 
	  - (CLEANFILES): new entry
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* fix bugs notified at r2088
	
	* sigscheme/debug.c
	  - (print_string): print esc_seq
	* sigscheme/TODO
	  - update
	
2005-11-09 kzk <mover@hct.zaq.ne.jp>
	
	* Change to generate functable files by each module
	
	* sigscheme/sigschemefunctable.h
	  - add include guard
	  - add config flags
	
	* sigscheme/script/build_func_table.rb
	  - change to see ARGV
	
	* sigscheme/Makefile.am
	  - change to generate each module's functable file
	
	* sigscheme/sigschemefunctable.c
	  - new file for including each module's functable file
	
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_cond):
	    * Add proper 'else' handlings
	    * Add syntax checkings
	    * Simplify
	* sigscheme/test/test-exp.scm
	  - Mark all test passed
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_cond):
	    * Cosmetic change
	    * Remove comment for obvious operations
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_sym_else, Scm_sym_yields): New variable decl
	  - (SYM_ELSE, SYM_YIELDS): New macro
	* sigscheme/sigscheme.c
	  - (Scm_sym_else, Scm_sym_yields): New variable
	  - (SigScm_Initialize_internal):
	    * Add initialization of Scm_sym_else and Scm_sym_yields
	    * Remove #t value binding to "=>"
	* sigscheme/eval.c
	  - (ScmExp_cond): Remove expensive Scm_Intern()
	* sigscheme/test/test-exp.scm
	  - Change status of the 3 FAILED tests to passed
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SYM_QUOTE, SYM_QUASIQUOTE, SYM_UNQUOTE, SYM_UNQUOTE_SPLICING):
	    New macro
	* sigscheme/sigschemetype.h
	  - (SCM_QUOTE, SCM_QUASIQUOTE, SCM_UNQUOTE, SCM_UNQUOTE_SPLICING):
	    Rename to SCM_SYM_*
	  - (SCM_SYM_QUOTE, SCM_SYM_QUASIQUOTE, SCM_SYM_UNQUOTE,
	    SCM_SYM_UNQUOTE_SPLICING): Renamed from SCM_*
	  - (SigScm_quote, SigScm_quasiquote, SigScm_unquote,
	    SigScm_unquote_splicing): Rename to Scm_sym_*
	  - (Scm_sym_quote, Scm_sym_quasiquote, Scm_sym_unquote,
	    Scm_sym_unquote_splicing): Renamed from SigScm_*
	* sigscheme/sigschemetype-compact.h
	  - (SCM_QUOTE, SCM_QUASIQUOTE, SCM_UNQUOTE, SCM_UNQUOTE_SPLICING):
	    Rename to SCM_SYM_*
	  - (SCM_SYM_QUOTE, SCM_SYM_QUASIQUOTE, SCM_SYM_UNQUOTE,
	    SCM_SYM_UNQUOTE_SPLICING): Renamed from SCM_*
	  - (SigScm_quote, SigScm_quasiquote, SigScm_unquote,
	    SigScm_unquote_splicing): Rename to Scm_sym_*
	  - (Scm_sym_quote, Scm_sym_quasiquote, Scm_sym_unquote,
	    Scm_sym_unquote_splicing): Renamed from SigScm_*
	* sigscheme/sigscheme.c
	  - (SigScm_quote, SigScm_quasiquote, SigScm_unquote,
	    SigScm_unquote_splicing): Rename to Scm_sym_*
	  - (Scm_sym_quote, Scm_sym_quasiquote, Scm_sym_unquote,
	    Scm_sym_unquote_splicing): Renamed from SigScm_*
	  - (SigScm_Initialize_internal): Follow the renamings
	* sigscheme/read.c
	  - (read_sexpression): Follow the renamings
	* sigscheme/eval.c
	  - (qquote_internal, qquote_vector): Follow the renamings
	* sigscheme/main.c
	  - (repl_loop): Follow the renamings
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_cond): Fix the SEGV on invalid (#t =>) clause
	* sigscheme/test/test-exp.scm
	  - Change status of the 3 SEGV'ed tests to FAILED
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Add tests for "cond". 3 tests failed and 3 tests causes SEGV
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Provide "sigscheme"
	* sigscheme/test/unittest.scm
	  - (cond-expand) New alias
	  - (sigscheme): New variable
	  - Prepare SRFI-34 in portable between SigScheme and Gauche
	  - (undef): New procedure
	* sigscheme/test/test-srfi34.scm
	  - Prepare SRFI-34 in portable between SigScheme and Gauche
	* sigscheme/test/test-srfi34-2.scm
	  - Ditto
	
2005-11-09 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Rename all 'cond' tests as simply "cond"
	  - Cosmetic change to "cond" tests
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_DestructContinuation): New function decl
	* sigscheme/storage-continuation.c
	  - (Scm_DestructContinuation): New function
	* sigscheme/storage-gc.c
	  - (sweep_obj): Add invocation of Scm_DestructContinuation()
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_ErrorObj): Add SCM_NORETURN attribute
	* sigscheme/operations.c
	  - (ScmOp_integer2char): Append /* NOTREACHED */ comment to ERR_OBJ()
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_FUNC_CFUNC, SCM_FUNC_SET_CFUNC, SCM_C_FUNCPOINTER_VALUE,
	    SCM_C_FUNCPOINTER_SET_VALUE): Fix invalid casting with
	    SCM_REINTERPRET_CAST()
	* sigscheme/debug.c
	  - (print_ScmObj_internal): Revert the change of r2079 resolved by
	    above fix
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_CONS, SCM_EVAL, SCM_PORT_GETC): Fix Operator precedence
	    problems as described in doc/style
	* sigscheme/sigschemetype.h
	  - (SCM_CONS_SET_CAR, SCM_CONS_SET_CDR, SCM_CLOSURE_SET_EXP,
	    SCM_CLOSURE_SET_ENV, SCM_NULLVALUESP, SCM_C_POINTER_SET_VALUE,
	    SCM_C_FUNCPOINTER_SET_VALUE): Ditto
	* sigscheme/sigschemeinternal.h
	  - (SCM_FREECELL_SET_CAR, SCM_FREECELL_SET_CDR, SCM_FREECELL_SET_CAR,
	    SCM_FREECELL_SET_CDR, ERR_OBJ): Ditto
	* sigscheme/encoding.h
	  - (SCM_CHARCODEC_INT2STR): Ditto
	* sigscheme/baseport.h
	  - (SCM_CHARPORT_PUTS, SCM_BYTEPORT_PUTS): Ditto
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_GET_VALUE_AS_INT, SCM_GET_VALUE_AS_PTR, SCM_GET_VALUE_AS_STR,
	    SCM_SET_VALUE_AS_OBJ, SCM_SET_VALUE_AS_INT, SCM_SET_VALUE_AS_PTR,
	    SCM_SET_VALUE_AS_STR, SCM_ENTYPE_PRIMARY_TAG,
	    SCM_ENTYPE_PRIMARY_TAG_CONS, SCM_ENTYPE_PRIMARY_TAG_CLOSURE,
	    SCM_ENTYPE_PRIMARY_TAG_OTHERS, SCM_ENTYPE_INT, SCM_ENTYPE_CHAR,
	    SCM_ENTYPE_NULL, SCM_ENTYPE_INVALID, SCM_ENTYPE_UNBOUND,
	    SCM_ENTYPE_FALSE, SCM_ENTYPE_TRUE, SCM_ENTYPE_EOF,
	    SCM_ENTYPE_UNDEF, SCM_CONS_SET_CAR, SCM_CONS_SET_CDR,
	    SCM_CLOSURE_SET_EXP, SCM_CLOSURE_SET_ENV, SCM_SYMBOL_SET_VCELL,
	    SCM_SYMBOL_SET_NAME, SCM_STRING_SET_LEN, SCM_STRING_SET_STR,
	    SCM_VECTOR_SET_VEC, SCM_VECTOR_SET_LEN,
	    SCM_VALUEPACKET_SET_VALUES, SCM_FUNC_SET_CFUNC,
	    SCM_FUNC_SET_TYPECODE, SCM_PORT_SET_IMPL, SCM_PORT_SET_FLAG,
	    SCM_CONTINUATION_SET_OPAQUE, SCM_CONTINUATION_SET_TAG,
	    SCM_C_POINTER_SET_VALUE, SCM_C_FUNCPOINTER_SET_VALUE,
	    SCM_INT_VALUE, SCM_INT_SET_VALUE, SCM_CHAR_VALUE,
	    SCM_CHAR_SET_VALUE): Fix Operator precedence problems as described
	    in doc/style
	
	* Other files will follow
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/doc
	  - New directory
	* sigscheme/doc/style
	  - New file
	  - Describe "Macro definition"
	
2005-11-08 kzk <mover@hct.zaq.ne.jp>
	
	* Now SCM_OBJ_COMPACT passed the building phase.
	  But not working properly yet.
	
	* storage-gc.c
	  - Add SCM_OBJ_COMPACT flag. Need to implement gc_preprocess,
	    sweep_obj, gc_sweep
	
	* debug.c
	  - (print_ScmObj_internal): not to use SCM_REINTERPRET_CAST for
	    avoiding build problem. Please fix if there's any proper solution.
	
	
2005-11-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_TAG_OTHERS_VALUE_OFFSET_CONTINUATION,
	     SCM_CONTINUATION_OPAQUE,
	     SCM_CONTINUATION_SET_OPAQUE,
	     SCM_CONTINUATION_TAG,
	     SCM_CONTINUATION_SET_TAG): new macro
	
	* sigscheme/test-compact.c
	  - (Scm_CheckPort, Scm_CheckContinuation): enabled
	
	* sigscheme/storage.c
	  - (Scm_Type): new func
	
2005-11-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-srfi38.scm
	  - add copyright header
	  - change to use unittest framework with srfi-6.
	    but this code causes SIGSEGV, what's wrong?
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit changes the internal representation of continuation
	  object. It is suitable for SCM_OBJ_COMPACT. Please follow this in
	  sigschemetype-compact.h
	
	* sigscheme/sigschemetype.h
	  - (struct ScmContinuation): Replace member 'opaque0' and 'opaque1'
	    with 'opaque' and 'tag'. This representation is suitable for
	    SCM_OBJ_COMPACT
	  - (SCM_CONTINUATION_OPAQUE0, SCM_CONTINUATION_SET_OPAQUE0,
	    SCM_CONTINUATION_OPAQUE1, SCM_CONTINUATION_SET_OPAQUE1): Removed
	  - (SCM_CONTINUATION_OPAQUE, SCM_CONTINUATION_SET_OPAQUE,
	    SCM_CONTINUATION_TAG, SCM_CONTINUATION_SET_TAG): New macro
	* sigscheme/storage.c
	  - (Scm_NewContinuation): Follow the object representation change
	  - Fix a typo on a comment
	* sigscheme/storage-continuation.c
	  - (CONTINUATION_FRAME, CONTINUATION_SET_FRAME): New macro
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV,
	    CONTINUATION_DYNEXT, CONTINUATION_SET_DYNEXT): Follow the object
	    representation change
	  - (struct continuation_frame): New type
	  - (continuation_stack_unwind, Scm_CallWithCurrentContinuation,
	    Scm_CallContinuation): Follow the object representation change
	* sigscheme/operations-srfi34.c
	  - (CONTINUATION_FRAME, CONTINUATION_SET_FRAME, CONTINUATION_JMPENV,
	    CONTINUATION_SET_JMPENV, CONTINUATION_DYNEXT,
	    CONTINUATION_SET_DYNEXT, struct continuation_frame): Duplicate
	    from storage-continuation.c as temporary solution
	  - (ScmOp_SRFI34_with_exception_handler, ScmExp_SRFI34_guard): Follow
	    the object representation change
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi34.c
	  - (ScmOp_SRFI34_with_exception_handler, ScmExp_SRFI34_guard): Fix
	    lacking pointer dereference (jmp_buf * is passed for setjmp(jmp_buf))
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit is first step to reorganize continuation and exception
	  handling reorganization. This change hides internal representation
	  of continuation object into storage-continuation.c and
	  operations-srfi34.c. I'll make the continuation object
	  SCM_OBJ_COMPACT capable in next step as declared in [Anthy-dev
	  2530].
	
	* sigscheme/sigschemeinternal.h
	  - (INVALID_CONTINUATION_JMPENV): Removed
	  - (INVALID_CONTINUATION_OPAQUE): New macro
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV): Move to
	    storage-continuation.c
	  - (CONTINUATION_DYNEXT, CONTINUATION_SET_DYNEXT): Move to
	    storage-continuation.c and operations-srfi34.c
	* sigscheme/storage.c
	  - (scm_current_dynamic_extent): Removed
	  - (Scm_NewContinuation): Initialize both slot with
	    INVALID_CONTINUATION_OPAQUE. Dynamic extent slot initialization
	    has been moved to caller
	* sigscheme/storage-continuation.c
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV,
	    CONTINUATION_DYNEXT, CONTINUATION_SET_DYNEXT): Moved from
	    sigschemeinternal.h
	  - (continuation_stack_unwind, Scm_CallContinuation): Replace
	    INVALID_CONTINUATION_JMPENV with INVALID_CONTINUATION_OPAQUE
	  - (Scm_CallWithCurrentContinuation): Add dynamic extent slot
	    initialization of continuation object
	* sigscheme/operations-srfi34.c
	  - (scm_current_dynamic_extent): Add extern decl
	  - (CONTINUATION_DYNEXT, CONTINUATION_SET_DYNEXT): Moved from
	    sigschemeinternal.h
	  - (ScmOp_SRFI34_with_exception_handler, ScmExp_SRFI34_guard): Add
	    dynamic extent slot initialization of continuation object
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - Add new test for with-exception-handler
	  - Add SigScheme-dependent tests for the case a handler of
	    with-exception-handler returned
	* sigscheme/test/test-srfi34-2.scm
	  - Add SigScheme-dependent tests for the case a handler of
	    with-exception-handler returned
	
2005-11-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_char): simplify with Scm_special_char_table
	  - (read_string): Ditto
	* sigscheme/debug.c
	  - (print_char): Ditto
	  - (print_string): Ditto
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SigScm_null, SigScm_true, SigScm_false, SigScm_eof,
	    SigScm_unbound, SigScm_undef): Removed. SCM_OBJ_COMPACT must not
	    refer these variables. Use SCM_NULL and so on
	* sigscheme/storage.c
	  - (SigScm_null, SigScm_true, SigScm_false, SigScm_eof,
	    SigScm_unbound, SigScm_undef): Disable when SCM_OBJ_COMPACT
	  - (SigScm_InitStorage, initialize_special_constants): Fix
	    mis-reference to SigScm_null and so on when SCM_OBJ_COMPACT is
	    enabled
	
2005-11-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_TAG_OTHERS_MASK_FREECELL, SCM_TAG_OTHERS_FREECELL,
	     SCM_TAG_OTHERS_FREECELLP): commented out
	  - (SCM_TAG_IMM_MASK_CONST_VALUE, SCM_TAG_IMM_CONSTANTP,
	     SCM_IS_MARKED, SCM_IS_UNMARKED): new macro
	  - (SCM_SET_VALUE_AS_PTR): cast to uint
	  - (SCM_SYMBOLP, SCM_STRINGP, SCM_VECTORP, SCM_VALUEPACKETP,
	     SCM_FUNCP, SCM_PORTP, SCM_CONTINUATIONP, SCM_C_POINTERP,
	     SCM_C_FUNCPOINTERP): fix invalid ","
	  - (SCM_ASSERT_TYPE): use SCM_GET_VALUE_AS_OBJ
	  - (SCM_ENTYPE_PRIMARY_TAG, SCM_ENTYPE_PRIMARY_TAG_CONS,
	     SCM_ENTYPE_PRIMARY_TAG_CLOSURE, SCM_ENTYPE_PRIMARY_TAG_OTHERS)
	     : renamd from SCM_ENTYPE_TAG_*
	  - (SCM_NULL, SCM_EOF, SCM_UNDEF, SCM_INVALID, SCM_UNBOUND,
	     SCM_FALSE, SCM_TRUE): cat to ScmObj
	  - (ScmObjType): new enum for compatibility with non-compact code
	  - (SCM_TYPE): new function for compatibility with non-compact code
	
2005-11-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34-2.scm
	  - Remove a garbage
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - Add test-name printing before each tests to locate SEGV position
	  - Rename some duplicate test-names
	  - Currently "mixed exception handling" #1, #3, #4 produce SEGV
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* SCM_OBJ_COMPACT
	
	* sigscheme/storage.c
	  - (initialize_special_constant)
	    : special constant initialization for SCM_OBJ_COMPACT
	  - (SCM_CONSTANT_BIND_SUBSTANCE, null_cell, true_cell, false_cell,
	     eof_cell, unbound_cell, undef_cell)
	    : disabled when SCM_OBJ_COMPACT is on
	
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - Rename all testts
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34.scm
	  - Cosmetic change. No actual codes are changed
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* SCM_OBJ_COMPACT
	
	* sigscheme/test-compact.c
	  - add test cases for various object otherthan port and continuation
	  - (Scm_CheckInt, Scm_CheckCons, Scm_CheckSymbol,
	     Scm_CheckChar, Scm_CheckStringCopying, Scm_CheckFunc,
	     Scm_CheckVector, Scm_CheckValuePacket, Scm_CheckCPointer,
	     Scm_CheckCFuncPointer): new test cases
	  - (aligned_strdup, malloc_aligned): new func
	  - (check_entype, check_int): removed
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi34-2.scm
	  - New file
	  - The tests are ported from "Examples" section of SRFI-34. Currently
	    test #5 and #6 produces SEGV
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/config.h
	  - resolve dependency for SCM_OBJ_COMPACT
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/Makefile.am
	  - Replace ${} with $() to unify coding style
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* SCM_OBJ_COMPACT
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_FREECELL_SET_CAR): fix misuse of SCM_CONS_SET_CAR
	  - (SCM_FREECELL_SET_CDR): fix misuse of SCM_CONS_SET_CDR
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am
	  - (EXTRA_DIST): new
	  - (sigschemefunctable.c): fix dependency issue
	
	* sigscheme/TODO
	  - update
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Disable tests for conventional escape sequences. See the comment
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Add tests for escape sequences
	
	* I will not fix character and escape sequence related issues for
	  now. Please fix them with Scm_special_char_table if you can spend a
	  time for it
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Oops
	
	* sigscheme/operations.c
	  - Include lacking ctype.h for character operations
	  - (ScmOp_integer2char): New function
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_integer2char): New function decl
	* sigscheme/operations.c
	  - Include lacking ctype.h for character operations
	  - (ScmOp_integer2char): New function
	* sigscheme/test/test-char.scm
	  - Add tests for integer->char
	  - Add tests for R6RS(SRFI-75) named chars
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	* sigscheme/storage-continuation.c
	* sigscheme/storage-gc.c
	* sigscheme/operations-srfi34.c
	* sigscheme/storage.c
	* sigscheme/sigschemetype.h
	  - Revert r2051 since it conflicts my plan. Please don't touch
	    around continuation and SRFI-34 until my reorganization
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Makefile.am
	  - Add some FIXME comments
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* Change continuation data structure
	
	* sigscheme/sigschemetype.h
	  - (struct ScmContinuationInfo): new struct
	  - (ScmCell_.obj.continuation): change structure
	  - (SCM_CONTINUATION_OPAQUE0, SCM_CONTINUATION_SET_OPAQUE0
	     SCM_CONTINUATION_OPAQUE1, SCM_CONTINUATION_SET_OPAQUE1): removed
	  - (SCM_CONTINUATION_INFO, SCM_CONTINUATION_SET_INFO,
	     SCM_CONTINUATION_JMPENV, SCM_CONTINUATION_SET_JMPENV,
	     SCM_CONTINUATION_DYNEXT, SCM_CONTINUATION_SET_DYNEXT): new macro
	
	* sigscheme/sigschemeinternal.h
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV,
	     CONTINUATION_DYNEXT, CONTINUATION_SET_DYNEXT): removed
	
	* sigscheme/storage-continuation.c
	  - (continuation_stack_unwind, Scm_CallWithCurrentContinuation,
	     Scm_CallContinuation): use new SCM_CONTINUATION* macro
	
	* sigscheme/operations-srfi34.c
	  - (ScmOp_SRFI34_with_exception_handler, ScmExp_SRFI34_guard,
	     ScmOp_SRFI34_raise): use new SCM_CONTINUATION* macro
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV): removed
	
	* sigscheme/storage-gc.c
	  - (sweep_obj): free ScmContinuationInfo
	
	* sigscheme/storage.c
	  - (Scm_NewContinuation): change to allocate new structure
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-char.scm
	  - Add license header
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - Remove unnecessary (use srfi-23)
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (assert): Rename back inappropriate argument name
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (assert, assert-false, assert-eq?, assert-equal?, assert-error):
	    Rename arguments
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (report-inequality): New procedure
	  - (assert-eq?, assert-equal?):
	    * Change message format and simplify with report-inequality
	    * Remove "assert-eq?" and "assert-equal?" from error message since
	      such detail is useless for test writers
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (total-err-num): Rename to *total-failures*
	  - (total-test-num): Rename to *total-assertions*
	  - (*total-failures*): Renamed from total-err-num
	  - (*total-assertions*): Renamed from total-test-num
	  - (*total-testsuites*, *total-testcases*, *total-tests*,
	    *total-errors*): New variable
	  - (total-report, assert, assert-error): Follow the renamings
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (total-report): Change the report format to GaUnit-like
	    easy-to-recognize one
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - Cosmetic change
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (assert-error): Implement
	* sigscheme/TODO
	  - Update
	
2005-11-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-nonstd.c
	  - (ScmOp_symbol_boundp): Add a NOTE
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* move nonstd functions to operations-nonstd.c
	
	* sigscheme/sigschemefunctable.h
	  - (nonstd_func_info_table): new file
	
	* sigscheme/io.c
	  - (scm_lib_path): renamed from lib_path
	  - (create_loaded_str, ScmOp_load_path,
	     ScmOp_require, ScmOp_provide, ScmOp_providep,
	     ScmOp_file_existsp): move to operations-nonstd.c
	
	* sigscheme/operations.c
	  - (ScmOp_symbol_boundp, ScmOp_sscm_backtrace)
	    : move to operations-nonstd.c
	  - include operations-nonstd.c when SCM_USE_NONSTD_FEATURES is on
	
	* sigscheme/operations-nonstd.c
	  - (create_loaded_str, ScmOp_load_path,
	     ScmOp_require, ScmOp_provide, ScmOp_providep,
	     ScmOp_file_existsp): moved from io.c
	  - (ScmOp_symbol_boundp, ScmOp_sscm_backtrace)
	    : moved from operations.c
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): register nonstd_func_info_table
	
	* sigscheme/sigscheme.h
	  - update section for SCM_USE_NONSTD_FEATURES
	
	* script/build_func_table.rb
	  - change to generate nonstd_func_info_table
	
2005-11-07 kzk <mover@hct.zaq.ne.jp>
	
	* split deep c[ad]+r operations to operations-r5rs-deepcadrs.c
	
	* sigscheme/sigschemefunctable.h
	  - (r5rs_deepcadrs_func_info_table): new variable
	* sigscheme/operations-r5rs-deepcadrs.c
	  - (ScmOp_caaar, ScmOp_caadr, ScmOp_cadar, ScmOp_cdaar,
	     ScmOp_cdadr, ScmOp_cddar,
	     ScmOp_caaaar, ScmOp_caaadr, ScmOp_caadar, ScmOp_caaddr,
	     ScmOp_cadaar, ScmOp_cadadr, ScmOp_caddar, ScmOp_cadddr,
	     ScmOp_cdaaar, ScmOp_cdaadr, ScmOp_cdadar, ScmOp_cdaddr,
	     ScmOp_cddaar, ScmOp_cddadr, ScmOp_cdddar, ScmOp_cddddr)
	    : moved from operations.c
	* sigscheme/operations.c
	  - (ScmOp_caaar, ScmOp_caadr, ScmOp_cadar, ScmOp_cdaar,
	     ScmOp_cdadr, ScmOp_cddar,
	     ScmOp_caaaar, ScmOp_caaadr, ScmOp_caadar, ScmOp_caaddr,
	     ScmOp_cadaar, ScmOp_cadadr, ScmOp_caddar, ScmOp_cadddr,
	     ScmOp_cdaaar, ScmOp_cdaadr, ScmOp_cdadar, ScmOp_cdaddr,
	     ScmOp_cddaar, ScmOp_cddadr, ScmOp_cdddar, ScmOp_cddddr)
	    : moved to operations-r5rs-deepcadrs.c
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): register table
	    r5rs_deepcadrs_func_info_table
	* sigscheme/sigscheme.h
	  - update section
	* sigscheme/script/build_func_table.rb
	  - change to generate r5rs_deepcadrs_func_info_table
	
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/script/scm_decl.rb
	  - (SCM_DECL_RE): Remove a garbage
	  - (String#scan_scm_decl): Cosmetic change
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/script/scm_decl.rb
	  - (SCM_DECL_RE):
	    * Remove an unnecessary backslash
	    * Fix wrong description for $7
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit provides another solution for the function table
	  processing. This code uses real C function name instead of generated
	  from Scheme procedure name, so safe and flexible. Please consider
	  adoption.
	
	* sigscheme/script/scm_decl.rb
	  - New file
	  - (SCM_DECL_RE): New constant
	  - (String#scan_scm_decl): New method
	  - (scm_func_table_entry, scm_func_register_exp,
	    scm_generate_func_table_body, scm_generate_func_register_exps,
	    scm_generate_func_prototypes): New function
	
2005-11-06 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/script/check_initialize_scm_null.rb
	  - script to check the initialization with SCM_NULL.
	    but we need manual check by this informatin because SCM_NULL
	    initialization is used for list head default value.
	
2005-11-06 kzk <mover@hct.zaq.ne.jp>
	
	* now, SCM_USE_REGISTER_TABLE is enabled as default
	
	* Fix "=" related problem. in operations-siod.c, "=" is declared,
	  but auto-generating script guess c_funcname "ScmOp_equal" for
	  siod's "=". But "ScmOp_equal" is implemented in operations.c.
	  So, cause the type mismatch error.
	
	* sigscheme/sigscheme.h
	  - (ScmOp_sscm_equal): renamed from ScmOp_siod_eql
	
	* sigscheme/operations-siod.c
	  - (ScmOp_sscm_equal): renamed from ScmOp_siod_eql
	  - (SigScm_Initialize_SIOD): define alias replace  R5RS's
	    "=" with "%%="
	
	* sigscheme/config.h
	  - SCM_USE_REGISTER_TABLE is on
	
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fixes the SEGV by broken backtrace information handlings
	  when a continuation switching has occur
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_PushTraceFrame, Scm_PopTraceFrame, Scm_TraceStack): New
	    function decl
	* sigscheme/storage-continuation.c
	  - (trace_stack): New static variable
	  - (SigScm_InitContinuation, Scm_CallWithCurrentContinuation): Add
	    trace_stack handlings
	  - (Scm_PushTraceFrame, Scm_PopTraceFrame, Scm_TraceStack): New
	    function
	* sigscheme/eval.c
	  - (scm_trace_root): Removed
	  - (Scm_eval): Follow the internal API change
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace): Ditto
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit makes the testing framework workable
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_ThrowException): New function decl
	* sigscheme/error.c
	  - (throw_exception): Rename to Scm_ThrowException()
	  - (Scm_ThrowException):
	    * Renamed from throw_exception()
	    * Make global
	  - (SigScm_Error, SigScm_ErrorObj, Scm_ErrorObj): Follow the renaming
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error): Throw exception instead of exit(3)
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-siod.c
	  - (SCM_DBG_SIOD_V1): Remove SCM_DBG_BACKTRACE
	  - (SCM_DBG_SIOD_V2): Add SCM_DBG_BACKTRACE
	
2005-11-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_sscm_backtrace): New function decl
	* sigscheme/operations.c
	  - (ScmOp_sscm_backtrace): New function
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Add initialization for %%backtrace
	
2005-11-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations-siod.c
	  - (ScmOp_verbose): fix typo
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_lengthplus): fix typo
	  - (ScmOp_SRFI1_concatenate): fix typo
	
2005-11-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/script/check_declare_func_typo.rb
	  - script to check typo of DECLARE_FUNCTION
	
2005-11-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/main.c
	  - (repl_loop): quote s_expression
	
2005-11-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal)
	    : move "#endif /* SCM_USE_REGISTER_TABLE */" location
	
2005-11-04 kzk <mover@hct.zaq.ne.jp>
	
	* Add SCM_USE_REGISTER_TABLE flag
	  this is disabled by default now, because some typos may remain.
	
	* sigscheme/sigschemefunctable.h
	  - new file
	* sigscheme/sigschemeinternal.h
	  - include sigschemefunctable.h when SCM_USE_REGISTER_TABLE is on
	* sigscheme/config.h
	  - (SCM_USE_REGISTER_TABLE): new flag
	  
	* sigscheme/operations.c
	  - (ScmOp_cons, ScmOp_string_append): fixed typo
	  - (ScmOp_stringequalp): renamed from ScmOp_stringequal
	
	* sigscheme/operations-srfi34.c
	* sigscheme/operations-srfi38.c
	* sigscheme/operations-srfi1.c
	* sigscheme/operations-srfi2.c
	* sigscheme/sigscheme.c
	* sigscheme/operations-srfi6.c
	* sigscheme/operations-siod.c
	* sigscheme/operations-srfi23.c
	* sigscheme/operations-srfi60.c
	  - use REGISTER_FUNCTABLE when SCM_USE_REGISTER_TABLE is on
	
	* sigscheme/script/functable-header.txt
	* sigscheme/script/functable-footer.txt
	  - change to generate sigschemefunctable.c file
	
	* sigscheme/sigscheme.h
	  - (ScmOp_stringequalp): renamed from ScmOp_stringequal
	* sigscheme/Makefile.am
	  - add sigschemefunctable.[ch]
	* uim/uim-scm.c
	  - (uim_scm_string_equal): use ScmOp_stringequalp instead of
	    ScmOp_stringequal
	
	
2005-11-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_and): "and" is SyntaxVariadicTailRec0
	
2005-11-04 kzk <mover@hct.zaq.ne.jp>
	
	* Final work to introduce auto-generated func table
	
	* sigscheme/operations.c
	  - (ScmOp_set_card, ScmOp_set_cdrd): fixed typo
	  - (ScmOp_charequalp): renamed from ScmOp_char_equal
	  - (ScmOp_stringequal): renamed from ScmOp_string_equal
	  - (ScmOp_substring): renamed from ScmOp_string_substring
	  - (ScmOp_eqvp, ScmOp_equalp): use ScmOp_charequalp
	
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_consstar): renamed from ScmOp_SRFI1_cons_star
	  - (ScmOp_SRFI1_taked): renamed from ScmOp_SRFI1_take_d
	  - (ScmOp_SRFI1_drop_rightd): renamed from ScmOp_SRFI1_drop_right_d
	  - (ScmOp_SRFI1_split_atd): renamed from ScmOp_SRFI1_split_at_d
	
	* sigscheme/operations-srfi2.c
	  - (ScmExp_SRFI2_and_letstar): renamed from ScmOp_SRFI2_and_let_star
	
	* sigscheme/operations-srfi8.c
	  - (ScmExp_SRFI8_receive): renamed from ScmOp_SRFI8_receive
	
	* sigscheme/operations-siod.c
	  - (ScmOp_set_symbol_valued): renamed from ScmOp_set_symbol_value
	  - (ScmOp_sscm_closure_code): renamed from ScmOp_closure_code
	  - (ScmExp_undefine): renamed from ScmOp_undefine
	
	* sigscheme/eval.c
	  - (ScmExp_let,
	     ScmExp_letstar,
	     ScmExp_letrec): fixed typo
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal)
	    - (ScmOp_charequalp): renamed from ScmOp_char_equal
	    - (ScmOp_stringequal): renamed from ScmOp_string_equal
	    - (ScmOp_substring): renamed from ScmOp_string_substring
	
	* sigscheme/script/build_func_table.rb
	  - handle c_function name prefix
	
	* sigscheme/script/functable-header.txt
	  - include sigscheme.h
	  - (REGISTER_FUNC_TABLE): new macro
	    
	
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/script/build_func_table.rb
	  - change to output whole functable definition file
	
	* sigscheme/script/functable-header.txt
	  - new file
	* sigscheme/script/functable-footer.txt
	  - new file
	
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage.c
	  - (SigScm_null_cell, SigScm_true_cell, SigScm_false_cell,
	    SigScm_eof_cell, SigScm_unbound_cell, SigScm_undef_cell): Rename
	    to *_cell
	  - (null_cell, true_cell, false_cell, eof_cell, unbound_cell,
	    undef_cell): Renamed from SigScm_*_cell
	  - (initialize_special_constants): Follow the renamings
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage.c
	  - (SigScm_FinalizeStorage): Reorder SigScm_FinalizeContinuation() in
	    accordance with initialization order
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/AUTHORS
	* sigscheme/README
	  - new file
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (CHECK_1_ARG, CHECK_2_ARG, CHECK_3_ARG,
	     CHECK_4_ARG, CHECK_5_ARG): removed
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am
	  - rename datas.c to storage.c
	* sigscheme/TODO
	  - update
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* Rename datas.c to storage.c
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* Move GC related code from datas.c to storage-gc.c
	
	* sigscheme/sigschemeinternal.h
	  - update comment
	  - (SigScm_InitGC, SigScm_FinalizeGC,
	     SigScm_NewObjFromHeap): new func
	
	* sigscheme/datas.c
	  - (ScmObjHeap, gc_protected_var,
	     SCM_UNMARKER, SCM_INITIAL_MARKER, SCM_IS_MARKED,
	     SCM_IS_UNMARKED, SCM_DO_MARK, SCM_DO_UNMARK,
	     SCM_MARK_CORRUPTED, SCM_HEAP_SIZE,
	     scm_heap_num, scm_heaps, scm_freelist, scm_stack_start_pointer
	     scm_cur_marker, save_regs_buf, scm_gc_protect_stack,
	     protected_var_list, malloc_aligned, allocate_heap,
	     add_heap, finalize_heap, gc_preprocess, gc_mark_and_sweep,
	     mark_obj, is_pointer_to_heap, gc_mark_protected_var,
	     gc_mark_locations_n, gc_mark_locations, gc_mark,
	     sweep_obj, gc_sweep, finalize_protected_var,
	     SigScm_GC_Protect, SigScm_GC_Unprotect,
	     SigScm_GC_ProtectStackInternal, SigScm_GC_ProtectStack,
	     SigScm_GC_UnprotectStack): moved to storage-gc.c
	  - (SCM_NEW_OBJ_INTERNAL): removed and replaced by
	    SigScm_NewObjFromHeap
	  - (Scm_NewCons, Scm_NewInt, Scm_NewSymbol, Scm_NewChar,
	     Scm_NewString, Scm_NewStringCopying, Scm_NewStringWithLen,
	     Scm_NewFunc, Scm_NewClosure, Scm_NewVector,
	     Scm_NewPort, Scm_NewContinuation,
	     Scm_NewValuePacket, Scm_NewCPointer, Scm_NewCFuncPointer)
	     : use SigScm_NewObjFromHeap instead of SCM_NEW_OBJ_INTERNAL
	
	* sigscheme/storage-gc.c
	  - (SigScm_InitGC, SigScm_FinalizeGC,
	     SigScm_NewObjFromHeap): new func
	  - (ScmObjHeap, gc_protected_var,
	     SCM_UNMARKER, SCM_INITIAL_MARKER, SCM_IS_MARKED,
	     SCM_IS_UNMARKED, SCM_DO_MARK, SCM_DO_UNMARK,
	     SCM_MARK_CORRUPTED, SCM_HEAP_SIZE,
	     scm_heap_num, scm_heaps, scm_freelist,
	     scm_cur_marker, save_regs_buf, scm_gc_protect_stack,
	     protected_var_list, malloc_aligned, allocate_heap,
	     add_heap, finalize_heap, gc_preprocess, gc_mark_and_sweep,
	     mark_obj, is_pointer_to_heap, gc_mark_protected_var,
	     gc_mark_locations_n, gc_mark_locations, gc_mark,
	     sweep_obj, gc_sweep, finalize_protected_var,
	     SigScm_GC_Protect, SigScm_GC_Unprotect,
	     SigScm_GC_ProtectStackInternal, SigScm_GC_ProtectStack,
	     SigScm_GC_UnprotectStack): moved from storage-gc.c
	
	* sigscheme/sigscheme.h
	  - reorganize file section
	
	* sigscheme/Makefile.am
	  - add storage-gc.c
	
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (SigScm_PortNewline): Add SCM_PORT_FLUSH()
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/datas.c
	  - (SCM_MARK_CORRUPT): renamed from SCM_MARK_CORRUPTED
	  - (gc_sweep): use SCM_MARK_CORRUPTED instead of SCM_MARK_CORRUPT
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* Move symbol table handling code to storage-symbol.c
	
	* sigscheme/sigschemeinternal.h
	  - (NAMEHASH_SIZE): moved from datas.c
	  - (SigScm_InitSymbol, SigScm_FinalizeSymbol)
	    : new func
	
	* sigscheme/storage-symbol.c
	  - (SigScm_InitSymbol, SigScm_FinalizeSymbol)
	    : new func
	  - (scm_symbol_hash): renamed from symbol_hash and now
	    declared in storage-symbol.c
	  - (initialize_symbol_hash, finalize_symbol_hash,
	     symbol_name_hash, Scm_Intern): moved from datas.c
	
	* sigscheme/datas.c
	  - (NAMEHASH_SIZE): moved to sigschemeinternal.h
	  - (scm_symbol_hash): renamed from symbol_hash and now
	    declared in storage-symbol.c
	  - (initialize_symbol_hash, finalize_symbol_hash,
	     symbol_name_hash, Scm_Intern): moved to storage-symbol.c
	  - (SigScm_InitStorage): call SigScm_InitSymbol
	  - (SigScm_FinalizeStorage): call SigScm_FinalizeSymbol
	
	* sigscheme/Makefile.am
	  - add storage-symbol.c
	
	* sigscheme/sigscheme.h
	  - update comment
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* Move continuation related functions to storage-continuation.c
	
	* sigscheme/sigschemeinternal.h
	  - (INVALID_CONTINUATION_JMPENV,
	     CONTINUATION_JMPENV,
	     CONTINUATION_SET_JMPENV,
	     CONTINUATION_DYNEXT,
	     CONTINUATION_SET_DYNEXT): moved from data.c
	  - (SigScm_InitContinuation,
	     SigScm_FinalizeContinuation): new func
	
	* sigscheme/datas.c
	  - (INVALID_CONTINUATION_JMPENV,
	     CONTINUATION_JMPENV,
	     CONTINUATION_SET_JMPENV,
	     CONTINUATION_DYNEXT,
	     CONTINUATION_SET_DYNEXT): moved to sigschemeinternal.h
	  - (scm_current_dynamic_extent): renamed from current_dynamic_extent
	     and now declared in storage-continuation.c
	  - (continuation_thrown_obj, continuation_stack,
	     initialize_dynamic_extent, finalize_dynamic_extent,
	     wind_onto_dynamic_extent, unwind_dynamic_extent,
	     enter_dynamic_extent, exit_dynamic_extent,
	     initialize_continuation_env, finalize_continuation_env,
	     continuation_stack_push, continuation_stack_pop,
	     continuation_stack_unwind): moved to storage-continuation.c
	  - (SigScm_InitStorage): call SigScm_InitContinuation
	  - (SigScm_FinalizeStorage): call SigScm_FinalizeContinuation
	
	* sigscheme/storage-continuation.c
	  - new file
	  - (continuation_thrown_obj, continuation_stack,
	     initialize_dynamic_extent, finalize_dynamic_extent,
	     wind_onto_dynamic_extent, unwind_dynamic_extent,
	     enter_dynamic_extent, exit_dynamic_extent,
	     initialize_continuation_env, finalize_continuation_env,
	     continuation_stack_push, continuation_stack_pop,
	     continuation_stack_unwind): moved from datas.c
	  - (scm_current_dynamic_extent): renamed from current_dynamic_extent
	     and now declared in storage-continuation.c
	
	* sigscheme/Makefile.am
	  - add storage-continuation.c
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/strport.c
	  - (istrport_close, ostrport_close): Move the responsibility freeing
	    port->str to finalizer
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SigScm_PortPrintf, SigScm_VPortPrintf, SigScm_PortNewline,
	    SigScm_ErrorPrintf, SigScm_VErrorPrintf, SigScm_ErrorNewline):
	    Move to sigscheme.h
	* sigscheme/sigscheme.h
	  - (SigScm_PortPrintf, SigScm_VPortPrintf, SigScm_PortNewline,
	    SigScm_ErrorPrintf, SigScm_VErrorPrintf, SigScm_ErrorNewline):
	    Moved from sigschemeinternal.h
	* sigscheme/error.c
	  - (SigScm_PortPrintf, SigScm_VPortPrintf, SigScm_PortNewline,
	    SigScm_ErrorPrintf, SigScm_VErrorPrintf, SigScm_ErrorNewline):
	    Move to sigscheme.h
	* sigscheme/io.c
	  - (SigScm_PortPrintf, SigScm_VPortPrintf, SigScm_PortNewline,
	    SigScm_ErrorPrintf, SigScm_VErrorPrintf, SigScm_ErrorNewline):
	    Moved from error.c
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_char): Remove a FIXME comment described with misunderstanding
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/mbcport.c
	  - (mbcport_get_char): Make line number counting platform-independent
	* sigscheme/io.c
	  - (ScmOp_newline): Make newline printing platform-independent
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_NEWLINE_STR): New macro
	* sigscheme/sigschemeinternal.h
	  - (SigScm_PortNewline): New function decl
	* sigscheme/error.c
	  - (SigScm_PortNewline): New function
	  - (SigScm_ErrorNewline): Make platform-independent
	* sigscheme/sbcport.c
	  - (basecport_get_char): Make line number counting
	    platform-independent
	* sigscheme/main.c
	  - (repl_loop): Make newline printing platform-independent
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (PORTBUFFER_SIZE, scm_portbuffer): Removed
	* sigscheme/datas.c
	  - (SigScm_InitStorage, SigScm_FinalizeStorage): Remove
	    scm_portbuffer handling
	* sigscheme/debug.c
	  - (scm_portbuffer): Removed
	  - (print_ScmObj_internal, print_char, print_string, print_list):
	    Simplify with SigScm_PortPrintf()
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_DYNAMIC_CAST): Add port-class arg
	  - (SCM_CHARPORT_DYNAMIC_CAST, SCM_BYTEPORT_DYNAMIC_CAST): New macro
	  - (SCM_PORT_TRY_DYNAMIC_CAST): New macro
	* sigscheme/mbcport.c
	  - (mbcport_dyn_cast): Remove exception handling
	* sigscheme/sbcport.c
	  - (basecport_dyn_cast, sbcport_dyn_cast): Ditto
	* sigscheme/fileport.c
	  - (fileport_dyn_cast): Ditto
	* sigscheme/strport.c
	  - (istrport_dyn_cast, ostrport_dyn_cast): Ditto
	  - (ScmInputStrPort_ref_opaque, ScmOutputStrPort_str,
	    ScmOutputStrPort_ref_opaque): Fix exception handling
	* sigscheme/operations-srfi6.c
	  - (ScmOp_SRFI6_get_output_string): Fix incorrect exception handling
	    and error message
	* sigscheme/read.c
	  - (read_list): Fix unwanted termination
	
2005-11-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_list): Cosmetic change
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* introduce new Port scheme as default 
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* revert change of r1949 with following command
	
	$ svn merge -r 1949:1948 symbol.c
	$ svn merge -r 1949:1948 sigschemeinternal.h
	$ svn merge -r 1949:1948 datas.c
	$ svn merge -r 1949:1948 sigscheme.c
	$ svn merge -r 1949:1948 sigscheme.h
	$ svn merge -r 1949:1948 Makefile.am
	$ svn del symbol.c
	$ svn del constants.c
	$ svn del gc.c
	
	
2005-11-03 kzk <mover@hct.zaq.ne.jp>
	
	* Split datas.c -> datas.c, constants.c, symbol.c, gc.c
	
	* sigscheme/Makefile.am
	  - add constants.c, symbol.c, datas.c, gc.c
	
	* sigscheme/sigscheme.h
	  - (SigScm_InitGC,
	     SigScm_FinalizeGC,
	     SigScm_NewObj,
	     SigScm_InitSymbol,
	     SigScm_FinalizeSymbol,
	     SigScm_InitConstants,
	     SigScm_FinalizeConstants): new func
	
	* sigscheme/sigschemeinternal.h
	  - (NAMEHASH_SIZE): new macro
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): exec SigScm_InitConstants,
	    SigScm_InitGC, SigScm_InitSymbol
	  - (SigScm_Finalize): exec SigScm_FinalizeConstants,
	    SigScm_FinalizeGC, SigScm_FinalizeSymbol
	
	* sigscheme/symbol.c
	  - (scm_symbol_hash,
	     initialize_symbol_hash,
	     finalize_symbol_hash,
	     symbol_name_hash,
	     Scm_Intern): moved from datas.c
	  - (SigScm_InitSymbol,
	     SigScm_FinalizeSymbol): new func
	
	* sigscheme/constants.c
	  - (SCM_CONSTANT_BIND_SUBSTANCE,
	     SigScm_null, SigScm_true, SigScm_false, SigScm_eof,
	     SigScm_unbound, SigScm_undef,
	     SigScm_null_cell, SigScm_true_cell, SigScm_false_cell,
	     SigScm_eof_cell, SigScm_unbound_cell, SigScm_undef_cell)
	     : moved from datas.c
	  - (SigScm_InitConstants,
	     SigScm_FinalizeConstants): new func
	
	* sigscheme/gc.c
	  - (SCM_UNMARKER, SCM_INITIAL_MARKER, SCM_IS_MARKED,
	     SCM_IS_UNMARKED, SCM_DO_MARK, SCM_DO_UNMARK,
	     SCM_MARK_CORRUPTED,  <= renamed from SCM_MARK_CORRUPT
	     ScmObjHeap,
	     gc_protected_var, SCM_HEAP_SIZE, scm_heap_num,
	     scm_heaps, scm_freelist, scm_cur_marker,
	     save_regs_buf, scm_stack_start_pointer,
	     volatile scm_gc_protect_stack, protected_var_list
	     scm_symbol_hash, malloc_aligned, allocate_heap,
	     add_heap, finalize_heap, gc_preprocess,
	     gc_mark_and_sweep, mark_obj, is_pointer_to_heap,
	     gc_mark_protected_var, gc_mark_locations_n,
	     gc_mark_locations, gc_mark, sweep_obj, gc_sweep,
	     finalize_protected_var, SigScm_GC_ProtectStackInternal,
	     SigScm_GC_ProtectStack, SigScm_GC_UnprotectStack)
	     : moved from datas.c
	  - (SigScm_InitGC, SigScm_FinalizeGC): new func
	
	* sigscheme/datas.c
	  - (scm_symbol_hash,
	     initialize_symbol_hash,
	     finalize_symbol_hash,
	     symbol_name_hash,
	     Scm_Intern): moved to symbol.c
	  - (SCM_CONSTANT_BIND_SUBSTANCE,
	     SigScm_null, SigScm_true, SigScm_false, SigScm_eof,
	     SigScm_unbound, SigScm_undef,
	     SigScm_null_cell, SigScm_true_cell, SigScm_false_cell,
	     SigScm_eof_cell, SigScm_unbound_cell, SigScm_undef_cell)
	     : moved to constants.c
	  - (SCM_UNMARKER, SCM_INITIAL_MARKER, SCM_IS_MARKED,
	     SCM_IS_UNMARKED, SCM_DO_MARK, SCM_DO_UNMARK,
	     SCM_MARK_CORRUPTED,  <= renamed from SCM_MARK_CORRUPT
	     ScmObjHeap,
	     gc_protected_var, SCM_HEAP_SIZE, scm_heap_num,
	     scm_heaps, scm_freelist, scm_cur_marker,
	     save_regs_buf, scm_stack_start_pointer,
	     volatile scm_gc_protect_stack, protected_var_list
	     scm_symbol_hash, malloc_aligned, allocate_heap,
	     add_heap, finalize_heap, gc_preprocess,
	     gc_mark_and_sweep, mark_obj, is_pointer_to_heap,
	     gc_mark_protected_var, gc_mark_locations_n,
	     gc_mark_locations, gc_mark, sweep_obj, gc_sweep,
	     finalize_protected_var, SigScm_GC_ProtectStackInternal,
	     SigScm_GC_ProtectStack, SigScm_GC_UnprotectStack)
	     : moved to gc.c
	
	
2005-11-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit simplifies the codes based on my style. Feel free
	  to revert if not favor
	
	* sigscheme/script/build_func_table.rb
	  - (TYPE2PREFIX): New constant
	  - ($FUNC_TYPE_INVALID, $FUNC_TYPE_SYNTAX, $FUNC_TYPE_PROCEDURE,
	    $FUNC_TYPE_REDUCTION, $SCM2C_FUNCNAME_RULE): Rename to constant
	  - (FUNC_TYPE_INVALID, FUNC_TYPE_SYNTAX, FUNC_TYPE_PROCEDURE,
	    FUNC_TYPE_REDUCTION, SCM2C_FUNCNAME_RULE): Renamed from global
	    variable
	  - (guess_c_funcname, search_declare_function):
	    * Simplify
	    * Follow the renamings
	
2005-11-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/script/build_func_table.rb
	  - Make hash-bang portable
	  - ($SCM2C_FUNCNAME_RULE): Add rule for '%%' prefix
	
2005-11-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/script/build_func_table.rb
	  - Make hash-bang portable
	  - ($SCM2C_FUNCNAME_RULE): Complement some rules
	
2005-11-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_not_pairp): Fix a typo
	
	* sigscheme/script/build_func_table.rb
	  - Make hash-bang portable
	
2005-11-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - (PROMPT_STR): New macro
	  - (SIOD_STRING): Rename to FEATURE_ID_SIOD
	  - (FEATURE_ID_SIOD): Renamed from SIOD_STRING to indicate logical
	    meaning
	  - (feature_id_siod): New static variable
	  - (repl):
	    * Remove comments for obvious operation
	    * Add initialization for feature_id_siod
	  - (repl_loop):
	    * Simplify and make logical meanings clear
	    * Replace printf() with SigScm_PortPrintf()
	  - (is_repl_prompt, is_repl_show_result): Simplify
	
2005-11-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_eof_val, ScmOp_undefine): New function decl
	* sigscheme/operations-siod.c
	  - (ScmOp_eof_val, ScmOp_undefine): New function
	  - (SigScm_Initialize_SIOD): Add initialization for eof-val and
	    undefine
	
	* sigscheme/debug.c
	  - (print_constant): Support SIOD-compatible '(eof)' for eof object
	
	* sigscheme/datas.c
	  - (SigScm_InitStorage): Support SIOD-compatible '1' for #t
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/main.c
	  - (repl_loop): implement error aware repl loop by using
	    SRFI-34 feature
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* Simplify repl
	
	* sigscheme/main.c
	  - (repl): split into repl_loop, is_repl_prompt, is_repl_show_result
	  - (repl_loop,
	     is_repl_prompt,
	     is_repl_show_result): new func
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* Not to use SigScm_ErrorObj
	  - use ERR_OBJ instead
	* Fix error message inconsistency
	  - remove trailing ":" or ": " or " "
	
	* sigscheme/operations.c
	  - (ScmOp_append,
	     ScmOp_list_tail,
	     ScmOp_list_ref,
	     ScmOp_list2string)
	    : remove unnecessary characters in ERR_OBJ
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_list_copy,
	     ScmOp_SRFI1_circular_list,
	     ScmOp_SRFI1_take,
	     ScmOp_SRFI1_drop,
	     ScmOp_SRFI1_last,
	     ScmOp_SRFI1_last_pair,
	     ScmOp_SRFI1_concatenate)
	    : remove unnecessary characters in ERR_OBJ
	* sigscheme/operations-srfi2.c
	  - (ScmOp_SRFI2_and_let_star)
	    : remove unnecessary characters in ERR_OBJ
	* sigscheme/eval.c
	  - (Scm_ExtendEnvironment.
	     Scm_AddEnvironment,
	     Scm_LookupEnvironment,
	     call_closure,
	     Scm_SymbolValue,
	     qquote_internal)
	    - add DECLARE_INTERNAL_FUNCTION
	    - use ERR_OBJ instead of SigScm_ErrorObj
	    - fix error message suitable for ERR_OBJ
	  - (ScmExp_cond,
	     ScmExp_let,
	     ScmExp_letstar,
	     ScmExp_letrec,
	     ScmExp_define,
	     ScmExp_scheme_report_environment,
	     ScmExp_null_environment)
	    - use ERR_OBJ instead of SigScm_ErrorObj
	    - fix error message suitable for ERR_OBJ
	    
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* Add new directory sigscheme/script
	* Add new script file to build function table
	
	* sigscheme/script/build_func_table.rb
	  - new file
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* fix to build issue wrongly committed in r1937
	* use ASSERT_*P
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): change ScmExp_quote from ScmOp_quote
	* sigscheme/eval.c
	  - (ScmExp_quasiquote): restore "ret" variable
	  - (ScmOp_scheme_report_environment):
	    - use ASSERT_INTP instead of !INTP
	  - (ScmOp_null_environment):
	    - use ASSERT_INTP instead of !INTP
	
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* Fix naming inconsistency
	* Add missing DECLARE_FUNCTION in eval.c
	
	* sigscheme/sigscheme.h
	  - (ScmExp_quote): renamed from ScmOp_quote
	  - (ScmExp_quasiquote): renamed from ScmOp_quasiquote
	  - (ScmExp_unquote): renamed from ScmOp_unquote
	  - (ScmExp_unquote_splicing): renamed from ScmOp_unquote_splicing
	  - (ScmExp_delay): renamed from ScmOp_delay
	* sigscheme/eval.c
	  - (ScmOp_apply): add missing DECLARE_FUNCTION
	  - (ScmExp_setd): add missing DECLARE_FUNCTION
	  - (ScmExp_cond): add missing DECLARE_FUNCTION
	  - (ScmExp_case): add missing DECLARE_FUNCTION
	  - (ScmExp_let): add missing DECLARE_FUNCTION
	  - (ScmExp_letstar): add missing DECLARE_FUNCTION
	  - (ScmOp_scheme_report_environment): add missing DECLARE_FUNCTION
	  - (ScmOp_null_environment): add missing DECLARE_FUNCTION
	  - (ScmOp_interaction_environment): add missing DECLARE_FUNCTION
	
	  - (ScmExp_quote):
	    - renamed from ScmOp_quote
	    - add missing DECLARE_FUNCTION
	  - (ScmExp_quasiquote):
	    - renamed from ScmOp_quasiquote
	    - add missing DECLARE_FUNCTION
	  - (ScmExp_unquote):
	    - renamed from ScmOp_unquote
	    - add missing DECLARE_FUNCTION
	  - (ScmExp_unquote_splicing):
	    - renamed from ScmOp_unquote_splicing
	    - add missing DECLARE_FUNCTION
	  - (ScmExp_delay)
	    - renamed from ScmOp_delay
	    - add missing DECLARE_FUNCTION
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal)
	    - (ScmExp_quote): renamed from ScmOp_quote
	    - (ScmExp_quasiquote): renamed from ScmOp_quasiquote
	    - (ScmExp_unquote): renamed from ScmOp_unquote
	    - (ScmExp_unquote_splicing): renamed from ScmOp_unquote_splicing
	    - (ScmExp_delay): renamed from ScmOp_delay
	
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* Fix naming inconsistency
	  - introducenew rule: "!" -> d (indicates destructive)
	
	* sigscheme/sigscheme.h
	  - (ScmExp_setd): renamed from ScmExp_set
	  - (ScmExp_letstar): renamed from ScmExp_let_star
	  - (ScmOp_set_card): renamed from ScmOp_set_card
	  - (ScmOp_set_cdrd): renamed from ScmOp_set_cdrd
	  - (ScmOp_string_filld): renamed from ScmOp_string_fill
	  - (ScmOp_vector_setd): renamed from ScmOp_vector_set
	  - (ScmOp_vector_filld): renamed from ScmOp_vector_filld
	* sigscheme/sigscheme.c
	  - (ScmExp_setd): renamed from ScmExp_set
	  - (ScmExp_letstar): renamed from ScmExp_let_star
	  - (ScmOp_set_card): renamed from ScmOp_set_card
	  - (ScmOp_set_cdrd): renamed from ScmOp_set_cdrd
	  - (ScmOp_string_filld): renamed from ScmOp_string_fill
	  - (ScmOp_vector_setd): renamed from ScmOp_vector_set
	  - (ScmOp_vector_filld): renamed from ScmOp_vector_filld
	* sigscheme/eval.c
	  - (ScmExp_setd): renamed from ScmExp_set
	  - (ScmExp_letstar): renamed from ScmExp_let_star
	* sigscheme/operations.c
	  - (ScmOp_set_card): renamed from ScmOp_set_card
	  - (ScmOp_set_cdrd): renamed from ScmOp_set_cdrd
	  - (ScmOp_string_filld): renamed from ScmOp_string_fill
	  - (ScmOp_vector_setd): renamed from ScmOp_vector_set
	  - (ScmOp_vector_filld): renamed from ScmOp_vector_filld
	  - (ScmOp_make_string): use ScmOp_string_filld
	
	
2005-11-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_car): fixed typo of DECLARE_FUNCTION
	  - (ScmOp_string2list): fixed typo of DECLARE_FUNCTION
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (lookup_frame): Fix broken frame handling that causes SEGV
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (Scm_MakeSharedFilePort): New function decl
	* sigscheme/io.c
	  - (Scm_MakeSharedFilePort): New function
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Simplify with Scm_MakeSharedFilePort()
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/fileport.h
	  - (ScmFilePort_new_shared): New function decl
	* sigscheme/fileport.c
	  - (OK): New macro
	  - (struct ScmFilePort_): Add member 'ownership'
	  - (fileport_new_internal): New static function inherits codes of
	    ScmFilePort_new()
	  - (ScmFilePort_new): Reimplement as wrapper to fileport_new_internal()
	  - (ScmFilePort_new_shared): New function
	  - (fileport_close): Add ownership-aware fclose() handling
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Fix unwanted fclose() of stdio streams
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_CHARCELL_SIZE): New macro
	  - (struct ScmCell_): Add optimal character representation as
	    placeholder
	* sigscheme/datas.c
	  - Add compile-time safety check for SCM_MB_MAX_LEN
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.h
	  - (SCM_MB_MAX_LEN): New macro
	* sigscheme/datas.c
	  - (Scm_NewChar): Allow multibyte char
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_string_ref): Correct logical meaning
	
	* sigscheme/test/test-string.scm
	  - Fix a typo
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (ScmOp_read_char, ScmOp_peek_char): Fix misuse of Scm_NewChar()
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sbcport.c
	  - (Scm_sbcport_init): Simplify for human
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/strport.c
	* sigscheme/fileport.c
	  - Cosmetic change
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_NORETURN): New macro
	  - (SigScm_Error, SigScm_ErrorObj): Modify with SCM_NORETURN
	* sigscheme/error.c
	  - (throw_exception):
	    * Ditto
	    * ensure exit(3) at last to suppress warning about noreturn
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR): New macro to override
	    same-named one defined in baseport.h
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds filename information support to ScmFilePort
	
	* sigscheme/fileport.h
	  - (ScmFilePort_new): Add new arg 'aux_info'
	  - (ScmFilePort_open_input_file, ScmFilePort_open_output_file): New
	    function decl
	* sigscheme/fileport.c
	  - (struct ScmFilePort_): Add member 'aux_info'
	  - (ScmFilePort_new): Add new arg 'aux_info' and handlings
	  - (ScmFilePort_open_input_file, ScmFilePort_open_output_file): New
	    function
	  - (fileport_close, fileport_inspect): Add aux_info handlings
	* sigscheme/io.c
	  - (ScmOp_open_input_file, ScmOp_open_output_file): Support filename
	    info for SCM_USE_NEWPORT
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Ditto
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_ALLOC, SCM_PORT_DYNAMIC_CAST, SCM_CHARPORT_CLOSE,
	    SCM_CHARPORT_ENCODING, SCM_CHARPORT_INSPECT,
	    SCM_CHARPORT_GET_CHAR, SCM_CHARPORT_PEEK_CHAR,
	    SCM_CHARPORT_CHAR_READYP, SCM_CHARPORT_VPRINTF, SCM_CHARPORT_PUTS,
	    SCM_CHARPORT_PUT_CHAR, SCM_CHARPORT_FLUSH, SCM_BYTEPORT_CLOSE,
	    SCM_BYTEPORT_INSPECT, SCM_BYTEPORT_GET_BYTE,
	    SCM_BYTEPORT_PEEK_BYTE, SCM_BYTEPORT_BYTE_READYP,
	    SCM_BYTEPORT_VPRINTF, SCM_BYTEPORT_PUTS, SCM_BYTEPORT_WRITE,
	    SCM_BYTEPORT_FLUSH): Fix operator precedence problem
	
	* sigscheme/sbcport.c
	  - (ScmBaseCharPort_inspect, sbcport_inspect): Cast appropriately
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds #<iport sb US-ASCII file> style port object
	  inspection
	
	* sigscheme/sigscheme.h
	  - (SCM_PORT_INSPECT): New macro
	* sigscheme/baseport.h
	  - (SCM_CHARPORT_INSPECT, SCM_BYTEPORT_INSPECT): New macro
	  - (ScmCharPortMethod_inspect, ScmBytePortMethod_inspect): New type
	  - (struct ScmCharPortVTbl_, struct ScmBytePortVTbl_): Add member
	    'inspect'
	* sigscheme/sbcport.h
	  - (ScmBaseCharPort_inspect): New function decl
	* sigscheme/sbcport.c
	  - (ScmBaseCharPort_inspect): New function
	  - (basecport_inspect, sbcport_inspect): New static function
	  - (ScmBaseCharPort_vtbl): Add member 'inspect'
	  - (Scm_sbcport_init): Add initialization for vtbl.inspect
	* sigscheme/mbcport.c
	  - (mbcport_inspect): New static function
	  - (Scm_mbcport_init): Add initialization for vtbl.inspect
	* sigscheme/fileport.c
	  - (fileport_inspect): New static function
	  - (ScmFilePort_vtbl): Add member 'inspect'
	* sigscheme/strport.c
	  - (istrport_inspect, ostrport_inspect): New static function
	  - (ScmInputStrPort_vtbl, ScmOutputStrPort_vtbl): Add member
	    'inspect'
	* sigscheme/debug.c
	  - (print_port): Add the inspection
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (print_port): Add bidirectional port support for SCM_USE_NEWPORT
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_DEBUG_PORT): New macro
	* sigscheme/baseport.h
	  - (SCM_DEBUG_PORT): New macro
	* sigscheme/sigschemetype.h
	  - (SCM_PORT_LINE): Remove for SCM_USE_NEWPORT
	* sigscheme/sigschemetype-compact.h
	  - (SCM_PORT_LINE): Ditto
	* sigscheme/sbcport.h
	  - (struct ScmBaseCharPort_): Add member 'linenum'
	  - (ScmBaseCharPort_line_number): New function decl
	* sigscheme/sbcport.c
	  - (ScmBaseCharPort_line_number): New function
	  - (ScmBaseCharPort_construct, basecport_get_char): Add line number support
	* sigscheme/mbcport.c
	  - (mbcport_get_char): Ditto
	* sigscheme/read.c
	  - (read_list): Ditto
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sbcport.h
	  - (ScmSingleByteCharPort): Moved from sbcport.c
	  - (ScmBaseCharPort_construct, ScmSingleByteCharPort_construct): New
	    function
	* sigscheme/sbcport.c
	  - (ScmSingleByteCharPort): Move to sbcport.h
	  - (ScmBaseCharPort_construct, ScmSingleByteCharPort_construct): New
	    function
	  - (ScmSingleByteCharPort_new): Simplify
	* sigscheme/mbcport.h
	  - (ScmMultiByteCharPort): Moved from mbcport.c
	  - (ScmMultiByteCharPort_construct): New function decl
	* sigscheme/mbcport.c
	  - (ScmMultiByteCharPort): Move to mbcport.h
	  - (ScmMultiByteCharPort_construct): New function
	  - (ScmMultiByteCharPort_new): Simplify
	* sigscheme/fileport.c
	  - (ScmFilePort_new): Simplify with SCM_PORT_ALLOC()
	* sigscheme/strport.c
	  - (istrport_new, ScmOutputStrPort_new): Ditto
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_ALLOC): Fix invalid arg for SCM_PORT_ERROR_NOMEM()
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_CREATOR_BODY, SCM_BYTEPORT_CREATOR_BODY,
	    SCM_CHARPORT_CREATOR_BODY): Removed due to design error
	  - (SCM_PORT_ALLOC): New macro
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_CREATOR_BODY, SCM_BYTEPORT_CREATOR_BODY,
	    SCM_CHARPORT_CREATOR_BODY): New macro
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This comit ports the new abstract port implementation from
	  r1911. Completely not tested.
	
	* sigscheme/sigschemetype.h
	  - (struct _ScmPortInfo, ScmPortInfo, enum ScmPortDirection, enum
	    ScmPortType): Disable when SCM_USE_NEWPORT
	  - (enum ScmPortFlag): New type
	  - (SCM_PORT_FLAG, SCM_PORT_SET_FLAG, SCM_PORT_IMPL,
	    SCM_PORT_SET_IMPL): New macro
	  - (SCM_PORT_LINE): Define as dummy when SCM_USE_NEWPORT
	  - (SCM_PORT_PORTDIRECTION, SCM_PORT_SET_PORTDIRECTION,
	    SCM_PORT_PORTINFO, SCM_PORT_SET_PORTINFO, SCM_PORT_PORTTYPE,
	    SCM_PORT_SET_PORTTYPE, SCM_PORT_UNGOTTENCHAR,
	    SCM_PORT_SET_UNGOTTENCHAR, SCM_PORT_GETC_FUNC,
	    SCM_PORT_SET_GETC_FUNC, SCM_PORT_PRINT_FUNC,
	    SCM_PORT_SET_PRINT_FUNC, SCM_PORT_FILE, SCM_PORT_SET_FILE,
	    SCM_PORT_FILENAME, SCM_PORT_SET_FILENAME, SCM_PORT_SET_LINE,
	    SCM_PORT_STR, SCM_PORT_SET_STR, SCM_PORT_STR_CURRENTPOS,
	    SCM_PORT_SET_STR_CURRENTPOS): Disable when SCM_USE_NEWPORT
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (skip_comment_and_space): Cosmetic change
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit enables the new abstract port implementation. Basic
	  tests are passed. sigschemetype-compact.h is not supported yet
	
	* sigscheme/config.h
	  - (SCM_USE_NEWPORT): New macro
	  - Enable SCM_USE_SRFI6 if SCM_USE_NEWPORT is enabled
	* sigscheme/sigschemetype.h
	  - (struct _ScmPortInfo, ScmPortInfo, enum ScmPortDirection, enum
	    ScmPortType): Disable when SCM_USE_NEWPORT
	  - (enum ScmPortFlag): New type
	  - (struct ScmCell_): Support SCM_USE_NEWPORT
	  - (SCM_PORT_FLAG, SCM_PORT_SET_FLAG, SCM_PORT_IMPL,
	    SCM_PORT_SET_IMPL): New macro
	  - (SCM_PORT_LINE): Define as dummy when SCM_USE_NEWPORT
	  - (SCM_PORT_PORTDIRECTION, SCM_PORT_SET_PORTDIRECTION,
	    SCM_PORT_PORTINFO, SCM_PORT_SET_PORTINFO, SCM_PORT_PORTTYPE,
	    SCM_PORT_SET_PORTTYPE, SCM_PORT_UNGOTTENCHAR,
	    SCM_PORT_SET_UNGOTTENCHAR, SCM_PORT_GETC_FUNC,
	    SCM_PORT_SET_GETC_FUNC, SCM_PORT_PRINT_FUNC,
	    SCM_PORT_SET_PRINT_FUNC, SCM_PORT_FILE, SCM_PORT_SET_FILE,
	    SCM_PORT_FILENAME, SCM_PORT_SET_FILENAME, SCM_PORT_SET_LINE,
	    SCM_PORT_STR, SCM_PORT_SET_STR, SCM_PORT_STR_CURRENTPOS,
	    SCM_PORT_SET_STR_CURRENTPOS): Disable when SCM_USE_NEWPORT
	* sigscheme/sigscheme.h
	  - (SCM_ASSERT_LIVE_PORT, SCM_PORT_CLOSE_IMPL, SCM_PORT_ENCODING,
	    SCM_PORT_GET_CHAR, SCM_PORT_PEEK_CHAR, SCM_PORT_CHAR_READYP,
	    SCM_PORT_VPRINTF, SCM_PORT_PUTS, SCM_PORT_PUT_CHAR,
	    SCM_PORT_FLUSH): New macro
	  - (SCM_PORT_GETC, SCM_PORT_UNGETC, SCM_PORT_PRINT): Support
	    SCM_USE_NEWPORT as backward compatibility
	  - (Scm_NewPort, SigScm_GC_Unprotect): New function decl
	  - (Scm_NewFilePort, Scm_NewStringPort): Disable when SCM_USE_NEWPORT
	  - (ScmOp_peek_char, ScmOp_char_readyp): Modify function type
	    appropriately
	* sigscheme/sigschemeinternal.h
	  - (SigScm_PortPrintf, SigScm_VPortPrintf): New function decl
	* sigscheme/io.c
	  - include sbcport.c and fileport.c
	  - (ScmOp_input_portp, ScmOp_output_portp, ScmOp_open_input_file,
	    ScmOp_open_output_file, ScmOp_close_input_port,
	    ScmOp_close_output_port): Support SCM_USE_NEWPORT
	  - (ScmOp_read_char):
	    * Ditto
	    * Fix EOF handling (in SCM_USE_NEWPORT only)
	  - (ScmOp_peek_char, ScmOp_char_readyp): Implement (in
	    SCM_USE_NEWPORT only) and Modify function type appropriately
	* sigscheme/datas.c
	  - (sweep_obj): Support SCM_USE_NEWPORT
	  - (Scm_NewPort, SigScm_GC_Unprotect): New function
	  - (fileport_getc, fileport_print, stringport_getc,
	    stringport_print): Disable when SCM_USE_NEWPORT
	  - (Scm_NewFilePort, Scm_NewStringPort): Disable when SCM_USE_NEWPORT
	* sigscheme/read.c
	  - (enum LexerState): New type
	  - (DISCARD_LOOKAHEAD): New macro
	  - (skip_comment_and_space, read_sexpression, read_list, read_word,
	    read_char_sequence): Support SCM_USE_NEWPORT
	* sigscheme/debug.c
	  - (SigScm_WriteToPort, SigScm_DisplayToPort, print_port): Support
	    SCM_USE_NEWPORT
	* sigscheme/error.c
	  - (SigScm_PortPrintf, SigScm_VPortPrintf): New function
	  - (SigScm_VErrorPrintf, SigScm_ErrorNewline): Support SCM_USE_NEWPORT
	* sigscheme/operations-srfi6.c
	  - include strport.c
	  - (SigScm_Initialize_SRFI6): Add Scm_strport_init()
	  - (ScmOp_SRFI6_open_input_string, ScmOp_SRFI6_open_output_string,
	    ScmOp_SRFI6_get_output_string): Support SCM_USE_NEWPORT
	  - (istrport_finalize): New static function
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal):
	    * Support SCM_USE_NEWPORT
	    * Add initialization for peek-char and char-ready?
	  - (Scm_eval_c_string_internal): Support SCM_USE_NEWPORT
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/strport.h
	  - (ScmInputStrPort_finalizer, ScmOutputStrPort_finalizer): New type
	  - (ScmInputStrPort_new, ScmInputStrPort_new_copying,
	    ScmInputStrPort_new_const, ScmOutputStrPort_new): Add finalizer arg
	* sigscheme/strport.c
	  - (struct ScmInputStrPort_, struct ScmOutputStrPort_, istrport_new,
	    ScmInputStrPort_new, ScmInputStrPort_new_copying,
	    ScmInputStrPort_new_const, istrport_close, ScmOutputStrPort_new,
	    ostrport_close): Add finalizer support
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/strport.h
	  - (ScmInputStrPort_new_copying): Make the arg const
	* sigscheme/strport.c
	  - (ScmInputStrPort_new_copying): Ditto
	
2005-11-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/strport.h
	  - (ScmInputStrPort_new): Change args
	  - (ScmInputStrPort_new_const): New function decl
	* sigscheme/strport.c
	  - (istrport_new): New function renamed from former ScmInputStrPort_new()
	  - (ScmInputStrPort_new, ScmInputStrPort_new_copying): Reform as
	    wrapper to istrport_new()
	  - (ScmInputStrPort_new_const): New function
	
2005-10-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_CHARPORT_PUTS): New macro
	  - (ScmCharPortMethod_puts): New type
	  - (struct ScmCharPortVTbl_): Add new member puts
	* sigscheme/sbcport.c
	  - (basecport_puts): New static function
	  - (ScmBaseCharPort_vtbl): Add new member puts
	
2005-10-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (SigScm_WriteToPort, SigScm_DisplayToPort, print_ScmObj_internal,
	    print_char, print_string): s/SigScm_Error\b/ERR/
	
2005-10-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (ScmOp_call_with_input_file, ScmOp_call_with_output_file,
	    ScmOp_with_input_from_file, ScmOp_with_output_to_file,
	    ScmOp_open_input_fileScmOp_open_output_file):
	    * Simplify
	    * Remove redundant comment for obvious operation
	  - (PREPARE_PORT): New macro
	  - (ScmOp_read, ScmOp_read_char, ScmOp_write, ScmOp_display,
	    ScmOp_newline, ScmOp_write_char):
	    * Simplify with PREPARE_PORT()
	    * Fix invalid fallback to default port when non-port arg is passed
	    * Add superfluous argument check
	
2005-10-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit implements multibyte character port as ScmCharPort
	
	* sigscheme/encoding.h
	  - (SCM_CHARCODEC_ENCODING, SCM_CHARCODEC_SCAN_CHAR,
	    SCM_CHARCODEC_STR2INT, SCM_CHARCODEC_INT2STR): New macro
	  - (struct ScmCharCodecVTbl_, ScmCharCodecVTbl, ScmCharCodec,
	    ScmCharCodecMethod_encoding, ScmCharCodecMethod_scan_char,
	    ScmCharCodecMethod_str2int, ScmCharCodecMethod_int2str): New type
	* sigscheme/mbcport.h
	  - New file
	  - (SCM_MB_MAX_LEN): New macro
	  - (ScmMultiByteCharPort_vptr): New variable decl
	  - (Scm_mbcport_init, ScmMultiByteCharPort_new): New function decl
	* sigscheme/mbcport.c
	  - New file
	  - (HANDLE_MBC_START, SCM_MBCPORT_CLEAR_STATE): New macro
	  - (struct ScmMultiByteCharPort_, ScmMultiByteCharPort): New type
	  - (ScmMultiByteCharPort_vptr): New variable
	  - (ScmMultiByteCharPort_vtbl): New static variable
	  - (Scm_mbcport_init, ScmMultiByteCharPort_new): New function
	  - (mbcport_dyn_cast, mbcport_encoding, mbcport_get_char,
	    mbcport_peek_char, mbcport_char_readyp, mbcport_put_char,
	    mbcport_fill_rbuf): New static function
	
2005-10-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit reorganizes encoding-related things into encoding.h
	
	* sigscheme/encoding.c
	  - #include "encoding.h"
	  - include some other files in portable way
	* sigscheme/sigscheme.h
	  - (Scm_mb_scan_char, Scm_mb_strlen, Scm_mb_bare_c_strlen,
	    Scm_mb_substring, Scm_mb_strref): Move to encoding.h
	* sigscheme/sigschemetype.h
	  - (SCM_MBS_SET_STR, SCM_MBS_GET_STR, SCM_MBS_SET_SIZE,
	    SCM_MBS_GET_SIZE, SCM_MBCINFO_SET_SIZE, SCM_MBCINFO_GET_SIZE,
	    SCM_MBCINFO_CLEAR_STATE, SCM_MBCINFO_SET_STATE,
	    SCM_MBCINFO_GET_STATE, SCM_MBCINFO_CLEAR_FLAG,
	    SCM_MBCINFO_SET_ERROR, SCM_MBCINFO_SET_INCOMPLETE,
	    SCM_MBCINFO_ERRORP, SCM_MBCINFO_INCOMPLETEP, SCM_MBCINFO_INIT,
	    SCM_MBS_GET_STATE, SCM_MBS_SET_STATE, SCM_MBS_CLEAR_STATE,
	    SCM_MBS_INIT, SCM_MBS_SKIP_CHAR): Move to encoding.h
	  - (ScmMultibyteState, ScmMultibyteCharInfo, ScmMultibyteString): Ditto
	* sigscheme/sigschemetype-compact.h
	  - (SCM_MBS_SET_STR, SCM_MBS_GET_STR, SCM_MBS_SET_SIZE,
	    SCM_MBS_GET_SIZE, SCM_MBCINFO_SET_SIZE, SCM_MBCINFO_GET_SIZE,
	    SCM_MBCINFO_CLEAR_STATE, SCM_MBCINFO_SET_STATE,
	    SCM_MBCINFO_GET_STATE, SCM_MBCINFO_CLEAR_FLAG,
	    SCM_MBCINFO_SET_ERROR, SCM_MBCINFO_SET_INCOMPLETE,
	    SCM_MBCINFO_ERRORP, SCM_MBCINFO_INCOMPLETEP, SCM_MBCINFO_INIT,
	    SCM_MBS_GET_STATE, SCM_MBS_SET_STATE, SCM_MBS_CLEAR_STATE,
	    SCM_MBS_INIT, SCM_MBS_SKIP_CHAR): Move to encoding.h
	  - (ScmMultibyteState, ScmMultibyteCharInfo, ScmMultibyteString): Ditto
	* sigscheme/encoding.h
	  - New file
	  - (SCM_ENCODING_USE_WITH_SIGSCHEME): New macro
	  - (SCM_MBS_SET_STR, SCM_MBS_GET_STR, SCM_MBS_SET_SIZE,
	    SCM_MBS_GET_SIZE, SCM_MBCINFO_SET_SIZE, SCM_MBCINFO_GET_SIZE,
	    SCM_MBCINFO_CLEAR_STATE, SCM_MBCINFO_SET_STATE,
	    SCM_MBCINFO_GET_STATE, SCM_MBCINFO_CLEAR_FLAG,
	    SCM_MBCINFO_SET_ERROR, SCM_MBCINFO_SET_INCOMPLETE,
	    SCM_MBCINFO_ERRORP, SCM_MBCINFO_INCOMPLETEP, SCM_MBCINFO_INIT,
	    SCM_MBS_GET_STATE, SCM_MBS_SET_STATE, SCM_MBS_CLEAR_STATE,
	    SCM_MBS_INIT, SCM_MBS_SKIP_CHAR): Move from sigschemetype*.h
	  - (ScmMultibyteState, ScmMultibyteCharInfo, ScmMultibyteString): Ditto
	  - (Scm_mb_scan_char, Scm_mb_strlen, Scm_mb_bare_c_strlen,
	    Scm_mb_substring, Scm_mb_strref): Move from sigscheme.h
	
2005-10-31 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/encoding.c
	  - (Scm_mb_scan_char): Fix the case no multibyte encodings
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR): Add a comment
	* sigscheme/sbcport.c
	  - (basecport_encoding, basecport_put_char): Remove dummy return
	* sigscheme/strport.c
	  - (istrport_vprintf, istrport_puts, istrport_write, istrport_flush,
	    ostrport_get_byte, ostrport_peek_byte, ostrport_byte_readyp): Add
	    'NOTREACHED' comment
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/fileport.c
	  - (fileport_dyn_cast): Fix incorrect error message
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sbcport.c
	  - (basecport_encoding, basecport_put_char): New function
	  - (basecport_close, basecport_get_char, basecport_peek_char,
	    basecport_char_readyp, basecport_vprintf, basecport_flush,
	    sbcport_encoding, sbcport_put_char):
	    * Simplify by replacing first arg with concrete port type
	  - (ScmBaseCharPort_vtbl, Scm_sbcport_init): Follow the function type
	    change
	  - (basecport_dyn_cast, ScmSingleByteCharPort_new, sbcport_dyn_cast):
	    Simplify
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_BYTEPORT_ERROR_INVALID_TYPE,
	    SCM_BYTEPORT_ERROR_INVALID_OPERATION, SCM_BYTEPORT_ERROR_NOMEM):
	    Removed
	  - (SCM_PORT_ERROR_INVALID_TYPE, SCM_PORT_ERROR_INVALID_OPERATION,
	    SCM_PORT_ERROR_NOMEM): New macro as parametric version of above
	    one
	* sigscheme/strport.c
	  - (ScmInputStrPort_new, ScmInputStrPort_ref_opaque,
	    istrport_dyn_cast, istrport_vprintf, istrport_puts,
	    istrport_write, istrport_flush, ScmOutputStrPort_new,
	    ScmOutputStrPort_str, ScmOutputStrPort_ref_opaque,
	    ostrport_dyn_cast, ostrport_get_byte, ostrport_peek_byte,
	    ostrport_byte_readyp, ostrport_vprintf): Follow the change of the
	    macro
	* sigscheme/fileport.c
	  - (ScmFilePort_new, fileport_dyn_cast): Ditto
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit implements string port as ScmBytePort
	
	* sigscheme/strport.h
	  - New file
	  - (ScmInputStrPort_vptr, ScmOutputStrPort_vptr): New variable decl
	  - (Scm_strport_init, ScmInputStrPort_new,
	    ScmInputStrPort_new_copying, ScmInputStrPort_ref_opaque,
	    ScmOutputStrPort_new, ScmOutputStrPort_str,
	    ScmOutputStrPort_ref_opaque): New function decl
	* sigscheme/strport.c
	  - New file
	  - (struct ScmInputStrPort_, ScmInputStrPort, struct
	    ScmOutputStrPort_, ScmOutputStrPort): New type
	  - (ScmInputStrPort_vtbl, ScmOutputStrPort_vtbl): New static variable
	  - (ScmInputStrPort_vptr, ScmOutputStrPort_vptr): New variable
	  - (istrport_dyn_cast, istrport_close, istrport_get_byte,
	    istrport_peek_byte, istrport_byte_readyp, istrport_vprintf,
	    istrport_puts, istrport_write, istrport_flush, ostrport_dyn_cast,
	    ostrport_close, ostrport_get_byte, ostrport_peek_byte,
	    ostrport_byte_readyp, ostrport_vprintf, ostrport_puts,
	    ostrport_write, ostrport_flush, ostrport_append): New static function
	  - (Scm_strport_init, ScmInputStrPort_new,
	    ScmInputStrPort_new_copying, ScmInputStrPort_ref_opaque,
	    ScmOutputStrPort_new, ScmOutputStrPort_str,
	    ScmOutputStrPort_ref_opaque): New function
	* sigscheme/config.h
	  - (HAVE_VASPRINTF): New macro
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/fileport.h
	  - (Scm_fileport_init): New function decl
	* sigscheme/fileport.c
	  - (Scm_fileport_init): New function
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_BYTEPORT_ERROR_NOMEM): New macro
	  - (SCM_BYTEPORT_ERROR_INVALID_TYPE,
	    SCM_BYTEPORT_ERROR_INVALID_OPERATION): Modify message
	* sigscheme/fileport.c
	  - (ScmFilePort_new): Replace error handling with
	    SCM_BYTEPORT_ERROR_NOMEM()
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_DYNAMIC_CAST): Fix obsolete definition
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_BYTEPORT_ERROR_INVALID_TYPE,
	    SCM_BYTEPORT_ERROR_INVALID_OPERATION): New macro
	* sigscheme/fileport.c
	  - (fileport_dyn_cast): Simplify with the macro
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (ScmCharPortMethod_dyn_cast, ScmCharPortMethod_close,
	    ScmCharPortMethod_encoding, ScmCharPortMethod_get_char,
	    ScmCharPortMethod_peek_char, ScmCharPortMethod_char_readyp,
	    ScmCharPortMethod_vprintf, ScmCharPortMethod_put_char,
	    ScmCharPortMethod_flush, ScmBytePortMethod_dyn_cast,
	    ScmBytePortMethod_close, ScmBytePortMethod_get_byte,
	    ScmBytePortMethod_peek_byte, ScmBytePortMethod_byte_readyp,
	    ScmBytePortMethod_vprintf, ScmBytePortMethod_puts,
	    ScmBytePortMethod_write, ScmBytePortMethod_flush): New type
	  - (struct ScmCharPortVTbl_, struct ScmBytePortVTbl_): Simplify with
	    above types
	* sigscheme/fileport.c
	  - (fileport_dyn_cast): Simplify
	  - (fileport_close, fileport_get_byte, fileport_peek_byte,
	    fileport_byte_readyp, fileport_vprintf, fileport_puts,
	    fileport_write, fileport_flush): Simplify by replacing first arg
	    with ScmFilePort
	  - (ScmFilePort_vtbl): Follow the function type change
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (FALSE, TRUE): New macro
	* sigscheme/fileport.c
	  - (fileport_byte_readyp): Replace 1 with TRUE
	
2005-10-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Add some tests for string constants
	* sigscheme/TODO
	  - Update
	
2005-10-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/storage-protection.c
	  - Add a comment about file removal
	  - (scm_gc_protect_stack, scm_gc_ensure_uninlined_func,
	    SigScm_GC_ProtectStackInternal, SigScm_GC_UnprotectStack,
	    SigScm_GC_EnsureUninlinedFuncInternal): Removed
	
2005-10-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds SIOD-compatible 'load-path' procedure
	
	* sigscheme/sigscheme.h
	  - (ScmOp_load_path): New function decl
	* sigscheme/io.c
	  - (ScmOp_load_path): New function
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Add initialization of load-path
	
2005-10-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit simplifies the GCC4-ready stack protection
	
	* sigscheme/sigscheme.h
	  - (SCM_GC_PROTECTED_CALL, SCM_GC_PROTECTED_CALL_VOID,
	    SCM_GC_PROTECTED_CALL_INTERNAL): New macro
	  - (SCM_GC_PROTECTED_FUNC_T, SCM_GC_PROTECTED_FUNC_DECL,
	    SCM_GC_CALL_PROTECTED_FUNC, SCM_GC_CALL_PROTECTED_VOID_FUNC,
	    SCM_GC_CALL_PROTECTED_FUNC_INTERNAL): Removed
	  - (scm_gc_protect_stack): Make volatile
	  - (scm_gc_ensure_uninlined_func): Removed
	  - (SigScm_GC_EnsureUninlinedFunc,
	    SigScm_GC_EnsureUninlinedFuncInternal): Removed
	* sigscheme/datas.c
	  - (scm_gc_protect_stack):
	    * Moved from storage-protection.c
	    * Make volatile
	  - (SigScm_GC_ProtectStackInternal): Moved from storage-protection.c
	  - (SigScm_GC_UnprotectStack): Unifiy SCM_GCC4_READY_GC and not
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal, Scm_eval_c_string_internal,
	    SigScm_Initialize, Scm_eval_c_string): Follow the API change
	* sigscheme/io.c
	  - (SigScm_load_internal, SigScm_load): Follow the API change
	* sigscheme/main.c
	  - (repl, main): Follow the API change
	* sigscheme/Makefile.am
	  - (libsscm_la_SOURCES): Remove storage-protection.c
	
2005-10-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/baseport.h
	  - (SCM_PORT_DYNAMIC_CAST): Add a comment
	* sigscheme/fileport.c
	  - (fileport_close, fileport_get_byte, fileport_peek_byte,
	    fileport_vprintf, fileport_puts, fileport_write, fileport_flush):
	    Replace unnecessary SCM_PORT_DYNAMIC_CAST() with normal cast
	* sigscheme/sbcport.c
	  - (basecport_close, basecport_get_char, basecport_peek_char,
	    basecport_char_readyp, basecport_vprintf, basecport_flush,
	    sbcport_encoding, sbcport_put_char): Ditto
	
2005-10-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds singlebyte character port implementation
	
	* sigscheme/baseport.h
	  - (struct ScmBaseCharPort_, ScmBaseCharPort): Move to sbcport.h
	* sigscheme/sbcport.h
	  - New file
	  - (struct ScmBaseCharPort_, ScmBaseCharPort): Moved from baseport.h
	  - (ScmBaseCharPort_vptr, ScmSingleByteCharPort_vptr): New variable
	    decl
	  - (Scm_sbcport_init, ScmSingleByteCharPort_new): New function decl
	* sigscheme/sbcport.c
	  - New file
	  - (struct ScmSingleByteCharPort_, ScmSingleByteCharPort): New type
	  - (basecport_dyn_cast, basecport_close, basecport_get_char,
	    basecport_peek_char, basecport_char_readyp, basecport_vprintf,
	    basecport_flush, sbcport_dyn_cast, sbcport_encoding,
	    sbcport_put_char): New static function
	  - (ScmBaseCharPort_vtbl, ScmSingleByteCharPort_vtbl): New static
	    variable
	  - (ScmBaseCharPort_vptr, ScmSingleByteCharPort_vptr): New variable
	
2005-10-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/fileport.h
	  - (ScmFilePort_vtbl): Removed
	  - (ScmFilePort_vptr): New variable decl
	* sigscheme/fileport.c
	  - (ScmFilePort_vptr): New variable
	  - (ScmFilePort_vtbl): Make static
	  - (ScmFilePort_new, fileport_dyn_cast): Follow the introduction of
	    ScmFilePort_vptr
	
2005-10-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit starts the abstract port implementation
	
	* sigscheme/baseport.h
	  - New file
	  - (SCM_CHARPORT_ERROR, SCM_BYTEPORT_ERROR, SCM_PORT_DYNAMIC_CAST,
	    SCM_CHARPORT_CLOSE, SCM_CHARPORT_ENCODING, SCM_CHARPORT_GET_CHAR,
	    SCM_CHARPORT_PEEK_CHAR, SCM_CHARPORT_CHAR_READYP,
	    SCM_CHARPORT_VPRINTF, SCM_CHARPORT_PUT_CHAR, SCM_CHARPORT_FLUSH,
	    SCM_BYTEPORT_CLOSE, SCM_BYTEPORT_GET_BYTE, SCM_BYTEPORT_PEEK_BYTE,
	    SCM_BYTEPORT_BYTE_READYP, SCM_BYTEPORT_VPRINTF, SCM_BYTEPORT_PUTS,
	    SCM_BYTEPORT_WRITE, SCM_BYTEPORT_FLUSH): New macro
	  - (struct ScmCharPortVTbl_, ScmCharPortVTbl, struct ScmCharPort_,
	    ScmCharPort, struct ScmBaseCharPort_, ScmBaseCharPort, struct
	    ScmBytePortVTbl_, ScmBytePortVTbl, struct ScmBytePort_,
	    ScmBytePort): New type
	* sigscheme/fileport.h
	  - New file
	  - (ScmFilePort_vtbl): New variable decl
	  - (ScmFilePort_new): New function decl
	* sigscheme/fileport.c
	  - New file
	  - (struct ScmFilePort_, ScmFilePort): New type
	  - (ScmFilePort_vtbl): New variable
	  - (ScmFilePort_new): New function
	  - (fileport_dyn_cast, fileport_close, fileport_get_byte,
	    fileport_peek_byte, fileport_byte_readyp, fileport_vprintf,
	    fileport_puts, fileport_write, fileport_flush): New static function
	
2005-10-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_OBJ_COMPACT):
	    * Move to appropriate section
	    * Disable by default since it's not stable yet
	  - (SCM_VOLATILE_OUTPUT): Enable if SCM_DEBUG
	
	* sigscheme/TODO
	  - Update
	
2005-10-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/c_template
	  - Change fill-column to 79
	  - Rename and reorder some sections appropriately. See TODO
	* sigscheme/h_template
	  - Ditto
	
2005-10-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/config.h
	  - (SCM_OBJ_COMPACT): new flag
	* sigscheme/sigschemeinternal.h
	  - add SCM_FREECELL handling macro for SCM_OBJ_COMPACT
	* sigscheme/sigschemetype-compact.h
	  - add MBS handling data structures and macros
	  - reorganize accessor macros
	* sigscheme/sigscheme.h
	  - include "sigschemetype-compact.h" when SCM_OBJ_COMPACT
	    is enabled
	* sigscheme/test-compact.c
	  - add entype test
	
2005-10-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - reorganize immediate section
	
2005-10-18 Jun Inoue <jun.lambda@gmail.com>
	
	Add unit tests.  Fix bugs.
	
	* sigscheme/encoding.c
	  - (eucjp_scan_char, euckr_scan_char, euccn_scan_char): Improve
	    space/del handling.
	  - (IS_GR_SPC_OR_DEL): New macro.
	
	* sigscheme/test/test-enc-utf8.scm
	  - New unit test.
	
	* sigscheme/test/test-enc-eucjp.scm
	  - New unit test.
	
	* sigscheme/test/test-enc-sjis.scm
	  - New unit test.
	
	* sigscheme/test/test-enc-eucgeneric.scm
	  - New unit test.
	
2005-10-18 Jun Inoue <jun.lambda@gmail.com>
	
	Adds proper multibyte encoding support.
	
	* sigscheme/config.h
	  - (SCM_USE_EUCJP, SCM_USE_SJIS, SCM_USE_UTF8, SCM_USE_EUCCN,
	    SCM_USE_EUCKR): New macros.
	  - (SCM_STRICT_ENCODING_CHECK, SCM_DEBUG_ENCODING): New macro.
	
	* sigscheme/encoding.c
	  - sigschemeinternal.h: New include.
	  - (eucjp_scan_char, sjis_scan_char, euccn_scan_char,
	    euckr_scan_char, utf8_scan_char, unibyte_scan_char): New
	    functions.
	  - (uchar): New type.
	  - (Scm_mb_scan_char): New global variable.
	  - (eucjp_strlen, eucjp_str_startpos, eucjp_str_endpos): Remove.
	  - (SigScm_default_encoding_strlen): Rename to Scm_mb_strlen.
	  - (Scm_mb_bare_c_strlen): New function.  Better name wanted.
	  - (Scm_mb_substring): New function.
	  - (ENTER, RETURN, RETURN_ERROR, RETURN_INCOMPLETE, SAVE_STATE,
	    EXPECT_SIZE, IN_CL, IN_CR, IN_GL94, IN_GL96, IN_GR94, IN_GR96,
	    IS_ASCII, ESC, SO, SI, SS2, SS3): New macros.
	  - (iso2022kr_scan_char, iso2022kr_scan_input_char,
	    iso2022jp_scan_char, iso2022jp_scan_input_char): Declared, but not
	    implemented.
	
	* sigscheme/operations.c
	  - (Scm_mb_bare_c_strlen): Follow renaming in encoding.c.
	  - (ScmOp_string_ref, ScmOp_string_set, ScmOp_string_substring,
	    ScmOp_string2list): Use the new multibyte stuff.
	
	* sigscheme/datas.c
	  - (Scm_NewChar, Scm_NewString, Scm_NewStringCopying): Use the new
	    multibyte stuff.
	
	* sigscheme/sigscheme.h
	  - (SCM_DBG_ENCODING): New enum constant.
	  - (SigScm_default_encoding_strlen,
	    SigScm_default_encoding_str_startpos,
	    SigScm_default_encoding_str_endpos): Remove prototypes.
	  - (Scm_mb_strlen, Scm_mb_bare_c_strlen, Scm_mb_scan_char): New declarations.
	  - (Scm_mb_strref): New macro. (wrapper for Scm_mb_substring)
	
	* sigscheme/sigschemetype.h
	  - (ScmMultibyteState, ScmMultibyteCharInfo, ScmMultibyteString): New types.
	  - (SCM_MBS_SET_STR, SCM_MBS_GET_STR, SCM_MBS_SET_SIZE,
	    SCM_MBS_GET_SIZE, SCM_MBCINFO_SET_SIZE, SCM_MBCINFO_GET_SIZE,
	    SCM_MBCINFO_CLEAR_STATE, SCM_MBCINFO_SET_STATE, SCM_MBCINFO_GET_STATE,
	    SCM_MBCINFO_CLEAR_FLAG, SCM_MBCINFO_SET_ERROR,
	    SCM_MBCINFO_SET_INCOMPLETE, SCM_MBCINFO_ERRORP,
	    SCM_MBCINFO_INCOMPLETEP, SCM_MBCINFO_INIT, SCM_MBS_GET_STATE,
	    SCM_MBS_SET_STATE, SCM_MBS_CLEAR_STATE, SCM_MBS_GET_STATE,
	    SCM_MBS_SET_STATE, SCM_MBS_CLEAR_STATE, SCM_MBS_INIT,
	    SCM_MBS_SKIP_CHAR): New macros.
	
	* sigscheme/debug.c
	  - (SigScm_PredefinedDebugCategories): Add SCM_DBG_ENCODING.
	  - (SigScm_WriteToPort, SigScm_DisplayToPort): Untabify.
	
	* sigscheme/operations-siod.c
	  - (ScmOp_closure_code, SigScm_SetVerboseLevel): Untabify.
	
	* sigscheme/sigschemeinternal.h
	  - (ASSERT_NO_MORE_ARG): Correct error reporting macro.
2005-10-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_WORD_WIDTH): New macro
	  - (SCM_VALUE_WIDTH): Rewrite with SCM_WORD_WIDTH
	  - Add some FIXME comments
	  - (SCM_OTHERS_CDR_TAG_WIDTH, SCM_OTHERS_CDR_TAG_OFFSET,
	    SCM_OTHERS_CDR_TAG_MASK, SCM_OTHERS_CDR_TAG_SYMBOL,
	    SCM_OTHERS_CDR_TAG_STRING, SCM_OTHERS_CDR_TAG_VECTOR,
	    SCM_OTHERS_CDR_TAG_EXT, SCM_OTHERS_CDR_SUB_TAG_WIDTH,
	    SCM_OTHERS_CDR_SUB_TAG_OFFSET, SCM_OTHERS_CDR_SUB_TAG_MASK,
	    SCM_OTHERS_CDR_SUB_TAG_VALUES, SCM_OTHERS_CDR_SUB_TAG_FUNC,
	    SCM_OTHERS_CDR_SUB_TAG_PORT, SCM_OTHERS_CDR_SUB_TAG_CONTINUATION,
	    SCM_OTHERS_CDR_SUB_TAG_C_POINTER,
	    SCM_OTHERS_CDR_SUB_TAG_RESERVED5,
	    SCM_OTHERS_CDR_SUB_TAG_RESERVED6, SCM_OTHERS_CDR_SUB_TAG_FREECELL,
	    SCM_OTHERS_CDR_EXT_TAG_WIDTH, SCM_OTHERS_CDR_EXT_TAG_OFFSET,
	    SCM_OTHERS_CDR_EXT_TAG_MASK, SCM_OTHERS_CDR_EXT_TAG_VALUES,
	    SCM_OTHERS_CDR_EXT_TAG_FUNC, SCM_OTHERS_CDR_EXT_TAG_PORT,
	    SCM_OTHERS_CDR_EXT_TAG_CONTINUATION,
	    SCM_OTHERS_CDR_EXT_TAG_C_POINTER,
	    SCM_OTHERS_CDR_EXT_TAG_RESERVED5,
	    SCM_OTHERS_CDR_EXT_TAG_RESERVED6, SCM_OTHERS_CDR_EXT_TAG_FREECELL,
	    SCM_OTHERS_CDR_VALUE_WIDTH, SCM_OTHERS_CDR_VALUE_OFFSET,
	    SCM_OTHERS_CDR_VALUE_MASK, SCM_OTHERS_CDR_NARROW_VALUE_WIDTH,
	    SCM_OTHERS_CDR_NARROW_VALUE_OFFSET,
	    SCM_OTHERS_CDR_NARROW_VALUE_MASK, SCM_OTHERS_CDR_TAG_WIDTH_SYMBOL,
	    SCM_OTHERS_CDR_TAG_OFFSET_SYMBOL, SCM_OTHERS_CDR_TAG_MASK_SYMBOL,
	    SCM_OTHERS_CDR_VALUE_WIDTH_SYMBOL,
	    SCM_OTHERS_CDR_VALUE_OFFSET_SYMBOL,
	    SCM_OTHERS_CDR_VALUE_MASK_SYMBOL, SCM_OTHERS_CDR_TAG_WIDTH_STRING,
	    SCM_OTHERS_CDR_TAG_OFFSET_STRING, SCM_OTHERS_CDR_TAG_MASK_STRING,
	    SCM_OTHERS_CDR_VALUE_WIDTH_STRING,
	    SCM_OTHERS_CDR_VALUE_OFFSET_STRING,
	    SCM_OTHERS_CDR_VALUE_MASK_STRING, SCM_OTHERS_CDR_TAG_WIDTH_VECTOR,
	    SCM_OTHERS_CDR_TAG_OFFSET_VECTOR, SCM_OTHERS_CDR_TAG_MASK_VECTOR,
	    SCM_OTHERS_CDR_VALUE_WIDTH_VECTOR,
	    SCM_OTHERS_CDR_VALUE_OFFSET_VECTOR,
	    SCM_OTHERS_CDR_VALUE_MASK_VECTOR, SCM_OTHERS_CDR_TAG_WIDTH_VALUES,
	    SCM_OTHERS_CDR_TAG_OFFSET_VALUES, SCM_OTHERS_CDR_TAG_MASK_VALUES,
	    SCM_OTHERS_CDR_VALUE_WIDTH_VALUES,
	    SCM_OTHERS_CDR_VALUE_OFFSET_VALUES,
	    SCM_OTHERS_CDR_VALUE_MASK_VALUES): New macro. See the comment
	    around them
	
2005-10-18 kzk <mover@hct.zaq.ne.jp>
	
	* move SCM_INVALID from sigschemeinternal.h to sigschemetype.h
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_INVALID): removed
	* sigscheme/sigschemetype.h
	  - (SCM_INVALID): added
	
2005-10-18 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - resolve fixme
	  - move EOF and UNDEF to Immediate constant
	
2005-10-18 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - implement real accessors
	
2005-10-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - (SCM_GCBIT_WIDTH, SCM_GCBIT_OFFSET, SCM_TAG_WIDTH, SCM_TAG_OFFSET,
	    SCM_VALUE_WIDTH, SCM_VALUE_OFFSET): New macro
	  - (SCM_GCBIT_MASK, SCM_GCBIT_UNMARKED, SCM_GCBIT_MARKED,
	    SCM_TAG_MASK, SCM_TAG_CONS, SCM_TAG_CLOSURE, SCM_TAG_OTHERS,
	    SCM_TAG_IMM, SCM_VALUE_MASK): Make meaning clear and reorganizable
	  - (SCM_TAG_IMM_NULL, SCM_TAG_IMM_EOF, SCM_TAG_IMM_UNDEF): New macro
	    as placeholder
	  - Add some FIXME comments. Please do it!
	
2005-10-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - implement real accessors for CONS, CLOSURE, SYMBOL, STRING,
	    VECTOR and INT. Please check the implementation strategy.
	
2005-10-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - Add a FIXME comment to header
	  - (CASE_ISSPACE): New macro
	  - (skip_comment_and_space): Fix platform-dependent newline handling
	  - (read_char): Add a TODO comment
	  - (read_number_or_symbol): Add a FIXME comment
	  - (read_word, read_char_sequence): Fix incomplete whitespace
	    handling such as for ^L, with CASE_ISSPACE.
	
2005-10-17 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - Make an expression of a comment ordinary
	  - (SCM_VALUE_MASK): Sort by bit position
	
2005-10-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - implement entyping macros
	
2005-10-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - not to use improper word MASK_1 or MASK_2
	
2005-10-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - remove needless predicate operation
	
2005-10-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - implement predicates
	
2005-10-17 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/sigschemetype-compact.h
	  - Fix another inconsistent comment I just introduced in r1843.
	
2005-10-17 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/sigschemetype-compact.h
	  - fix a comment's inconsistency introduced in r1842
	
2005-10-17 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - update comment to describe new Object tagging system.
	    This is discussed in anthy-dev.
	
2005-10-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* experimental
	* experimental/imm-const
	  - New directory
	
	* experimental/imm-const/Makefile
	* experimental/imm-const/imm-test.c
	  - New file
	
	* experimental/imm-const/imm-test-gcc34-Os-i486.txt
	* experimental/imm-const/imm-test-gcc34-Os-ppro.txt
	* experimental/imm-const/imm-test-gcc34-Os-ppro-i486.txt
	* experimental/imm-const/imm-test-gcc32-Os-armv5te.txt
	* experimental/imm-const/imm-test-gcc32-Os-armv5te-thumb.txt
	* experimental/imm-const/imm-test-gcc32-Os-mips.txt
	* experimental/imm-const/imm-test-gcc32-Os-mips16.txt
	* experimental/imm-const/imm-test-gcc32-Os-sh2.txt
	* experimental/imm-const/imm-test-gcc32-Os-sh3.txt
	* experimental/imm-const/imm-test-gcc32-Os-sh4.txt
	* experimental/imm-const/imm-test-gcc32-Os-m68k.txt
	* experimental/imm-const/imm-test-gcc34-Os-avr.txt
	  - New file produced by the imm-test
	
2005-10-16 Etsushi Kato <ek.kato@gmail.com>
	
	* Tentative fix to prevent SEGV with LIBUIM_VERBOSE=0.
	
	* sigscheme/debug.c (SigScm_WriteToPort) : Check FALSEP before
	  ASSERT_PORTP to avoid exit() when port is #f.
	(SigScm_DisplayToPort) : Ditto.
	* sigscheme/operation-siod.c (sscm_verbose_level) : Set initial
	  value as -1.
	(SigScm_SetVerboseLevel) : Return immediately if the level is not
	  changed.  Fix to check scm_current_{error,output}_port with
	  FALSEP when a verbose level will be raised from 0.
	
2005-10-11 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype-compact.h
	  - initialize var before entyping
	  - fix wrong description
	  - remove unnecessary mask
	
	* sigscheme/test-compact.c
	  - not to initialize var
	
2005-10-11 kzk <mover@hct.zaq.ne.jp>
	
	* Now ScmCell Compaction is started.
	  Detail decription is available at the front of
	  sigschemetype-compact.h
	
	* sigscheme/sigschemetype-compact.h
	  - new file
	* sigscheme/test-compact.c
	  - new file
	
2005-10-10 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds a base to simplify special character
	  handlings. Subsequent works are needed. Anyone?
	
	* sigscheme/config.h
	  - (SCM_USE_SRFI75_NAMED_CHARS): New macro
	* sigscheme/sigschemeinternal.h
	  - (struct ScmSpecialCharInfo_, ScmSpecialCharInfo): New type
	  - (Scm_special_char_table): New decl
	* sigscheme/io.c
	  - (Scm_special_char_table): New variable
	* sigscheme/read.c
	  - (read_char, read_string): Add FIXME comment
	* sigscheme/debug.c
	  - (print_char, print_string): Ditto
	* sigscheme/TODO
	  - Update
	
2005-10-08 Jun Inoue <jun.lambda@gmail.com>
	
	Misc. bugfixes pertaining to port.
	
	* sigscheme/datas.c
	  - (Scm_NewStringCopying): NULL check.
	  - (fileport_print): String containing '%'.
	  - (stringport_print): Make use of curpos.  Porperly update curpos.
	    Eliminate misleading variable name.  Replace inefficient
	    snprintf() with memcpy().
	
	* sigscheme/test/test-string.scm
	  - New test.
	
2005-10-07 kzk <mover@hct.zaq.ne.jp>
	
	* implement SRFI-6 : "Basic String Ports"
	
	* sigscheme/io.c
	  - (ScmOp_close_input_port,
	     ScmOp_close_output_port): no need to close string port
	  - (ScmOp_read_char): use SCM_PORT_GETC
	* sigscheme/sigschemeinternal.h
	  - (PORTBUFFER_SIZE): new macro
	  - (scm_portbuffer): buffer for SCM_PORT_PRINT to handle printf style
	    format string
	* sigscheme/config.h
	  - (SCM_USE_SRFI6): new build flag
	* sigscheme/read.c
	  - (SCM_PORT_GETC,
	     SCM_PORT_UNGETC): move to sigscheme.h
	* sigscheme/operations.c
	  - include operations-srfi6.c when SCM_USE_SRFI6 is on
	* sigscheme/debug.c
	  - (SCM_PORT_PRINT): moved to sigscheme.h
	  - (scm_portbuffer): buffer for SCM_PORT_PRINT to handle printf style
	    format string
	  - use scm_portbuffer for handling printf style format string
	* sigscheme/datas.c
	  - (fileport_print): change args
	  - (stringport_print): change args and now implemented properly
	  - (SigScm_InitStorage): allocate scm_portbuffer
	  - (SigScm_FinalizeStorage): free scm_portbuffer
	  - (Scm_NewStringPort): change arg
	* sigscheme/sigscheme.c
	  - add "srfi-6" entry to module_info_table
	  - (Scm_eval_c_string_internal): change Scm_NewStringPort argument
	* sigscheme/operations-srfi6.c
	  - (ScmOp_SRFI6_open_input_string,
	     ScmOp_SRFI6_open_output_string,
	     ScmOp_SRFI6_get_output_string): new func
	* sigscheme/sigscheme.h
	  - (SCM_PORT_GETC, SCM_PORT_UNGETC): moved from read.c
	  - (SCM_PORT_PRINT): moved from debug.c
	  - (ScmOp_SRFI6_open_input_string,
	     ScmOp_SRFI6_open_output_string,
	     ScmOp_SRFI6_get_output_string): new func
	* sigscheme/sigschemetype.h
	  - (print_func): change arg
	
	* sigscheme/test/test-srfi6.scm
	  - new file
	
	
2005-10-07 kzk <mover@hct.zaq.ne.jp>
	
	* Port Handling Reorganization(2)
	  - ScmPortInfo has two function pointers for getc and print 
	  - now SCM_PORT_GETC is a function call
	  - functions in debug.c is port based, instead of FILE*
	
	  FIXME:
	  - I want to use SCM_PORT_PRINT like this, but I cannot achieve
	    this. Is there any macro tric?
	
	      e.g. SCM_PORT_PRINT(port, "%s", string);
	
	* sigscheme/read.c
	  - (SCM_PORT_GETC): call SCM_PORT_GETC_FUNC(port)
	  - (SCM_PORT_UNGETC): remove trailing ";"
	* sigscheme/debug.c
	  - (print_ScmObj_internal,
	     print_char,
	     print_string,
	     print_list,
	     print_vector,
	     print_port,
	     print_constant): change args to use SCM_PORT_PRINT instead
	     of using fprintf
	* sigscheme/datas.c
	  - (fileport_getc,
	     fileport_print,
	     stringport_getc,
	     stringport_print): new func
	  - (Scm_NewFilePort, Scm_NewStringPort): set GETC_FUNC and
	    PRINT_FUNC for port object
	* sigscheme/sigschemetype.h
	  - (getc_func, print_func): new member
	  - (SCM_PORT_GETC_FUNC,
	     SCM_PORT_SET_GETC_FUNC,
	     SCM_PORT_PRINT_FUNC,
	     SCM_PORT_SET_PRINT_FUNC): removed
	x
	
2005-10-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_REINTERPRET_CAST): New macro
	* sigscheme/debug.c
	  - (print_ScmObj_internal): Suppress the error about casting a
	    function pointer to void *, with SCM_REINTERPRET_CAST()
	
2005-10-07 kzk <mover@hct.zaq.ne.jp>
	
	* Port related accessor reorganization. Not to use the
	  word "PORTINFO", because this is for internal representation.
	
	* sigscheme/sigschemetype.h
	  - (SCM_PORTINFO_PORTTYPE,
	     SCM_PORTINFO_FILE,
	     SCM_PORTINFO_FILENAME,
	     SCM_PORTINFO_LINE,
	     SCM_PORTINFO_STR,
	     SCM_PORTINFO_STR_CURRENT,
	     SCM_PORTINFO_UNGOTTENCHAR): removed
	  - (SCM_PORT_PORTTYPE,
	     SCM_PORT_SET_PORTTYPE,
	     SCM_PORT_UNGOTTENCHAR,
	     SCM_PORT_SET_UNGOTTENCHAR,
	     SCM_PORT_FILE,
	     SCM_PORT_SET_FILE,
	     SCM_PORT_FILENAME,
	     SCM_PORT_SET_FILENAME,
	     SCM_PORT_LINE,
	     SCM_PORT_SET_LINE,
	     SCM_PORT_STR,
	     SCM_PORT_SET_STR,
	     SCM_PORT_STR_CURRENTPOS,
	     SCM_PORT_SET_STR_CURRENTPOS): new macro
	  - (str_currentpos): renamed from str_current
	* sigscheme/io.c
	  - Ditto
	* sigscheme/read.c
	  - Ditto
	* sigscheme/debug.c
	  - Ditto
	* sigscheme/error.c
	  - Ditto
	* sigscheme/datas.c
	  - Ditto
	  - (Scm_NewStringPort,
	     Scm_NewFilePort): use accessor macro instead of directly
	     accessing port_info.
	
	
2005-10-07 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype.h
	  - (ScmFuncType0, ScmFuncType1,
	     ScmFuncType2, ScmFuncType3,
	     ScmFuncType4, ScmFuncType5,
	     ScmFuncTypeEvaledList,
	     ScmFuncTypeRawList,
	     ScmFuncTypeRawListTailRec,
	     ScmFuncTypeRawListWithTailFlag): remove obsolete func types
	
2005-10-06 Etsushi Kato <ek.kato@gmail.com>
	
	* uim/uim-scm.c (uim_scm_init) : Set verbose level after
	  initialization of sigscheme.
	* sigscheme/debug.c (SigScm_WriteToPort) : Check existence of the
	  port with FALSEP.
	(SigScm_DisplayToPort) : Ditto.
	* sigscheme/error.c : (SigScm_VErrorPrintf) : Ditto.
	(SigScm_ErrorNewline) : Ditto.
	* sigscheme/operations-siod.c (SigScm_Initialize_SIOD) :
	  Initialize saved port with SCM_FALSE and protect from GC again.
	(SigScm_SetVerboseLevel) : If verbose level == 0, set port with
	  SCM_FALSE.
	
2005-10-06 Jun Inoue <jun.lambda@gmail.com>
	
	Add test for the case where call-with-values calls itself as the
	consumer.  The same problem will arise with any code that uses
	Scm_tailcall().  I don't know how to go about this problem but to
	introduce more kludge in Scm_eval(), Scm_call(), etc, which seems
	unwarranted considering the rarity of this corner case.
	
	* sigscheme/test/test-tail-rec.scm
	  - (rec-call-with-values-2): New test.
2005-10-06 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/operations-siod.c (SigScm_Initialize_SIOD) : No need
	  to protect saved_output_port and saved_error_port.
	
2005-10-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (scm_current_error_port): Move to io.c since the port itself is
	    considered that OWNED by io module. The error module USES it
	* io.c
	  - (scm_current_error_port): Moved from error.c
	* sigscheme/sigschemeinternal.h
	  - (scm_current_error_port): Move subsection
	
2005-10-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit removes scm_std_error_port, scm_std_input_port,
	  scm_std_output_port only SIOD-compatibility code is using
	
	* sigscheme/sigschemeinternal.h
	  - (scm_std_error_port, scm_std_input_port, scm_std_output_port):
	    Removed
	* sigscheme/io.c
	  - (scm_std_input_port, scm_std_output_port): Removed
	* sigscheme/error.c
	  - (scm_std_error_port): Removed
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Remove initialization of
	    scm_std_error_port, scm_std_input_port, scm_std_output_port
	* sigscheme/operations-siod.c
	  - (saved_output_port, saved_error_port): New static variable
	  - (SigScm_Initialize_SIOD): Add initialization of saved_output_port,
	    saved_error_port
	  - (SigScm_SetVerboseLevel): Rewrite printing suppression code with
	    the new static ports
	* sigscheme/main.c
	  - (repl): Replace scm_std_*_port with scm_current_input_port
	
2005-10-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_MAKE_VALUEPACKET): New macro
	* sigscheme/sigschemeinternal.h
	  - (SigScm_null_values): Modify the comment
	* sigscheme/operations.c
	  - (ScmOp_values, ScmOp_call_with_values): Simplify and eliminate #if
	    SCM_USE_VALUECONS condition
	* sigscheme/sigscheme.c
	  - (SigScm_null_values): Move to datas.c
	  - (SigScm_InitStorage): Move SigScm_null_values initilization to
	    SigScm_InitStorage of datas.c
	* sigscheme/datas.c
	  - (SigScm_null_values): Moved from sigscheme.c
	  - (SigScm_InitStorage): Moved SigScm_null_values initilization from
	    SigScm_Initialize_internal() of sigscheme.c
	
2005-10-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_VALUEPACKET_VALUES): Eliminate a cons cell consumption
	
2005-10-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (call, map_eval): Add strict error check for multiple values
	
2005-10-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_assq): Fix a typo
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_SHIFT_RAW_4, SCM_SHIFT_RAW_5, SCM_SHIFT_EVALED,
	    SCM_SHIFT_EVALED_1, SCM_SHIFT_EVALED_2, SCM_SHIFT_EVALED_3,
	    SCM_SHIFT_EVALED_4, SCM_SHIFT_EVALED_5): Removed since obsolete
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal):
	    * Remove obsolete and unnecessary codes
	    * Add some FIXME comments
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (print_constant): Remove incorrect non-constant things. They are
	    not a special constant but a symbol
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Renamings only
	
	* sigscheme/sigschemetype.h
	  - (struct ScmObjInternal_): Rename to struct ScmCell_
	  - (struct ScmCell_): Renamed from struct ScmObjInternal_
	  - (ScmObjInternal): Rename to ScmCell
	  - (ScmCell): Renamed from ScmObjInternal
	
	* sigscheme/debug.c
	* sigscheme/datas.c
	* sigscheme/sigscheme.c
	  - s/ScmObjInternal/ScmCell/g
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Renamings only
	
	* sigscheme/sigschemetype.h
	  - (enum ScmObjType): Rename ScmEtc to ScmConstant
	  - (SCM_ETCP): Rename to SCM_CONSTANTP
	  - (SCM_CONSTANTP): Renamed from SCM_ETCP
	  - (SCM_NEQ, SCM_NNULLP): Removed
	  - (SCM_NFALSEP): Follow the removal of SCM_NEQ
	* sigscheme/sigscheme.h
	  - (SCM_SYMBOL_BOUNDP): Ditto
	* sigscheme/sigschemeinternal.h
	  - (NEQ, NNULLP): Removed
	* sigscheme/datas.c
	  - (SCM_ETC_SET_IMPL): Rename to SCM_CONSTANT_BIND_SUBSTANCE
	  - (SCM_CONSTANT_BIND_SUBSTANCE): Renamed from SCM_ETC_SET_IMPL
	  - (SigScm_null_impl, SigScm_true_impl, SigScm_false_impl,
	    SigScm_eof_impl, SigScm_unbound_impl, SigScm_undef_impl): Rename
	    to *_cell
	  - (SigScm_null_cell, SigScm_true_cell, SigScm_false_cell,
	    SigScm_eof_cell, SigScm_unbound_cell, SigScm_undef_cell): Renamed
	    from *_impl
	  - (initialize_special_constants, sweep_obj): Follow the renamings
	* sigscheme/debug.c
	  - (print_etc): Rename to print_constant()
	  - (print_constant): Reneamed from print_etc
	  - (print_ScmObj_internal): Follow the renamings
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (SigScm_Read, SigScm_Read_Char): Simplify with
	    DECLARE_INTERNAL_FUNCTION()
	* sigscheme/operations-srfi34.c
	  - (guard_handle_clauses): Ditto
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi60.c
	  - (ScmOp_SRFI60_logxor): Fix a typo
	
2005-10-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	* sigscheme/operations.c
	* sigscheme/operations-srfi34.c
	* sigscheme/operations-srfi38.c
	* sigscheme/operations-srfi1.c
	* sigscheme/operations-srfi2.c
	* sigscheme/operations-srfi8.c
	* sigscheme/operations-siod.c
	* sigscheme/operations-srfi23.c
	* sigscheme/operations-srfi60.c
	  - insert DECLARE_FUNCTION macro to each function
	  - use ASSERT_*P macro
	  - use Scm_ErrorObj or ERR_OBJ instead of SigScm_ErrorObj
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi34.c
	  - (ScmOp_SRFI34_with_exception_handler, ScmExp_SRFI34_guard,
	    ScmOp_SRFI34_raise): Add FIXME comemnt
	* sigscheme/TODO
	  - Update
	
2005-10-05 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/io.c
	  - add DECLARE_FUNCTION to each ScmOp_* function
	  - use ASSERT_*P macro
	  - use ERR_OBJ instead of SigScm_ErrorObj
	
2005-10-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit enables dynamic extent aware continuation handling. The
	  two dynamic-wind tests of test-exp.scm has been passed
	
	* sigscheme/datas.c
	  - (INVALID_CONTINUATION_JMPENV, CONTINUATION_DYNEXT,
	    CONTINUATION_SET_DYNEXT): New macro
	  - (CONTINUATION_UPPER, CONTINUATION_SET_UPPER,
	    INVALID_CONTINUATION): Removed
	  - (Scm_NewContinuation):
	    * Initialize jmpenv slot with INVALID_CONTINUATION_JMPENV
	    * Set current dynamic extent to the continuation object
	  - (enter_dynamic_extent, exit_dynamic_extent): Fix an incorrect loop
	  - (continuation_stack_push): Change continuation_stack format
	  - (continuation_stack_pop):
	    * Ditto
	    * Return SCM_FALSE when the stack is SCM_NULL
	  - (continuation_stack_unwind): Return SCM_FALSE when the unwinding
	    has been failed
	  - (Scm_CallWithCurrentContinuation): Add dynamic extent handling
	  - (Scm_CallContinuation):
	    * Ditto
	    * Follow the interface change of continuation_stack_unwind
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit makes 'dynamic-wind' partially workable. Current
	  implementation does not support continuation handlings yet
	
	* sigscheme/sigscheme.h
	  - (ScmOp_dynamic_wind): Change function type
	* sigscheme/operations.c
	  - (ScmOp_dynamic_wind):
	    * Change function type
	    * Make workable by Scm_DynamicWind()
	* sigscheme/sigschemeinternal.h
	  - (Scm_DynamicWind): New function decl
	* sigscheme/datas.c
	  - (current_dynamic_extent): New variable
	  - (initialize_dynamic_extent, finalize_dynamic_extent,
	    wind_onto_dynamic_extent, unwind_dynamic_extent,
	    enter_dynamic_extent, exit_dynamic_extent): New static function
	  - (SigScm_InitStorage, SigScm_FinalizeStorage): Add dynamic extent
	    handlings
	  - (MAKE_DYNEXT_FRAME, DYNEXT_FRAME_BEFORE, DYNEXT_FRAME_AFTER): New
	    macro
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Follow the function type change of
	    ScmOp_dynamic_wind
	* sigscheme/test/test-exp.scm
	  - Add some tests for dynamic-wind. 2 tests are not yet passed
	
2005-10-04 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/Makefile.am : Avoid non-portable way (at least for Mac
	  OS X and Solaris) of creating static library.
	
2005-10-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemeinternal.h
	  - remove obsolete declaration
	
2005-10-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/error.c
	  - (throw_exception): "guard" doesn't use handler, so check
	    error continuation
	
2005-10-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am
	  - link libsscm.la statically
	
2005-10-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (CURRENT_EXCEPTION_HANDLER,
	     PUSH_EXCEPTION_HANDLER,
	     POP_EXCEPTION_HANDLER,
	     CURRENT_CONTINUATION_HANDLER,
	     PUSH_EXCEPTION_CONTINUATION,
	     POP_EXCEPTION_CONTINUATION): moved from operations-srfi34.c
	* sigscheme/config.h
	  - (SCM_EXCEPTION_HANDLING): new option which depends on
	    SRFI-34
	* sigscheme/error.c
	  - (throw_exception): new func
	  - (SigScm_Error, SigScm_ErrorObj, Scm_Error): change to use
	    throw_exception
	* sigscheme/operations-srfi34.c
	  - (CURRENT_EXCEPTION_HANDLER,
	     PUSH_EXCEPTION_HANDLER,
	     POP_EXCEPTION_HANDLER,
	     CURRENT_CONTINUATION_HANDLER,
	     PUSH_EXCEPTION_CONTINUATION,
	     POP_EXCEPTION_CONTINUATION): moved to sigschemeinternal.h
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): call "use" when
	    SCM_EXCEPTION_HANDLING is enabled
	
2005-10-04 kzk <mover@hct.zaq.ne.jp>
	
	* test/test-quote.scm
	* test/test-string.scm
	* test/test-equation.scm
	* test/test-vector.scm
	* test/test-list.scm
	* test/test-char.scm
	  - use "assert-true" instead of "assert"
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - Reorganize sections. I think that previous organization was too
	    finely divided based on non-primary classification key.
	
	    To keep primary key efficient allows fast location of what
	    is where at a glance.
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - Depend on SCM_USE_NONSTD_FEATURES when SCM_COMPAT_SIOD is
	    enabled
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit generalizes 'symbol-bound?' into SCM_USE_NONSTD_FEATURES
	  from SCM_COMPAT_SIOD. The implementation is fully compatible with
	  SIOD's (previous implementaion has a misunderstanding about the
	  specification of SIOD's)
	
	* sigscheme/sigscheme.h
	  - (ScmOp_symbol_boundp): Enclose into SCM_USE_NONSTD_FEATURES and
	    move section
	* sigscheme/operations-siod.c
	  - (ScmOp_symbol_boundp): Move to operations.c
	* sigscheme/operations.c
	  - (ScmOp_symbol_boundp):
	    * Moved from operations-siod.c
	    * Remove the enclosed in SCM_COMPAT_SIOD_BUGS. The behavior is not
	      SIOD-compatible and current implementation is the correctly
	      compatible
	    * Enclosed into SCM_USE_NONSTD_FEATURES
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Moved symbol-bound? initialization
	    from operations-siod.c
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (ScmExp_use): Follow the specification change of 'provide' and
	    'provided?'
	* sigscheme/main.c
	  - (repl): Ditto
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - Revert r1778 since other Scheme implementation uses string as
	    feature identifier
	  - (ScmOp_provide, ScmOp_providedp): Follow the revert with
	    ASSERT_STRINGP()
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit changes optional features enabling on demand. This makes
	  SIOD-compatibility disabled at startup time, so the SIOD versionn of
	  '=' predicate does not prevent running unit tests
	
	* sigscheme/config.h
	  - (SCM_USE_SRFI1): Enable by default
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Disable all ScmExp_use()
	* sigscheme/test/test-srfi1.scm
	* sigscheme/test/test-srfi2.scm
	* sigscheme/test/test-srfi8.scm
	* sigscheme/test/test-srfi60.scm
	* sigscheme/test/gauche-primsyn.scm
	* sigscheme/test/test-srfi34.scm
	* sigscheme/test/test-srfi38.scm
	  - Insert appropriate '(use srfi-*)'
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - (repl): Fix the conditional codes for SIOD-compatible features on
	    SCM_COMPAT_SIOD but not yet enabled by 'use'
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_dynamic_wind): Remove an unused variable
	
	* sigscheme/operations-siod.c
	  - (ScmOp_symbol_boundp): Enclose an local variable into #if
	    !SCM_COMPAT_SIOD_BUGS to suppress warning
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit introduces a syntax 'use' to enable builtin optional
	  features dynamically
	
	* sigscheme/sigscheme.h
	  - (ScmExp_use): New function decl
	* sigscheme/sigscheme.c
	  - (struct module_info): New type
	  - (module_info_table): New variable
	  - (ScmExp_use): New function
	  - (SigScm_Initialize_internal):
	    - Add initialization for 'use'
	    - Replace optional procedures initialization with ScmExp_use()
	* sigscheme/operations-siod.c
	  - (SigScm_Initialize_SIOD): Add runtime SRFI-60 initialization as
	    dependency resolution on dynamic SIOD-compatible feature
	    initialization
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (create_loaded_str): Removed
	  - (create_loaded_sym): New function reformed from create_loaded_str()
	  - (ScmOp_provide, ScmOp_providedp):
	    * Change feature-identifier from string to symbol
	    * Simplify with DECLARE_FUNCTION() and ASSERT_SYMBOLP()
	  - (ScmOp_require): Follow the change of the feature identifier
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_c_length): Add a FIXME comment
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - (scm_return_value, Scm_eval_c_string, Scm_eval_c_string_internal,
	    Scm_return_value): Move to sigscheme.c
	* sigscheme/sigscheme.c
	  - (Scm_eval_c_string, Scm_eval_c_string_internal, Scm_return_value):
	    Moved from datas.c
	  - (scm_return_value):
	    * Ditto
	    * Make static
	* sigscheme/operations-siod.c
	  - (SigScm_Initialize_SIOD): Remove unnecessary scm_return_value
	    initialization
	* sigscheme/sigscheme.h
	  - (Scm_eval_c_string, Scm_return_value): Move section
	
2005-10-04 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations-srfi34.c
	  - (ScmExp_SRFI34_guard): move ASSERT_SYMBOLP location
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal):
	    * Reorganize sections
	    * Add some FIXME comments
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_lambda): Add a FIXME comment
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_symbol_boundp): Change type for args
	* sigscheme/operations-siod.c
	  - (SigScm_Initialize_SIOD): Follow the type change of
	    ScmOp_symbol_boundp
	  - (ScmOp_symbol_boundp):
	    * Accept optional 'env' as 2nd argument
	    * Simplify with new macros
	    * Make SIOD-compatible behavior SCM_COMPAT_SIOD_BUGS
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	* sigscheme/test/test-exp.scm
	  - Insert copyright header. Please insert to other files.
	
	    Lacking copyright and license may involve all participant people
	    into unhappy situation (such as legal confliction). And developers
	    cannot freely and safely reuse SigScheme's codebase.
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test-eval.scm
	  - Insert copyright header
	  - Replace SigScheme-dependent '() with (interaction-environment)
	  - Add some tests
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_eval): New function decl
	* sigscheme/sigscheme.h
	  - (SCM_EVAL): Replace ScmOp_eval with Scm_eval
	* sigscheme/eval.c
	  - (Scm_eval): Renamed from previous ScmOp_eval
	  - (ScmOp_eval): Implement as a wrapper to Scm_eval that performs
	    error check as Scheme procedure
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (ENVP, ASSERT_ENVP): New macro
	* sigscheme/sigschemetype.h
	  - (SCM_INTERACTION_ENV): Moved from sigscheme.h
	  - (SCM_R5RS_ENV, SCM_NULL_ENV, SCM_ENVP): New macro
	* sigscheme/sigscheme.h
	  - (SCM_INTERACTION_ENV): Move to sigschemetype.h
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* Add a test for expired continuation case. Current
	  setjmp/longjmp implementation cannot run it properly
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-continuation.scm
	  - Insert copyright header
	  - Rewrite "call/cc test1" style to "call/cc #1"
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - Add a TODO comment
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SigScm_quote, SigScm_quasiquote, SigScm_unquote;
	    SigScm_unquote_splicing): Move to sigschemetype.h
	* sigscheme/sigschemetype.h
	  - (SigScm_quote, SigScm_quasiquote, SigScm_unquote;
	    SigScm_unquote_splicing): Moved from sigschemeinternal.h
	  - (SCM_QUOTE, SCM_QUASIQUOTE, SCM_UNQUOTE, SCM_UNQUOTE_SPLICING):
	    Move into new section "Predefined Symbols"
	* uim/uim-compat-scm.c
	  - (uim_scm_quote): Simplify
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi34.c
	  - (ScmOp_SRFI34_with_exception_handler): Fix function type for
	    DECLARE_FUNCTION
	  - (ScmExp_SRFI34_guard): Fix unsafe argument handling
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* move register SRFI and SIOD function registering and variable
	  initialization to each operations-*.c file
	
	* sigscheme/operations-srfi1.c
	  - (SigScm_Initialize_SRFI1): new func
	* sigscheme/operations-srfi2.c
	  - (SigScm_Initialize_SRFI2): new func
	* sigscheme/operations-srfi23.c
	  - (SigScm_Initialize_SRFI23): new func
	* sigscheme/operations-srfi34.c
	  - (SigScm_Initialize_SRFI34): new func
	* sigscheme/operations-srfi38.c
	  - (SigScm_Initialize_SRFI38): new func
	* sigscheme/operations-srfi60.c
	  - (SigScm_Initialize_SRFI60): new func
	* sigscheme/operations-siod.c
	  - (SigScm_Initialize_SIOD): new func
	
	* sigscheme/sigscheme.h
	  - (SigScm_Initialize_SRFI1): new func
	  - (SigScm_Initialize_SRFI2): new func
	  - (SigScm_Initialize_SRFI23): new func
	  - (SigScm_Initialize_SRFI34): new func
	  - (SigScm_Initialize_SRFI38): new func
	  - (SigScm_Initialize_SRFI60): new func
	  - (SigScm_Initialize_SIOD): new func
	
	* sigscheme/sigscheme.c
	  - (ScmScm_Initialize_internal): call each SRFI's initialize function
	
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations-srfi34.c
	  - (ScmExp_SRFI34_guard): simplify loop
	
2005-10-03 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/sigschemetype.h : Add 'extern SigScm_quote' removed in
	  r1703 again since SCM_QUOTE is used in uim-compat-scm.c.
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/datas.c
	  - (Scm_CallWithCurrentContinuation): set EvalState's ret_type
	* test/test-srfi34.scm
	  - enable 3 test cases which uses call/cc
	* sigscheme/config.h
	  - (SCM_USE_SRFI34): enable again
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations-srfi34.c
	  - (ScmOp_SRFI34_raise): fix invalid jmp_buf pointer handling
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* revise SRFI-34 procedures
	
	* sigscheme/sigscheme.c
	  - (SigScm_initialize_internal): export "guard" as SyntaxVariadic1
	* sigscheme/sigscheme.h
	  - (ScmOp_dynamic_wind): add missing declaration
	  - (ScmExp_SRFI34_guard): renamed from ScmOp_SRFI34_guard
	* sigscheme/operations-srfi34.c
	  - (ScmExp_SRFI34_guard): renamed from ScmOp_SRFI34_guard.
	    insert DECLARE_FUNCTION and ASSERT_*P
	  - (guard_handle_clauses): change args
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV): new macro
	  - (ScmOp_SRFI34_with_exception_handler): insert DECLARE_FUNCTION
	    and ASSERT_*P
	  - (ScmOp_SRFI34_raise): insert DECLARE_FUNCTION
	
	* sigscheme/test/test-srfi34.scm
	  - new file
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-continuation.scm
	  - add 2 test cases
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_dynamic_wind): New function. Currently only a placeholder
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Add initialization for dynamic-wind
	* sigscheme/config.h
	  - (SCM_USE_SRFI34): Disabled temporarily
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_dynamic_wind): New function. Currently only a placeholder
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Add initialization for dynamic-wind
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_call_with_values): Add assertions
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi34.c
	  - Add some FIXME comments. Please fix it. I'll prepare other
	    facilities to run the feature with the new continuation API
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - (finalize_protected_var): Clear the protected variables
	  - (finalize_continuation_env): Remove variable cleanup
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (enum ScmFuncTypeCode): Remove obsolete members
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - Remove an obsolete comment
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit encapsulates continuation implementation into datas.c
	  and optimizes
	
	  This changes conflict with recent SRFI-34 codes. To reorganize with
	  it, I commit this first. Sorry for inconvenience.
	
	* sigscheme/sigschemetype.h
	  - Remove setjmp.h
	  - (struct _ScmContInfo, ScmContInfo): Removed
	  - (struct ScmObjInternal_): Change member definition of struct
	    ScmContinuation
	  - (SCM_CONTINUATION_CONTINFO, SCM_CONTINUATION_JMPENV,
	    SCM_CONTINUATION_SET_CONTINFO): Removed
	  - (SCM_CONTINUATION_OPAQUE0, SCM_CONTINUATION_SET_OPAQUE0,
	    SCM_CONTINUATION_OPAQUE1, SCM_CONTINUATION_SET_OPAQUE1): New macro
	* sigscheme/sigschemeinternal.h
	  - (scm_continuation_thrown_obj): Removed
	  - (Scm_CallWithCurrentContinuation, Scm_CallContinuation): New
	    function decl
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Move continuation environment
	    initialization into SigScm_InitStorage()
	* sigscheme/datas.c
	  - (SCM_NESTED_CONTINUATION_ONLY): New macro
	  - (continuation_thrown_obj, continuation_stack): New static variable
	  - (initialize_continuation_env, finalize_continuation_env,
	    continuation_stack_push, continuation_stack_pop,
	    continuation_stack_unwind): New static function
	  - (SigScm_InitStorage, SigScm_FinalizeStorage): Add continuation
	    environment handling
	  - (sweep_obj):
	    * Remove free(3) for continuation
	    * Reorder object types based on their probable appearance rate
	  - (Scm_NewContinuation): Follow the definition change of
	    continuation object
	  - (CONTINUATION_JMPENV, CONTINUATION_SET_JMPENV, CONTINUATION_UPPER,
	    CONTINUATION_SET_UPPER, INVALID_CONTINUATION): New macro
	  - (Scm_CallWithCurrentContinuation, Scm_CallContinuation): New
	    function
	* sigscheme/eval.c
	  - Remove setjmp.h
	  - (scm_continuation_thrown_obj): Removed
	  - (call): Replace continuation handling with Scm_CallContinuation()
	* sigscheme/operations.c
	  - (ScmOp_call_with_current_continuation): Replace continuation
	    handling with Scm_CallWithCurrentContinuation()
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* implement SRFI-34 "Exception Handling for Programs"
	
	* sigscheme/sigschemeinternal.h
	  - (scm_exception_handlers,
	     scm_exception_continuations): new variable
	* sigscheme/config.h
	  - (SCM_USE_SRFI34): new macro
	* sigscheme/operations.c
	  - include operations-srfi34.c if SCM_USE_34 is 1
	* sigscheme/sigscheme.c
	  - export "with-exception-handler", "guard" and "raise"
	  - protect scm_exception_handlers and scm_exception_continuations
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI34_with_exception_handler,
	     ScmOp_SRFI34_guard,
	     ScmOp_SRFI34_raise): new function
	
	* sigscheme/operations-srfi34.c
	  - new file
	
	
2005-10-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/unittest.scm
	  - (total-report): change output message format
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - Insert section headers
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_call_with_current_continuation): Change function type to
	    ProcedureFixedTailRec1
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Ditto
	* sigscheme/operations.c
	  - (ScmOp_call_with_current_continuation):
	    * Ditto
	    * Support proper tail recursion partially, as disabled code. See
	      the comment for further information
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_call_with_current_continuation):
	    * Make logical intention clear
	    * Add some comments
	
2005-10-03 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_PROCEDUREP): New macro
	* sigscheme/sigschemeinternal.h
	  - (PROCEDUREP, ASSERT_PROCEDUREP): New macro
	* sigscheme/operations.c
	  - (ScmOp_procedurep): Simplify with PROCEDUREP
	  - (ScmOp_call_with_current_continuation): Simplify with
	    ASSERT_PROCEDUREP
	
2005-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_call_with_values): Fix function type for DECLARE_FUNCTION()
	
	* sigscheme/TODO
	  - Update
	
2005-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Add a test for call-with-values
	
2005-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit makes SCM_RETTYPE_NEED_CALL_AS_IS obsolete
	
	* sigscheme/sigschemetype.h
	  - (enum ScmReturnType): Remove SCM_RETTYPE_NEED_CALL_AS_IS
	* sigscheme/eval.c
	  - (ScmOp_eval): Remove SCM_RETTYPE_NEED_CALL_AS_IS handlings
	
2005-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_call_with_values): Simplify with Scm_tailcall()
	* sigscheme/operations-srfi8.c
	  - (ScmOp_SRFI8_receive): Simplify with Scm_tailcall()
	
2005-10-02 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (Scm_tailcall): New function decl
	* sigscheme/eval.c
	  - (Scm_tailcall): New function
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-tail-rec.scm
	  - (rec-receive): New procedure
	  - Add new test "proper tail recursion by receive"
	
2005-10-01 kzk <mover@hct.zaq.ne.jp>
	
	* small fixes
	
	* sigscheme/debug.c
	  - remove SCM_INVALID declaration because it's in sigschemeinternal.h
	* sigscheme/test/test-define.scm
	  - move (total-report) location 
	
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	Application of argument extraction & error reporting macros to actual
	code.
	
	* sigscheme/eval.c
	  - (reduce, call, ScmExp_if, ScmExp_and, ScmExp_or, ScmExp_begin): 
	    Use the new argument extracting / error reporting macros.
	
	  - (ScmExp_lambda): Use the new argument extracting / error reporting
	    macros.  Take advantage of the new function calling mechanism.
	
	* sigscheme/sigscheme.h
	  - (ScmExp_lambda): Change prototype declaration.
	
	* sigscheme/sigscheme.c
	  - (ScmExp_lambda): Change function type.
	
	* sigscheme/operations.c
	  - (ScmOp_c_length): Make non-static.  (The prototype in r1727 should
	    have been included in this commit...)
	
	  - (ScmOp_number2string): Reject radices != 2,8,10, or 16 if
	    SCM_STRICT_R5RS.
	
	  - (ScmOp_char_numericp, ScmOp_char_whitespace,
	    ScmOp_char_upper_casep, ScmOp_char_lower_casep, ScmOp_char_downcase):
	    Fix error messages.
	
	  - (ScmOp_string_equal): Add parameter type check.
	
	  - (ScmOp_map): Fix typo in comment.
	
	  - (ScmOp_call_with_current_continuation): Remove ISO C incompliance.
	    setjmp() has an unusually strict constraint for its invocation.
	
	  - (ScmOp_eqvp, ScmOp_eqp, ScmOp_equalp, ScmOp_add, ScmOp_multiply,
	    ScmOp_subtract, ScmOp_divide, ScmOp_numberp, ScmOp_equal, ScmOp_less,
	    ScmOp_less_eq, ScmOp_greater, ScmOp_greater_eq, ScmOp_zerop,
	    ScmOp_positivep, ScmOp_negativep, ScmOp_oddp, ScmOp_evenp, ScmOp_max,
	    ScmOp_min, ScmOp_abs, ScmOp_quotient, ScmOp_modulo, ScmOp_remainder,
	    ScmOp_number2string, ScmOp_string2number, ScmOp_not, ScmOp_booleanp,
	    ScmOp_car, ScmOp_cdr, ScmOp_pairp, ScmOp_cons, ScmOp_setcar,
	    ScmOp_setcdr, ScmOp_caar, ScmOp_cadr, ScmOp_cdar, ScmOp_cddr,
	    ScmOp_caddr, ScmOp_cdddr, ScmOp_caaar, ScmOp_caadr, ScmOp_cadar,
	    ScmOp_cdaar, ScmOp_cdadr, ScmOp_cddar, ScmOp_caaaar, ScmOp_caaadr,
	    ScmOp_caadar, ScmOp_caaddr, ScmOp_cadaar, ScmOp_cadadr, ScmOp_caddar,
	    ScmOp_cadddr, ScmOp_cdaaar, ScmOp_cdaadr, ScmOp_cdadar, ScmOp_cdaddr,
	    ScmOp_cddaar, ScmOp_cddadr, ScmOp_cdddar, ScmOp_cddddr, ScmOp_list,
	    ScmOp_nullp, ScmOp_listp, ScmOp_length, ScmOp_symbolp,
	    ScmOp_symbol2string, ScmOp_string2symbol, ScmOp_charp,
	    ScmOp_char_equal, ScmOp_char_alphabeticp, ScmOp_char_numericp,
	    ScmOp_char_whitespacep, ScmOp_char_upper_casep,
	    ScmOp_char_lower_casep, ScmOp_char_upcase, ScmOp_char_downcase,
	    ScmOp_stringp, ScmOp_make_string, ScmOp_string, ScmOp_string_length,
	    ScmOp_string_ref, ScmOp_string_set, ScmOp_string_equal,
	    ScmOp_string_substring, ScmOp_string_append, ScmOp_string2list,
	    ScmOp_string_copy, ScmOp_string_fill, ScmOp_vector_length,
	    ScmOp_vector_ref, ScmOp_vector_set, ScmOp_vector2list,
	    ScmOp_vector_fill, ScmOp_procedurep, ScmOp_map, ScmOp_for_each,
	    ScmOp_force, ScmOp_call_with_current_continuation, ScmOp_values,
	    ScmOp_call_with_values): Use new argument extraction / error
	    reporting macros.
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/runtest-tail-rec.sh
	* sigscheme/test/test-tail-rec.scm
	  - Modify some messages
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (call_closure): Revert a comment
	
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	Refinements to the argument extraction & error handling mechanism.
	
	* sigscheme/sigschemeinternal.h
	  - (DECLARE_FUNCTION): Remove some variable declarations.
	  - (ERR_OBJ): Renamed from ERR.
	  - (ERR): New macro.
	  - (NO_MORE_ARG): Add conditional error handling.
	  - (ASSERT_PROPER_ARG_LIST): Nullify conditionally.
	  - (POP_ARG, MUST_POP_ARG): Simplify.
	  - (ASSERT_TYPE): Sync with ERR -> ERR_OBJ renaming.
	  - (ScmOp_c_length): Add prototype declaration.
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/eval.c
	  - (ScmOp_eval): Move down some variable initializations to avoid
	    potential infinite recursion.
	
2005-10-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (lookup_frame): optimize loop for handling dot list
	
2005-10-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - revert changes of r1723 because changing dot-arg desructively causes
	    the problem like follows.
	
	    - before first call
	    (define (dotarg-2 x . y))
	
	    - after first call
	    (define (dotarg-2 x y))  <= argument list is changed destructively
	
	* sigscheme/test/test-apply.scm
	  - add test cases for this problem
	      
	
2005-10-01 kzk <mover@hct.zaq.ne.jp>
	
	* variable lookup optimization
	
	* sigscheme/eval.c
	  - (Scm_ExtendEnvironment): change destructively "rest_vars"
	    when dot list appears as like as "rest_vals"
	  - (lookup_frame): now no need to handle dot list in this
	    function
	
2005-10-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemeinternal.h
	  - remove Scm_LookupFrame
	* sigscheme/eval.c
	  - (lookup_frame): renamed from Scm_LookupFrame and now this
	    function is static
	  - (Scm_AddEnvironment): forgot to rename add_environment to
	    Scm_AddEnvironment 
	
	
2005-10-01 kzk <mover@hct.zaq.ne.jp>
	
	* renaming of enviroment related function
	
	* sigscheme/sigschemeinternal.h
	* sigscheme/error.c
	* sigscheme/operations-srfi2.c
	* sigscheme/operations-siod.c
	* sigscheme/eval.c
	  - (Scm_ExtendEnvironment): renamed from extend_environment
	  - (Scm_AddEnvironment): renamed from add_environment
	  - (Scm_LookupEnvironment): renamed from lookup_environment
	  - (Scm_LookupFrame): renamed from lookup_frame
	  - (Scm_SymbolValue): renamed from symbol_value
	
	
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace): Fix handling of improper lists.
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update. r1718 made call-with-value properly tail recursive. And
	    the test runtest-tail-rec.sh has been passed
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_call_with_values): Change function type to make properly
	    tail recursive
	* sigscheme/operations.c
	  - (ScmOp_call_with_values): Make properly tail recursive
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Change function type for
	    call-with-values
	
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/error.c
	  - Untabify tabs introduced in r1705.
	
	* sigscheme/eval.c
	  - (SCM_INVALID): Remove (moved to sigschemeinternal.h in r1705).
	  - (reduce): Fix misleading comment.
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (enum ScmReturnType): Add SCM_RETTYPE_NEED_CALL_AS_IS
	* sigscheme/eval.c
	  - (ScmOp_eval): Add SCM_RETTYPE_NEED_CALL_AS_IS handlings
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-tail-rec.scm
	  - (rec-call-with-values): New procedure
	  - Add new test "proper tail recursion by call-with-values"
	
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/sigschemeinternal.h
	  - (SETUP_ARG_EXTRACTION, POP): Remove.
	
	  - (NO_MORE_ARG): Add error handling if SCM_STRICT_ARGCHECK.
	
	  - (DECLARE_FUNCTION): Remove a source of gratuitous warnings.
	
	  - (DECLARE_INTERNAL_FUNCTION, ASSERT_NO_MORE_ARG,
	    ASSERT_PROPER_ARG_LIST): New macros.
	
	* sigscheme/operations.c
	  - (SCM_INVALID): Remove (moved to sigschemeinternal.h).
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_call_with_current_continuation): Make
	    scm_continuation_thrown_obj sweepable
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Fix broken initialization of
	    scm_continuation_thrown_obj
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - Include setjmp.h
	  - (Scm_call): Replace SCM_NULL for an env with SCM_INTERACTION_ENV
	  - (call):
	    * Cosmetic change
	    * Eval continuation arg in accordance with suppress_eval even if
	      current implementation does not need this
	    * Optimize a little
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (enum ScmReturnType): New enum
	  - (struct ScmEvalState_): Follow the change
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-continuation.scm
	  - Remove unneeded codes
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_call_with_current_continuation): Fix invalid type check for
	    proc
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal):
	    * Fix lacking variable protection for scm_continuation_thrown_obj
	    * Define call/cc as alias to call-with-current-continuation when
	      SCM_USE_NONSTD_FEATURES
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-tail-rec.scm
	* sigscheme/test/test-continuation.scm
	  - Add some tests for call/cc
	
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/sigschemeinternal.h
	  - (DECLARE_FUNCTION): Fix erroneous initialization.
	  - (SETUP_ARG_EXTRACTION): New macro.
2005-10-01 Jun Inoue <jun.lambda@gmail.com>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_MANGLE, SCM_INVALID, VALIDP, INVALIDP, POP_ARG, POP, ERR,
	    MUST_POP_ARG, NO_MORE_ARG, ASSERT_NO_MORE_ARG, ASSERT_INTP,
	    ASSERT_CONSP, ASSERT_SYMBOLP, ASSERT_CHARP, ASSERT_STRINGP,
	    ASSERT_FUNCP, ASSERT_SYNTAXP, ASSERT_CLOSUREP, ASSERT_VECTORP,
	    ASSERT_PORTP, ASSERT_CONTINUATIONP): New macros for argument
	    extraction and error reporting.
	
	  - (Scm_ErrorObj): New function.  SigScm_ErrorObj marked obsolete.
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_SYNTAXP): New macro
	* sigscheme/sigschemeinternal.h
	  - (SYNTAXP): New macro
	* sigscheme/operations.c
	  - (ScmOp_procedurep): Fix invalid test for syntax and cotinuation
	* sigscheme/test/test-exp.scm
	  - Add tests for 'procedure?'
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_ETC_SET_IMPL): Move to datas.c
	  - (SigScm_quote, SigScm_quasiquote, SigScm_unquote,
	    SigScm_unquote_splicing): Move to sigschemeinternal.h
	* sigscheme/sigschemeinternal.h
	  - (SigScm_quote, SigScm_quasiquote, SigScm_unquote,
	    SigScm_unquote_splicing): Moved from sigschemetype.h
	* sigscheme/datas.c
	  - (SCM_ETC_SET_IMPL): Moved from sigschemetype.h SigScm_null,
	  - (SigScm_true, SigScm_false, SigScm_eof, SigScm_unbound,
	    SigScm_undef, SigScm_null_impl, SigScm_true_impl,
	    SigScm_false_impl, SigScm_eof_impl, SigScm_unbound_impl,
	    SigScm_undef_impl): Moved from sigscheme.c
	  - (initialize_special_constants): New static functions
	  - (SigScm_InitStorage): Invoke initialize_special_constants()
	* sigscheme/sigscheme.c
	  - (SigScm_true, SigScm_false, SigScm_eof, SigScm_unbound,
	    SigScm_undef, SigScm_null_impl, SigScm_true_impl,
	    SigScm_false_impl, SigScm_eof_impl, SigScm_unbound_impl,
	    SigScm_undef_impl): Move to datas.c
	  - (SigScm_Initialize_internal): Move special constants
	    initialization to initialize_special_constants() of datas.c
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SigScm_InitStorage, SigScm_FinalizeStorage): Move to
	    sigschemeinternal.h
	* sigscheme/sigschemeinternal.h
	  - (SigScm_InitStorage, SigScm_FinalizeStorage): Moved from sigscheme.h
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_USE_DEEP_CADRS): New macro
	* sigscheme/sigscheme.h
	  - Enclose the deep c[ad]+rs into #if SCM_USE_DEEP_CADRS
	* sigscheme/operations.c
	  - Ditto
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Ditto
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI1_listequal): Fix argument names inconsistent
	    with the definition
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* r5rs/sigscheme/sigscheme.c
	* r5rs/sigscheme/sigscheme.h
	* r5rs/sigscheme/eval.c
	  - Revert r1698 which is my misunderstanding about the syntax
	    evaluation scheme
	
2005-10-01 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmExp_lambda): Fix invalid argument type for env
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_carpluscdr, ScmOp_SRFI1_split_at,
	    ScmOp_SRFI1_split_at_d): Replace Scm_NewValuePacket() with
	    ScmOp_values() to make multiple values handling abstract
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let): Make efficient
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (define_internal): New function
	  - (ScmExp_define):
	    * Split define_internal() off
	    * Simplify with define_internal()
	  - (ScmExp_let): Simplify with define_internal()
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let):
	    * Fix the invalid scope treatment
	    * Rewrite (let ((foo)) #t) handling as SCM_COMPAT_SIOD_BUGS since
	      it is an invalid R5RS form rather than strict arg check
	    * Simplify
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-siod.c
	  - (ScmOp_symbol_boundp):
	    * Add lacking type check for the arg
	    * Add future implementation as a comment
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-siod.c
	  - (ScmOp_symbol_value, ScmOp_set_symbol_value): Modify error message
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (symbol_value): Simplify
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (extend_environment):
	    * Simplify
	    * Modify the doc
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let_star):
	    * Simplify
	    * Rewrite (let* ((foo)) #t) handling as SCM_COMPAT_SIOD_BUGS since
	      it is an invalid R5RS form rather than strict arg check
	    * Add a RFC comment
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_letrec): Modify a comment
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_DEBUG_BACKTRACE_VAL): New macro
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace):
	    * Print the separator at end
	    * Support SCM_DEBUG_BACKTRACE_VAL
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_DEBUG_BACKTRACE_SEP): New macro
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace):
	    * Replace "foo" style object header with [foo] to avoid confusion
	      with string
	    * Support SCM_DEBUG_BACKTRACE_SEP
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace):
	    * Simplify
	    * Rename the local macro 'IS_UNBOUND' to 'UNBOUNDP' to conform to
	      the standard naming convention of Scheme
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* test/test-exp.scm
	  - Fix a broken parens
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_letrec): Add error check for symbol
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_letrec):
	    * Simplify
	    * Rewrite (letrec ((foo)) #t) handling as SCM_COMPAT_SIOD_BUGS
	      since it is an invalid R5RS form rather than strict arg check
	
2005-09-30 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fixes the invalid environment treatment for letrec. See
	  the paragraph starting with "One restriction on `letrec' is very
	  important: ..." in 4.2.2 Binding constructs of R5RS and [Anthy-dev
	  2214]
	
	* sigscheme/sigschemeinternal.h
	  - (scm_letrec_env): Removed
	* sigscheme/eval.c
	  - (scm_letrec_env): Removed
	  - (symbol_value): Remove unnecessary scm_letrec_env handling
	  - (ScmExp_letrec):
	    * Ditto
	    * Fix the invalid env treatment (letrec ((a 1) (b a)) b)
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Remove unnecessary scm_letrec_env handling
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace): Ditto
	* test/test-exp.scm
	  - Add a test for the invalid letrec form
	
2005-09-30 kzk <mover@hct.zaq.ne.jp>
	
	* show more useful backtrace
	
	* sigscheme/sigschemeinternal.h
	  - (struct trace_frame): add member "ScmObj env"
	* sigscheme/eval.c
	  - (ScmOp_eval): set environment to trace_frame
	* sigscheme/error.c
	  - (SigScm_ShowBacktrace): if symbol is contained in trace_frame's
	    obj, print its value.
	
	
2005-09-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - Cusmetic change
	
2005-09-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (ScmOp_read_char): Simplify
	  - (ScmOp_peek_char, ScmOp_char_readyp): Return dummy value
	
2005-09-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_eqvp):
	    * Simplify
	    * Enclose freecell comparation into #if SCM_DEBUG
	  - (ScmOp_equalp):
	    * Ditto
	    * Enclose C pointer comparation into #if SCM_USE_NONSTD_FEATURES
	    * Optimize comparation for pair (list) and vector
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* Rename 'arg' for argument list to 'args'.
	  Simplify "case" with new FUNCTYPE scheme
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* abolish legacy Scm_RegisterFunc*()
	
	* sigscheme/sigscheme.h
	  - (Scm_RegisterFunc0,
	     Scm_RegisterFunc1,
	     Scm_RegisterFunc2,
	     Scm_RegisterFunc3,
	     Scm_RegisterFunc4,
	     Scm_RegisterFunc5,
	     Scm_RegisterFuncEvaledList,
	     Scm_RegisterFuncRawList,
	     Scm_RegisterFuncRawListTailRec,
	     Scm_RegisterFuncRawListWithTailFlag): removed
	* sigscheme/sigscheme.c
	  - (Scm_RegisterFunc0,
	     Scm_RegisterFunc1,
	     Scm_RegisterFunc2,
	     Scm_RegisterFunc3,
	     Scm_RegisterFunc4,
	     Scm_RegisterFunc5,
	     Scm_RegisterFuncEvaledList,
	     Scm_RegisterFuncRawList,
	     Scm_RegisterFuncRawListTailRec,
	     Scm_RegisterFuncRawListWithTailFlag): removed
	  - replace Scm_RegisterFunc* with Scm_RegisterProcedureFixed*
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* simplify "the-environment" and "verbose" with new FUNCTYPE scheme
	
	* sigscheme/sigscheme.h
	* sigscheme/operations-siod.c
	  - (ScmOp_the_environment,
	     ScmOp_verbose): change args
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal)
	    - "the-environment": export by Scm_RegisterProcedureFixedTailRec0
	    - "verbose": export by Scm_RegisterProcedureVariadic0
	
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* simplify "append, "string-append", "circular-list", "iota", "cons*",
	  "make-list", "list-tabulate", "list=", "concatenate" and
	  "write-with-shared-structure" with new FUNCTYPE scheme
	
	* sigscheme/sigscheme.h
	  - (ScmOp_append,
	     ScmOp_string_append,
	     ScmOp_SRFI1_cons_star, 
	     ScmOp_SRFI1_make_list,
	     ScmOp_SRFI1_circular_list,
	     ScmOp_SRFI1_iota,
	     ScmOp_SRFI1_concatenate,
	     ScmOp_SRFI38_write_with_shared_structure): change args
	* sigscheme/operations.c
	  - (ScmOp_append,
	     ScmOp_string_append): change args
	* sigscheme/operations-srfi38.c
	  - (ScmOp_SRFI1_cons_star, 
	     ScmOp_SRFI1_make_list,
	     ScmOp_SRFI1_circular_list,
	     ScmOp_SRFI1_iota,
	     ScmOp_SRFI1_concatenate): change args
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI38_write_with_shared_structure): change args
	
	* sigscheme/sigscheme.c
	  - "append": export by Scm_RegisterProcedureVariadic0
	  - "string-append": export by Scm_RegisterProcedureVariadic0
	  - "circular-list": export by Scm_RegisterProcedureVariadic0
	  - "iota": export by Scm_RegisterProcedureVariadic1
	  - "cons*": export by Scm_RegisterProcedureVariadic0
	  - "make-list": export by Scm_RegisterProcedureVariadic1
	  - "list-tabulate": export by Scm_RegisterProcedureVariadic1
	  - "concatenate": export by Scm_RegisterProcedureVariadic0
	  - "write-with-shared-structure": expor by
	    Scm_RegisterProcedureVariadic1
	
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (map_multiple_args): initialize map_arg with SCM_FALSE
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* simplify "number->string", "list", "make-string", "string",
	  "make-vector", "vector", "force", "call-with-current-continuation"
	  and "values" with new FUNCTYPE scheme
	
	* sigscheme/operations.c
	* sigscheme/sigscheme.h
	  - (ScmOp_number2string,
	     ScmOp_list,
	     ScmOp_make_string,
	     ScmOp_string,
	     ScmOp_make_vector,
	     ScmOp_vector,
	     ScmOp_force,
	     ScmOp_call_with_current_continuation,
	     ScmOp_values): change args
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal)
	    - "number->string": export by Scm_RegisterProcedureVariadic1
	    - "list": export by Scm_RegisterProcedureVariadic0
	    - "make-string": export by Scm_RegisterProcedureVariadic1
	    - "string": export by Scm_RegisterProcedureVariadic0
	    - "make-vector": export by Scm_RegisterProcedureVariadic1
	    - "vector": export by Scm_RegisterProcedureVariadic0
	    - "force": export by Scm_RegisterProcedureFixed1
	    - "values": export by Scm_RegisterProcedureVariadic0
	    - "call-with-current-continuation": export by
	       Scm_RegisterProcedureFixed1
	
2005-09-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* simplify "read", "read-char", "write", "display", "newline"
	  and "write-char" with new FUNCTYPE scheme
	
	* sigscheme/io.c
	* sigscheme/sigscheme.h
	  - (ScmOp_read,
	     ScmOp_read_char,
	     ScmOp_write, 
	     ScmOp_display,
	     ScmOp_newline,
	     ScmOp_write_char): change args
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal)
	    - "read": export by Scm_RegisterProcedureVariadic0
	    - "read-char": export by Scm_RegisterProcedureVariadic0
	    - "write": export by Scm_RegisterProcedureVariadic1
	    - "display": export by Scm_RegisterProcedureVariadic1
	    - "newline": export by Scm_RegisterProcedureVariadic0
	    - "write-char": export by Scm_RegisterProcedureVariadic1
	
2005-09-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - (repl): Simplify
	
2005-09-29 kzk <mover@hct.zaq.ne.jp>
	
	* simplify "ScmOp_map" and "ScmOp_for_each" by
	  Scm_RegisterProcedureVariadic1
	
	* sigscheme/operations.c
	* sigscheme/sigscheme.h
	  - (ScmOp_map, ScmOp_for_each): change args
	* sigscheme/sigscheme.c
	  - export "map" and "for-each" as Scm_RegisterProcedureVariadic1
	
	
2005-09-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (SigScm_Error, SigScm_ErrorObj):
	    * Add a FIXME comment about backtrace
	    * Rewrite TODO about exception handling with FIXME
	
2005-09-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI23_error): Fix argument types to match with
	    Scm_RegisterProcedureVariadic1()
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error):
	    * Fix broken argument handlings to match with
	      Scm_RegisterProcedureVariadic1()
	    * Simplify
	    * Add some FIXME comments
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (map_single_arg): renamed from map_singular_arg
	  - (map_multiple_arg): renamed from map_plural_arg and change
	    local variable name as like as map_single_arg
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (SigScm_load_internal): Replace SCM_NULL for EVAL with
	    SCM_INTERACTION_ENV
	* sigscheme/datas.c
	  - (Scm_eval_c_string_internal): Ditto
	* sigscheme/main.c
	  - (repl): Ditto
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_eval): Add a comment about () and '()
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (enum ScmDebugCategory): Add SCM_DBG_READ
	* sigscheme/read.c
	  - (SigScm_Read): Add debug printing for each parsed sexp
	* sigscheme/operations-siod.c
	  - (SCM_DBG_SIOD_V5): Replace SCM_DBG_PARSER with SCM_DBG_READ to
	    make compatible with SIOD
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (SigScm_WriteToPort, SigScm_DisplayToPort):
	    * Do nothing if the port is NULL
	    * Replace SIOD-compatible printing suppression with above NULL
	      handling
	* sigscheme/operations-siod.c
	  - (SigScm_SetVerboseLevel): Add printing suppression handlings for
	    verbose level 0
	* sigscheme/sigschemeinternal.h
	  - (scm_std_error_port, scm_current_error_port, scm_std_input_port,
	    scm_std_output_port): New variable decl
	* sigscheme/io.c
	  - (scm_std_input_port, scm_std_output_port): New variable
	* sigscheme/error.c
	  - (scm_std_error_port): New variable
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Add initialization for scm_std_*_port
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (SigScm_CategorizedDebug): Move the position in the flie
	    appropriately. No other changes are appied
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (SigScm_CategorizedDebug, SigScm_Debug): Simplify and reflect
	    current_error_port
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (SigScm_Die, SigScm_Error, SigScm_ErrorObj, SigScm_ShowBacktrace,
	    SigScm_ShowErrorHeader): Simplify with new SigScm_*Error*()
	    printing functions
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemeinternal.h
	  - include stdarg.h for va_list
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SigScm_ErrorPrintf, SigScm_VErrorPrintf, SigScm_ErrorNewline):
	    New function decl
	* sigscheme/error.c
	  - (SigScm_ErrorPrintf, SigScm_VErrorPrintf, SigScm_ErrorNewline):
	    New function
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_ASSERT): Rewrite the expression to Perl-like 'true or die'
	    style
	* sigscheme/error.c
	  - Include lacking stdlib.h for exit(3)
	  - (SigScm_Error, SigScm_ErrorObj):
	    * Replace -1 for exit(3) with C89-compliant EXIT_FAILURE
	  - (SigScm_Die):
	    * Ditto
	    * Change the dummy return value from -1 to 1 to make sense on
	      (cond || die || foo)
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_eval): Enclose trace_frame handlings into #if SCM_DEBUG
	* sigscheme/error.c
	  - (SCM_BACKTRACE_HEADER): New macro
	  - (SigScm_ShowBacktrace):
	    * Enclose the code into #if SCM_DEBUG
	    * Rewrite with SCM_BACKTRACE_HEADER
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_eval): Add strict checking for '() for
	    SCM_STRICT_R5RS. Although () is not a valid R5RS form, we should
	    allow it by default for efficiency
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (enum ScmDebugCategory): Add SCM_DBG_COMPAT
	* sigscheme/debug.c
	  - (SigScm_PredefinedDebugCategories): Add SCM_DBG_COMPAT
	* sigscheme/eval.c
	  - (SCM_ERRMSG_NON_R5RS_ENV): New macro
	  - (ScmOp_scheme_report_environment, ScmOp_null_environment):
	    * Change debug category SCM_DBG_DEVEL to SCM_DBG_COMPAT for the
	      message
	    * Produce an error when SCM_STRICT_R5RS
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.h
	  - (SigScm_EnablePredefinedDebugCategories): Removed
	  - (SigScm_PredefinedDebugCategories): New function decl
	* sigscheme/debug.c
	  - (SigScm_EnablePredefinedDebugCategories): Removed
	  - (SigScm_PredefinedDebugCategories):
	    * New function
	    * (SCM_DBG_DEVEL | SCM_DBG_OTHER) is added
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Rewrite with
	    SigScm_PredefinedDebugCategories()
	* sigscheme/operations-siod.c
	  - (SigScm_SetVerboseLevel): Rewrite with
	    SigScm_PredefinedDebugCategories()
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_INTERACTION_ENV): New macro
	* sigscheme/eval.c
	  - (ScmOp_scheme_report_environment, ScmOp_null_environment,
	    ScmOp_interaction_environment): Replace SCM_NULL with
	    SCM_INTERACTION_ENV
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_scheme_report_environment, ScmOp_null_environment): Add
	    warning message about inconformance with R5RS
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_map):
	    * Add a FIXME comment
	    * Modify comments
	  - (map_singular_arg):
	    * Optimize a CDR() out 
	    * Rename 'ret_tail' to 'ret_last' in accordance with the name
	      'last-pair' of R5RS which indicates last pair of a list
	    * Rename 'args' to 'lst' since the list is not an argument list
	      for a procedure but an element of the argument list.
	      i.e. '(proc, lst)' is the args and 'lst' of the args is not an
	      'args'
	    * Add a FIXME comment
	    * Modify a comment
	  - (map_plural_args): Add a FIXME comment
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_and, ScmExp_or):
	    * Make error handling meaningful
	    * Rename 'obj' to 'val' to indicate its role
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* change "let*", "letrec", "do" for new FUNCTYPE reorganization
	
	* sigscheme/sigscheme.c
	  - export "let*" and "letrec" by Scm_RegisterSyntaxVariadicTailRec1
	  - export "do" by Scm_RegisterSyntaxVariadicTailRec2
	
	* sigscheme/sigscheme.h
	  - (ScmExp_let_star, ScmExp_letrec, ScmExp_do): change args
	* sigscheme/eval.c
	  - (ScmExp_let_star, ScmExp_letrec, ScmExp_do)
	    : change args and optimize with SCM_SHIFT* macro
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi2.c
	  - (ScmOp_SRFI2_and_let_star): Merge handle_claw() since the flow and
	    meanings are not so complex
	  - (handle_claw): Removed
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi2.scm
	  - Fix invalid tests that takes non-symbol for <bound-variable>
	* sigscheme/operations-srfi2.c
	  - (ScmOp_SRFI2_and_let_star): Add lacking invalid form check
	  - (handle_claw):
	    * Reject other than symbol for <bound-variable>. Sorry, the tests
	      I wrote is invalid
	    * Make static
	    * Add lacking invalid form checks
	    * Modify the error message for (<variable> <expression>) style
	      claw since (<variable>) form is not a 'superfulous'
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-srfi2.scm
	  - Fix invalid tests that takes non-symbol for <bound-variable>
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (map_singular_arg): fix wrong initialization..
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* optimize "map", not to use "reverse" and "vector"
	
	* sigscheme/operations.c
	  - (ScmOp_map): split content into map_singular_arg and
	    map_plural_args
	  - (map_singular_arg, map_plural_args): new func
	* sigscheme/TODO
	  - update
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_scheme_report_environment,
	     ScmOp_null_environment): check version
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_or): fix bug introduced in r1629... 
	* sigscheme/test/test-r4rs.scm
	  - remove #Space test cate
	* sigscheme/TODO
	  - update
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* SigScm_Error: always append "\n"
	  - command to search modification part is
	      $ grep "SigScm_Error(" *.c *.h | grep "\\\\n"
	
	* sigscheme/debug.c
	  - (SigScm_Error): always append "\n"
	
	* sigscheme/io.c
	* sigscheme/read.c
	* sigscheme/operations.c
	* sigscheme/encoding.c
	* sigscheme/error.c
	* sigscheme/datas.c
	* sigscheme/operations-srfi38.c
	* sigscheme/operations-srfi1.c
	* sigscheme/operations-siod.c
	* sigscheme/main.c
	* sigscheme/eval.c
	* sigscheme/operations-srfi23.c
	* sigscheme/operations-srfi60.c
	  - remove unncessary "\n" used in the argument of SigScm_Error
	
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_and, ScmOp_or): simplify loop
	  - (ScmOp_begin): remove unnecessary error check
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* "and-let*" : handle "(<expression>)" and "<bound-variable>"
	  style claw
	
	* sigscheme/operations-srfi2.c
	  - (handle_claw): new func to handle "(<expression>)" and
	    "<bound-variable>" style claw
	  - (ScmOp_SRFI2_and_let_star): change args for
	    Scm_RegisterSyntaxVariadicTailRec1
	* sigscheme/sigscheme.c
	  - export "and-let*" by Scm_RegisterSyntaxVariadicTailRec1
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI2_and_let_star): change args for
	    Scm_RegisterSyntaxVariadicTailRec1
	
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (DEBUG_PARSER, DEBUG_GC): Removed
	* sigscheme/read.c
	  - (read_sexpression, read_list, read_char, read_string, read_symbol,
	    read_number_or_symbol, read_word, read_char_sequence): Replace
	    SigScm_CategorizedDebug() with CDBG(), and remove DEBUG_PARSER
	* sigscheme/datas.c
	  - (allocate_heap, add_heap, gc_mark_and_sweep, gc_mark_locations,
	    gc_mark, gc_sweep): Replace
	    SigScm_CategorizedDebug() with CDBG(), and remove DEBUG_GC
	* sigscheme/TODO
	  - Update
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/config.h
	  - (SCM_DEBUG, SCM_DEBUG_GC, SCM_DEBUG_PARSER): New macro
	* sigscheme/sigscheme.h
	  - (SCM_CDBG, SCM_DBG): New macro
	  - (SigScm_EnablePredefinedDebugCategories): New function decl
	* sigscheme/sigschemeinternal.h
	  - (CDBG, DBG): New macro
	  - (DEBUG_PARSER): Reflect SCM_DEBUG_PARSER
	  - (DEBUG_GC): Reflect SCM_DEBUG_GC
	* sigscheme/debug.c
	  - (SigScm_EnablePredefinedDebugCategories): New function
	  - (SigScm_Debug): Make SCM_DBG_DEVEL sensitive
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Improve debug categories
	    configuration
	* sigscheme/operations-siod.c
	  - (SigScm_SetVerboseLevel): Add
	    SigScm_EnablePredefinedDebugCategories() invocation
	* sigscheme/io.c
	  - (SigScm_load_internal): Replace SigScm_CategorizedDebug() with CDBG()
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-siod.c
	  - (sscm_debug_mask_tbl): Add const qualifier
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (SigScm_load_internal): Add categorized debug message
	* sigscheme/read.c
	  - (read_sexpression, read_list, read_char, read_string, read_symbol,
	    read_number_or_symbol, read_word, read_char_sequence): Replace
	    SigScm_Debug() with SigScm_CategorizedDebug()
	* sigscheme/datas.c
	  - (allocate_heap, add_heap, gc_mark_and_sweep, gc_mark_locations,
	    gc_mark, gc_sweep): Ditto
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/error.c
	  - (SigScm_Die, SigScm_Error, SigScm_ErrorObj): Suppress printings
	    as categorized debug message
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (SigScm_CategorizedDebug): Fix broken printing
	* sigscheme/operations-siod.c
	  - (ScmOp_verbose): Fix raw value update with
	    SigScm_SetVerboseLevel()
	  - (SigScm_SetVerboseLevel): Modify the error message
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (SigScm_WriteToPort, SigScm_DisplayToPort): Support
	    SIDO-compatible verbose control
	* sigscheme/main.c
	  - (repl): Ditto
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (debug_mask): Add lacking 'int'
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/debug.c
	  - (SigScm_Display): Change SIOD-compatible 'print' implementation
	    to real 'display'
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (enum ScmDebugCategory): New type
	  - (SigScm_DebugCategories, SigScm_SetDebugCategories,
	    SigScm_CategorizedDebug): New function decl
	* sigscheme/debug.c
	  - (debug_mask): New static variable
	  - (SigScm_DebugCategories, SigScm_SetDebugCategories,
	    SigScm_CategorizedDebug): New function
	* sigscheme/operations-siod.c
	  - (SCM_DBG_SIOD_V0, SCM_DBG_SIOD_V1, SCM_DBG_SIOD_V2,
	    SCM_DBG_SIOD_V3, SCM_DBG_SIOD_V4, SCM_DBG_SIOD_V5): New macro
	  - (sscm_debug_mask_tbl): New static variable
	  - (SigScm_SetVerboseLevel): Add SigScheme-native debugging
	    categories configuration
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Add initizlizations for the debug
	    message control
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi2.c
	  - (ScmOp_SRFI2_and_let_star):
	    * Add some FIXME comments
	    * Insert a comment about and-let* syntax
	    * Replace SCM_NULL for variable initialization with SCM_FALSE. See
	      "Performance improvements" section of the TODO file
	    * Fix NULLP(binding) with !CONSP(binding) as correct error
	      checking although it will be obsolete soon by supporting full
	      and-let* syntax
	* sigscheme/test/test-srfi2.scm
	  - Insert lacking copyright header
	  - Add tests for <bound-variable> and (<expression>) style claw which
	    are not supported by SigScheme implementation
	  - All tests are passed on 'gosh -usrfi-2 test/test-srfi2.scm'
	* sigscheme/TODO
	  - Update
	
2005-09-28 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	* sigscheme/config.h
	  - Move SIOD-related configuration dependency resolution code from
	    sigscheme.h to config.h
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigscheme.h
	* sigscheme/debug.c
	  - (SigScm_Debug): new func
	
	* sigscheme/read.c
	* sigscheme/datas.c
	  - replace "printf" debug message with SigScm_Debug
	    which uses stderr
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	* sigscheme/datas.c
	* sigscheme/sigscheme.h
	  - (Scm_Intern,
	     ScmOp_c_length,
	     ScmOp_reverse,
	     ScmOp_listtail_internal,
	     ScmOp_list_tail,
	     ScmOp_list_ref,
	     ScmOp_memq,
	     ScmOp_memv,
	     ScmOp_member,
	     ScmOp_assq,
	     ScmOp_assv,
	     ScmOp_assoc,
	     ScmOp_list2string,
	     ScmOp_list2vector): rename "list" to "lst"
	
	* sigscheme/eval.c
	  - (qquote_internal): rename "list" to "lst"
	
	* sigscheme/TODO
	  - update  
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/config.h
	* sigscheme/sigscheme.h
	  - (SCM_USE_EUCJP, SCM_USE_SRFI1,
	     SCM_USE_SRFI2, SCM_USE_SRFI8,
	     SCM_USE_SRFI23, SCM_USE_SRFI38,
	     SCM_USE_SRFI60, SCM_USE_NONSTD_FEATURES,
	     SCM_COMPAT_SIOD, SCM_COMPAT_SIOD_BUGS,
	     SCM_STRICT_R5RS, SCM_STRICT_ARGCHECK,
	     SCM_ACCESSOR_ASSERT, SCM_GCC4_READY_GC,
	     SCM_USE_VALUECONS, SCM_VOLATILE_OUTPUT)
	     : move to "config.h" from "sigscheme.h"
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* implement "and-let*" described in srfi-2
	
	* sigscheme/operations-srfi2.c
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI2_and_let_star): new func
	* sigscheme/sigscheme.c
	  - export "and-let*"
	* sigscheme/operations.c
	  - include "operations-srfi2.c" when SCM_USE_SRFI2 is 1
	* sigscheme/test/test-srfi2.scm
	  - test cases for "and-let*"
	 
	
2005-09-28 kzk <mover@hct.zaq.ne.jp>
	
	* add "length+" and "concatenate"
	
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI1_lengthplus, ScmOp_SRFI1_concatenate): new func
	  - update indent
	* sigscheme/sigscheme.c
	  - export "length+" and "concatenate"
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_lengthplus, ScmOp_SRFI1_concatenate): new func
	  - (compare_list): fix build issue
	* test/test-srfi1.scm
	  - add test cases for "split-at", "split-at!", "length+", "concatenate"
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit implements the VALUECONS feature which reduces 1 cons
	  cell consumption on a multiple values delivery
	
	* sigscheme/sigscheme.h
	  - (SCM_USE_VALUECONS): Set to 1 by default
	  - Move "Struct Declarations" section to after "Macro Declarations"
	    since sigschemetype.h needs SCM_USE_VALUECONS definition
	  - (Scm_NewValuePacket): Disable when SCM_USE_VALUECONS is 1
	* sigscheme/sigschemetype.h
	  - (enum ScmObjType): Remove ScmValueCons
	  - (SCM_AS_VALUECONS, SCM_VALUECONSP, SCM_ENTYPE_VALUECONS): Removed
	  - (SCM_VALUEPACKETP, SCM_NULLVALUESP, SCM_ENTYPE_VALUEPACKET,
	    SCM_VALUEPACKET_VALUES): New macro for SCM_USE_VALUECONS
	* sigscheme/sigschemeinternal.h
	  - (NULLVALUESP): New macro
	* sigscheme/operations.c
	  - (ScmOp_values, ScmOp_call_with_values): Support SCM_USE_VALUECONS
	* sigscheme/datas.c
	  - (mark_obj): Ditto
	  - (Scm_NewValuePacket): Disable when SCM_USE_VALUECONS is 1
	* sigscheme/sigscheme.c
	  - (SigScm_null_values_impl): Removed
	  - (SigScm_Initialize_internal): Support SCM_USE_VALUECONS
	* sigscheme/TODO
	  - Update
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/scm_functype_mand_max15.diff
	  - New file
	  - Apply this patch if you really want 6+ unfolded arguments
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (Scm_RegisterSyntaxFixed6, Scm_RegisterSyntaxFixed7,
	    Scm_RegisterSyntaxFixed8, Scm_RegisterSyntaxFixed9,
	    Scm_RegisterSyntaxFixed10, Scm_RegisterSyntaxFixed11,
	    Scm_RegisterSyntaxFixed12, Scm_RegisterSyntaxFixed13,
	    Scm_RegisterSyntaxFixed14, Scm_RegisterSyntaxFixed15,
	    Scm_RegisterSyntaxFixedTailRec6, Scm_RegisterSyntaxFixedTailRec7,
	    Scm_RegisterSyntaxFixedTailRec8, Scm_RegisterSyntaxFixedTailRec9,
	    Scm_RegisterSyntaxFixedTailRec10,
	    Scm_RegisterSyntaxFixedTailRec11,
	    Scm_RegisterSyntaxFixedTailRec12,
	    Scm_RegisterSyntaxFixedTailRec13,
	    Scm_RegisterSyntaxFixedTailRec14,
	    Scm_RegisterSyntaxFixedTailRec15, Scm_RegisterSyntaxVariadic6,
	    Scm_RegisterSyntaxVariadic7, Scm_RegisterSyntaxVariadic8,
	    Scm_RegisterSyntaxVariadic9, Scm_RegisterSyntaxVariadic10,
	    Scm_RegisterSyntaxVariadic11, Scm_RegisterSyntaxVariadic12,
	    Scm_RegisterSyntaxVariadic13, Scm_RegisterSyntaxVariadic14,
	    Scm_RegisterSyntaxVariadic15, Scm_RegisterSyntaxVariadicTailRec6,
	    Scm_RegisterSyntaxVariadicTailRec7,
	    Scm_RegisterSyntaxVariadicTailRec8,
	    Scm_RegisterSyntaxVariadicTailRec9,
	    Scm_RegisterSyntaxVariadicTailRec10,
	    Scm_RegisterSyntaxVariadicTailRec11,
	    Scm_RegisterSyntaxVariadicTailRec12,
	    Scm_RegisterSyntaxVariadicTailRec13,
	    Scm_RegisterSyntaxVariadicTailRec14,
	    Scm_RegisterSyntaxVariadicTailRec15, Scm_RegisterProcedureFixed6,
	    Scm_RegisterProcedureFixed7, Scm_RegisterProcedureFixed8,
	    Scm_RegisterProcedureFixed9, Scm_RegisterProcedureFixed10,
	    Scm_RegisterProcedureFixed11, Scm_RegisterProcedureFixed12,
	    Scm_RegisterProcedureFixed13, Scm_RegisterProcedureFixed14,
	    Scm_RegisterProcedureFixed15, Scm_RegisterProcedureFixedTailRec6,
	    Scm_RegisterProcedureFixedTailRec7,
	    Scm_RegisterProcedureFixedTailRec8,
	    Scm_RegisterProcedureFixedTailRec9,
	    Scm_RegisterProcedureFixedTailRec10,
	    Scm_RegisterProcedureFixedTailRec11,
	    Scm_RegisterProcedureFixedTailRec12,
	    Scm_RegisterProcedureFixedTailRec13,
	    Scm_RegisterProcedureFixedTailRec14,
	    Scm_RegisterProcedureFixedTailRec15,
	    Scm_RegisterProcedureVariadic6, Scm_RegisterProcedureVariadic7,
	    Scm_RegisterProcedureVariadic8, Scm_RegisterProcedureVariadic9,
	    Scm_RegisterProcedureVariadic10, Scm_RegisterProcedureVariadic11,
	    Scm_RegisterProcedureVariadic12, Scm_RegisterProcedureVariadic13,
	    Scm_RegisterProcedureVariadic14, Scm_RegisterProcedureVariadic15,
	    Scm_RegisterProcedureVariadicTailRec6,
	    Scm_RegisterProcedureVariadicTailRec7,
	    Scm_RegisterProcedureVariadicTailRec8,
	    Scm_RegisterProcedureVariadicTailRec9,
	    Scm_RegisterProcedureVariadicTailRec10,
	    Scm_RegisterProcedureVariadicTailRec11,
	    Scm_RegisterProcedureVariadicTailRec12,
	    Scm_RegisterProcedureVariadicTailRec13,
	    Scm_RegisterProcedureVariadicTailRec14,
	    Scm_RegisterProcedureVariadicTailRec15, Scm_RegisterSyntaxFixed6,
	    Scm_RegisterSyntaxFixed7, Scm_RegisterSyntaxFixed8,
	    Scm_RegisterSyntaxFixed9, Scm_RegisterSyntaxFixed10,
	    Scm_RegisterSyntaxFixed11, Scm_RegisterSyntaxFixed12,
	    Scm_RegisterSyntaxFixed13, Scm_RegisterSyntaxFixed14,
	    Scm_RegisterSyntaxFixed15, Scm_RegisterSyntaxFixedTailRec6,
	    Scm_RegisterSyntaxFixedTailRec7, Scm_RegisterSyntaxFixedTailRec8,
	    Scm_RegisterSyntaxFixedTailRec9, Scm_RegisterSyntaxFixedTailRec10,
	    Scm_RegisterSyntaxFixedTailRec11,
	    Scm_RegisterSyntaxFixedTailRec12,
	    Scm_RegisterSyntaxFixedTailRec13,
	    Scm_RegisterSyntaxFixedTailRec14,
	    Scm_RegisterSyntaxFixedTailRec15, Scm_RegisterSyntaxVariadic6,
	    Scm_RegisterSyntaxVariadic7, Scm_RegisterSyntaxVariadic8,
	    Scm_RegisterSyntaxVariadic9, Scm_RegisterSyntaxVariadic10,
	    Scm_RegisterSyntaxVariadic11, Scm_RegisterSyntaxVariadic12,
	    Scm_RegisterSyntaxVariadic13, Scm_RegisterSyntaxVariadic14,
	    Scm_RegisterSyntaxVariadic15, Scm_RegisterSyntaxVariadicTailRec6,
	    Scm_RegisterSyntaxVariadicTailRec7,
	    Scm_RegisterSyntaxVariadicTailRec8,
	    Scm_RegisterSyntaxVariadicTailRec9,
	    Scm_RegisterSyntaxVariadicTailRec10,
	    Scm_RegisterSyntaxVariadicTailRec11,
	    Scm_RegisterSyntaxVariadicTailRec12,
	    Scm_RegisterSyntaxVariadicTailRec13,
	    Scm_RegisterSyntaxVariadicTailRec14,
	    Scm_RegisterSyntaxVariadicTailRec15, Scm_RegisterProcedureFixed6,
	    Scm_RegisterProcedureFixed7, Scm_RegisterProcedureFixed8,
	    Scm_RegisterProcedureFixed9, Scm_RegisterProcedureFixed10,
	    Scm_RegisterProcedureFixed11, Scm_RegisterProcedureFixed12,
	    Scm_RegisterProcedureFixed13, Scm_RegisterProcedureFixed14,
	    Scm_RegisterProcedureFixed15, Scm_RegisterProcedureFixedTailRec6,
	    Scm_RegisterProcedureFixedTailRec7,
	    Scm_RegisterProcedureFixedTailRec8,
	    Scm_RegisterProcedureFixedTailRec9,
	    Scm_RegisterProcedureFixedTailRec10,
	    Scm_RegisterProcedureFixedTailRec11,
	    Scm_RegisterProcedureFixedTailRec12,
	    Scm_RegisterProcedureFixedTailRec13,
	    Scm_RegisterProcedureFixedTailRec14,
	    Scm_RegisterProcedureFixedTailRec15,
	    Scm_RegisterProcedureVariadic6, Scm_RegisterProcedureVariadic7,
	    Scm_RegisterProcedureVariadic8, Scm_RegisterProcedureVariadic9,
	    Scm_RegisterProcedureVariadic10, Scm_RegisterProcedureVariadic11,
	    Scm_RegisterProcedureVariadic12, Scm_RegisterProcedureVariadic13,
	    Scm_RegisterProcedureVariadic14, Scm_RegisterProcedureVariadic15,
	    Scm_RegisterProcedureVariadicTailRec6,
	    Scm_RegisterProcedureVariadicTailRec7,
	    Scm_RegisterProcedureVariadicTailRec8,
	    Scm_RegisterProcedureVariadicTailRec9,
	    Scm_RegisterProcedureVariadicTailRec10,
	    Scm_RegisterProcedureVariadicTailRec11,
	    Scm_RegisterProcedureVariadicTailRec12,
	    Scm_RegisterProcedureVariadicTailRec13,
	    Scm_RegisterProcedureVariadicTailRec14,
	    Scm_RegisterProcedureVariadicTailRec15): Removed since they will
	    rarely be used. Source readability is preferred although they does
	    not affect actual code size
	* sigscheme/eval.c
	  - (call): Follow the changes
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	* sigscheme/sigscheme.c
	  - Move the positions of some functions to prepare subsequent
	    work. No actual code changes are applied
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_REDUCE, SCM_REDUCE_EXT): Removed
	* sigscheme/TODO
	  - Update
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI60_logand, ScmOp_SRFI60_logior, ScmOp_SRFI60_logxor):
	    Change function type to SCM_REDUCTION_OPERATOR
	* sigscheme/operations-srfi60.c
	  - (BITWISE_OPERATION_BODY): New macro
	  - (ScmOp_SRFI60_logand, ScmOp_SRFI60_logior, ScmOp_SRFI60_logxor):
	    Rewrite as SCM_REDUCTION_OPERATOR
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal):
	    * Follow above changes
	    * Replace obsolete function registration interface for SRFI-60
	      functions with new one
	* sigscheme/TODO
	  - Update
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_quote_impl, SigScm_quasiquote_impl, SigScm_unquote_impl,
	    SigScm_unquote_splicing_impl): Removed unused and unnecessary
	    variable
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_DEFINE_ALIAS): Removed
	  - (Scm_DefineAlias): New function decl
	* sigscheme/sigscheme.c
	  - (Scm_DefineAlias): New function to replace SCM_DEFINE_ALIAS() with
	    less code size
	  - (SigScm_Initialize_internal): Replace SCM_DEFINE_ALIAS() with
	    Scm_DefineAlias()
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_FUNC_EXEC_SUBR0, SCM_FUNC_EXEC_SUBR1, SCM_FUNC_EXEC_SUBR2,
	    SCM_FUNC_EXEC_SUBR3, SCM_FUNC_EXEC_SUBR4, SCM_FUNC_EXEC_SUBR5,
	    SCM_FUNC_EXEC_SUBRL, SCM_FUNC_EXEC_SUBRR, SCM_FUNC_EXEC_SUBRF):
	    Removed since already obsoleted
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Add some tests for call-with-values with 'apply'
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_eval): Remove broken multiple values handling based on the
	    patch by Jun Inoue posted in [Anthy-dev 2441]. Thanks
	
2005-09-27 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_REF_CAR, SCM_REF_CDR): Make argument name appropriate
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit introduces the abstract ScmObj reference for
	  storage-representation independent efficient list operations
	
	* sigscheme/sigschemetype.h
	  - (ScmRef): New type
	  - (SCM_REF_CAR, SCM_REF_CDR, SCM_DEREF, SCM_SET): New macro
	* sigscheme/sigschemeinternal.h
	  - (DEREF, SET, REF_CAR, REF_CDR): New macro
	* sigscheme/TODO
	  - Update
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi60.c
	  - (ScmOp_SRFI60_logand, ScmOp_SRFI60_logior, ScmOp_SRFI60_logxor):
	    Add FIXME comment
	* sigscheme/TODO
	  - Update
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_STRICT_ARGCHECK): Set 1 by default
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_and, ScmExp_or, ScmExp_begin): Add TODO comment
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Resurrect or add some 'values' related tests
	  - Rename test names simple enough
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_eval): Update TODO comment
	  - (ScmOp_quasiquote): Remove a TODO comment
	* sigscheme/TODO
	  - Update
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (reduce, call_closure): Add lacking prototype decl
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Resurrect SIOD-compatible '='
	    predicate
	
2005-09-25 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit applies Jun Inoue's grand FUNCTYPE reorganization II
	  patches posted in [Anthy-dev 2398] and [Anthy-dev 2432]. Thank you
	  for the great work! No other changes except configuration macros are
	  applied
	
	* sigscheme/sigschemetype.h
	  - (struct ScmEvalState_, ScmEvalState): New type
	  - (enum ScmReductionState): New enum
	  - (enum ScmFuncTypeCode): Reorganize for the new procedure calling
	    interface
	  - (struct ScmObjInternal_, SCM_FUNC_CFUNC,
	    ScmFuncTypeRawListTailRec, ScmFuncTypeRawListWithTailFlag): Follow
	    the new procedure calling interface
	* sigscheme/sigscheme.h
	  - (SCM_VOLATILE_OUTPUT): New macro
	  - (Scm_call): New function decl
	  - (ScmOp_apply, ScmOp_quote, ScmExp_if, ScmExp_set, ScmExp_cond,
	    ScmExp_case, ScmExp_and, ScmExp_or, ScmExp_let, ScmExp_let_star,
	    ScmExp_letrec, ScmExp_begin, ScmExp_do, ScmExp_define, ScmOp_add,
	    ScmOp_multiply, ScmOp_subtract, ScmOp_divide, ScmOp_equal,
	    ScmOp_less, ScmOp_greater, ScmOp_less_eq, ScmOp_greater_eq,
	    ScmOp_max, ScmOp_min, ScmOp_call_with_values,
	    ScmOp_SRFI8_receive): Follow the new procedure calling interface
	  - (ScmOp_delay, ScmOp_quasiquote, ScmOp_unquote,
	    ScmOp_unquote_splicing): Change argument names
	  - (Scm_RegisterReductionOperator, Scm_RegisterSyntaxFixed0,
	    Scm_RegisterSyntaxFixed1, Scm_RegisterSyntaxFixed2,
	    Scm_RegisterSyntaxFixed3, Scm_RegisterSyntaxFixed4,
	    Scm_RegisterSyntaxFixed5, Scm_RegisterSyntaxFixed6,
	    Scm_RegisterSyntaxFixed7, Scm_RegisterSyntaxFixed8,
	    Scm_RegisterSyntaxFixed9, Scm_RegisterSyntaxFixed10,
	    Scm_RegisterSyntaxFixed11, Scm_RegisterSyntaxFixed12,
	    Scm_RegisterSyntaxFixed13, Scm_RegisterSyntaxFixed14,
	    Scm_RegisterSyntaxFixed15, Scm_RegisterSyntaxFixedTailRec0,
	    Scm_RegisterSyntaxFixedTailRec1, Scm_RegisterSyntaxFixedTailRec2,
	    Scm_RegisterSyntaxFixedTailRec3, Scm_RegisterSyntaxFixedTailRec4,
	    Scm_RegisterSyntaxFixedTailRec5, Scm_RegisterSyntaxFixedTailRec6,
	    Scm_RegisterSyntaxFixedTailRec7, Scm_RegisterSyntaxFixedTailRec8,
	    Scm_RegisterSyntaxFixedTailRec9, Scm_RegisterSyntaxFixedTailRec10,
	    Scm_RegisterSyntaxFixedTailRec11,
	    Scm_RegisterSyntaxFixedTailRec12,
	    Scm_RegisterSyntaxFixedTailRec13,
	    Scm_RegisterSyntaxFixedTailRec14,
	    Scm_RegisterSyntaxFixedTailRec15, Scm_RegisterSyntaxVariadic0,
	    Scm_RegisterSyntaxVariadic1, Scm_RegisterSyntaxVariadic2,
	    Scm_RegisterSyntaxVariadic3, Scm_RegisterSyntaxVariadic4,
	    Scm_RegisterSyntaxVariadic5, Scm_RegisterSyntaxVariadic6,
	    Scm_RegisterSyntaxVariadic7, Scm_RegisterSyntaxVariadic8,
	    Scm_RegisterSyntaxVariadic9, Scm_RegisterSyntaxVariadic10,
	    Scm_RegisterSyntaxVariadic11, Scm_RegisterSyntaxVariadic12,
	    Scm_RegisterSyntaxVariadic13, Scm_RegisterSyntaxVariadic14,
	    Scm_RegisterSyntaxVariadic15, Scm_RegisterSyntaxVariadicTailRec0,
	    Scm_RegisterSyntaxVariadicTailRec1,
	    Scm_RegisterSyntaxVariadicTailRec2,
	    Scm_RegisterSyntaxVariadicTailRec3,
	    Scm_RegisterSyntaxVariadicTailRec4,
	    Scm_RegisterSyntaxVariadicTailRec5,
	    Scm_RegisterSyntaxVariadicTailRec6,
	    Scm_RegisterSyntaxVariadicTailRec7,
	    Scm_RegisterSyntaxVariadicTailRec8,
	    Scm_RegisterSyntaxVariadicTailRec9,
	    Scm_RegisterSyntaxVariadicTailRec10,
	    Scm_RegisterSyntaxVariadicTailRec11,
	    Scm_RegisterSyntaxVariadicTailRec12,
	    Scm_RegisterSyntaxVariadicTailRec13,
	    Scm_RegisterSyntaxVariadicTailRec14,
	    Scm_RegisterSyntaxVariadicTailRec15, Scm_RegisterProcedureFixed0,
	    Scm_RegisterProcedureFixed1, Scm_RegisterProcedureFixed2,
	    Scm_RegisterProcedureFixed3, Scm_RegisterProcedureFixed4,
	    Scm_RegisterProcedureFixed5, Scm_RegisterProcedureFixed6,
	    Scm_RegisterProcedureFixed7, Scm_RegisterProcedureFixed8,
	    Scm_RegisterProcedureFixed9, Scm_RegisterProcedureFixed10,
	    Scm_RegisterProcedureFixed11, Scm_RegisterProcedureFixed12,
	    Scm_RegisterProcedureFixed13, Scm_RegisterProcedureFixed14,
	    Scm_RegisterProcedureFixed15, Scm_RegisterProcedureFixedTailRec0,
	    Scm_RegisterProcedureFixedTailRec1,
	    Scm_RegisterProcedureFixedTailRec2,
	    Scm_RegisterProcedureFixedTailRec3,
	    Scm_RegisterProcedureFixedTailRec4,
	    Scm_RegisterProcedureFixedTailRec5,
	    Scm_RegisterProcedureFixedTailRec6,
	    Scm_RegisterProcedureFixedTailRec7,
	    Scm_RegisterProcedureFixedTailRec8,
	    Scm_RegisterProcedureFixedTailRec9,
	    Scm_RegisterProcedureFixedTailRec10,
	    Scm_RegisterProcedureFixedTailRec11,
	    Scm_RegisterProcedureFixedTailRec12,
	    Scm_RegisterProcedureFixedTailRec13,
	    Scm_RegisterProcedureFixedTailRec14,
	    Scm_RegisterProcedureFixedTailRec15,
	    Scm_RegisterProcedureVariadic0, Scm_RegisterProcedureVariadic1,
	    Scm_RegisterProcedureVariadic2, Scm_RegisterProcedureVariadic3,
	    Scm_RegisterProcedureVariadic4, Scm_RegisterProcedureVariadic5,
	    Scm_RegisterProcedureVariadic6, Scm_RegisterProcedureVariadic7,
	    Scm_RegisterProcedureVariadic8, Scm_RegisterProcedureVariadic9,
	    Scm_RegisterProcedureVariadic10, Scm_RegisterProcedureVariadic11,
	    Scm_RegisterProcedureVariadic12, Scm_RegisterProcedureVariadic13,
	    Scm_RegisterProcedureVariadic14, Scm_RegisterProcedureVariadic15,
	    Scm_RegisterProcedureVariadicTailRec0,
	    Scm_RegisterProcedureVariadicTailRec1,
	    Scm_RegisterProcedureVariadicTailRec2,
	    Scm_RegisterProcedureVariadicTailRec3,
	    Scm_RegisterProcedureVariadicTailRec4,
	    Scm_RegisterProcedureVariadicTailRec5,
	    Scm_RegisterProcedureVariadicTailRec6,
	    Scm_RegisterProcedureVariadicTailRec7,
	    Scm_RegisterProcedureVariadicTailRec8,
	    Scm_RegisterProcedureVariadicTailRec9,
	    Scm_RegisterProcedureVariadicTailRec10,
	    Scm_RegisterProcedureVariadicTailRec11,
	    Scm_RegisterProcedureVariadicTailRec12,
	    Scm_RegisterProcedureVariadicTailRec13,
	    Scm_RegisterProcedureVariadicTailRec14,
	    Scm_RegisterProcedureVariadicTailRec15): New function decl
	* sigscheme/sigscheme.c
	  - (Scm_RegisterFunc): Change the interface
	  - (SigScm_Initialize_internal):
	    * Follow the new procedure calling interface
	    * Disable SIOD-compatible "=" temporarily
	  - (Scm_RegisterReductionOperator, Scm_RegisterSyntaxFixed0,
	    Scm_RegisterSyntaxFixed1, Scm_RegisterSyntaxFixed2,
	    Scm_RegisterSyntaxFixed3, Scm_RegisterSyntaxFixed4,
	    Scm_RegisterSyntaxFixed5, Scm_RegisterSyntaxFixed6,
	    Scm_RegisterSyntaxFixed7, Scm_RegisterSyntaxFixed8,
	    Scm_RegisterSyntaxFixed9, Scm_RegisterSyntaxFixed10,
	    Scm_RegisterSyntaxFixed11, Scm_RegisterSyntaxFixed12,
	    Scm_RegisterSyntaxFixed13, Scm_RegisterSyntaxFixed14,
	    Scm_RegisterSyntaxFixed15, Scm_RegisterSyntaxFixedTailRec0,
	    Scm_RegisterSyntaxFixedTailRec1, Scm_RegisterSyntaxFixedTailRec2,
	    Scm_RegisterSyntaxFixedTailRec3, Scm_RegisterSyntaxFixedTailRec4,
	    Scm_RegisterSyntaxFixedTailRec5, Scm_RegisterSyntaxFixedTailRec6,
	    Scm_RegisterSyntaxFixedTailRec7, Scm_RegisterSyntaxFixedTailRec8,
	    Scm_RegisterSyntaxFixedTailRec9, Scm_RegisterSyntaxFixedTailRec10,
	    Scm_RegisterSyntaxFixedTailRec11,
	    Scm_RegisterSyntaxFixedTailRec12,
	    Scm_RegisterSyntaxFixedTailRec13,
	    Scm_RegisterSyntaxFixedTailRec14,
	    Scm_RegisterSyntaxFixedTailRec15, Scm_RegisterSyntaxVariadic0,
	    Scm_RegisterSyntaxVariadic1, Scm_RegisterSyntaxVariadic2,
	    Scm_RegisterSyntaxVariadic3, Scm_RegisterSyntaxVariadic4,
	    Scm_RegisterSyntaxVariadic5, Scm_RegisterSyntaxVariadic6,
	    Scm_RegisterSyntaxVariadic7, Scm_RegisterSyntaxVariadic8,
	    Scm_RegisterSyntaxVariadic9, Scm_RegisterSyntaxVariadic10,
	    Scm_RegisterSyntaxVariadic11, Scm_RegisterSyntaxVariadic12,
	    Scm_RegisterSyntaxVariadic13, Scm_RegisterSyntaxVariadic14,
	    Scm_RegisterSyntaxVariadic15, Scm_RegisterSyntaxVariadicTailRec0,
	    Scm_RegisterSyntaxVariadicTailRec1,
	    Scm_RegisterSyntaxVariadicTailRec2,
	    Scm_RegisterSyntaxVariadicTailRec3,
	    Scm_RegisterSyntaxVariadicTailRec4,
	    Scm_RegisterSyntaxVariadicTailRec5,
	    Scm_RegisterSyntaxVariadicTailRec6,
	    Scm_RegisterSyntaxVariadicTailRec7,
	    Scm_RegisterSyntaxVariadicTailRec8,
	    Scm_RegisterSyntaxVariadicTailRec9,
	    Scm_RegisterSyntaxVariadicTailRec10,
	    Scm_RegisterSyntaxVariadicTailRec11,
	    Scm_RegisterSyntaxVariadicTailRec12,
	    Scm_RegisterSyntaxVariadicTailRec13,
	    Scm_RegisterSyntaxVariadicTailRec14,
	    Scm_RegisterSyntaxVariadicTailRec15, Scm_RegisterProcedureFixed0,
	    Scm_RegisterProcedureFixed1, Scm_RegisterProcedureFixed2,
	    Scm_RegisterProcedureFixed3, Scm_RegisterProcedureFixed4,
	    Scm_RegisterProcedureFixed5, Scm_RegisterProcedureFixed6,
	    Scm_RegisterProcedureFixed7, Scm_RegisterProcedureFixed8,
	    Scm_RegisterProcedureFixed9, Scm_RegisterProcedureFixed10,
	    Scm_RegisterProcedureFixed11, Scm_RegisterProcedureFixed12,
	    Scm_RegisterProcedureFixed13, Scm_RegisterProcedureFixed14,
	    Scm_RegisterProcedureFixed15, Scm_RegisterProcedureFixedTailRec0,
	    Scm_RegisterProcedureFixedTailRec1,
	    Scm_RegisterProcedureFixedTailRec2,
	    Scm_RegisterProcedureFixedTailRec3,
	    Scm_RegisterProcedureFixedTailRec4,
	    Scm_RegisterProcedureFixedTailRec5,
	    Scm_RegisterProcedureFixedTailRec6,
	    Scm_RegisterProcedureFixedTailRec7,
	    Scm_RegisterProcedureFixedTailRec8,
	    Scm_RegisterProcedureFixedTailRec9,
	    Scm_RegisterProcedureFixedTailRec10,
	    Scm_RegisterProcedureFixedTailRec11,
	    Scm_RegisterProcedureFixedTailRec12,
	    Scm_RegisterProcedureFixedTailRec13,
	    Scm_RegisterProcedureFixedTailRec14,
	    Scm_RegisterProcedureFixedTailRec15,
	    Scm_RegisterProcedureVariadic0, Scm_RegisterProcedureVariadic1,
	    Scm_RegisterProcedureVariadic2, Scm_RegisterProcedureVariadic3,
	    Scm_RegisterProcedureVariadic4, Scm_RegisterProcedureVariadic5,
	    Scm_RegisterProcedureVariadic6, Scm_RegisterProcedureVariadic7,
	    Scm_RegisterProcedureVariadic8, Scm_RegisterProcedureVariadic9,
	    Scm_RegisterProcedureVariadic10, Scm_RegisterProcedureVariadic11,
	    Scm_RegisterProcedureVariadic12, Scm_RegisterProcedureVariadic13,
	    Scm_RegisterProcedureVariadic14, Scm_RegisterProcedureVariadic15,
	    Scm_RegisterProcedureVariadicTailRec0,
	    Scm_RegisterProcedureVariadicTailRec1,
	    Scm_RegisterProcedureVariadicTailRec2,
	    Scm_RegisterProcedureVariadicTailRec3,
	    Scm_RegisterProcedureVariadicTailRec4,
	    Scm_RegisterProcedureVariadicTailRec5,
	    Scm_RegisterProcedureVariadicTailRec6,
	    Scm_RegisterProcedureVariadicTailRec7,
	    Scm_RegisterProcedureVariadicTailRec8,
	    Scm_RegisterProcedureVariadicTailRec9,
	    Scm_RegisterProcedureVariadicTailRec10,
	    Scm_RegisterProcedureVariadicTailRec11,
	    Scm_RegisterProcedureVariadicTailRec12,
	    Scm_RegisterProcedureVariadicTailRec13,
	    Scm_RegisterProcedureVariadicTailRec14,
	    Scm_RegisterProcedureVariadicTailRec15): New function
	  - (Scm_RegisterFunc0, Scm_RegisterFunc1, Scm_RegisterFunc2,
	    Scm_RegisterFunc3, Scm_RegisterFunc4, Scm_RegisterFunc5,
	    Scm_RegisterFuncEvaledList, Scm_RegisterFuncRawList,
	    Scm_RegisterFuncRawListTailRec,
	    Scm_RegisterFuncRawListWithTailFlag): Follow the change of
	    Scm_RegisterFunc()
	* sigscheme/eval.c
	  - (reduce, call_closure, call): New static function
	  - (Scm_call): New function
	  - (ScmOp_eval, ScmOp_apply): Simplify with call()
	  - (ScmOp_quote, ScmExp_if, ScmExp_set, ScmExp_cond, ScmExp_case,
	    ScmExp_and, ScmExp_or, ScmExp_let, ScmExp_let_star, ScmExp_letrec,
	    ScmExp_begin, ScmExp_do, ScmOp_delay, ScmOp_quasiquote,
	    ScmOp_unquote, ScmOp_unquote_splicing, ScmExp_define): Follow the
	    new procedure calling interface
	* sigscheme/operations.c
	  - (COMPARATOR_BODY): New macro
	  - (ScmOp_add, ScmOp_multiply, ScmOp_subtract, ScmOp_divide,
	    ScmOp_equal, ScmOp_less, ScmOp_less_eq, ScmOp_greater,
	    ScmOp_greater_eq, ScmOp_max, ScmOp_min): Rewrite with new
	    SCM_REDUCTION_OPERATOR
	  - (ScmOp_map, ScmOp_call_with_values): Follow the new procedure
	    calling interface
	* sigscheme/operations-srfi8.c
	  - (ScmOp_SRFI8_receive): Follow the new procedure calling interface
	* sigscheme/io.c
	  - (ScmOp_call_with_input_file, ScmOp_call_with_output_file,
	    ScmOp_with_input_from_file, ScmOp_with_output_to_file): Follow the
	    new procedure calling interface
	* sigscheme/debug.c
	  - (SigScm_Display, SigScm_WriteToPort, SigScm_DisplayToPort):
	    Support SCM_VOLATILE_OUTPUT
	  - (print_ScmObj_internal): Fix (write (values)) handling
	* uim/uim-scm.c
	  - (uim_scm_apply): Simplify with Scm_call()
	* sigscheme/runtest.sh
	  - Print extra newlines
	* sigscheme/test/test-exp.scm
	  - Fix an invalid assumption about result of set!
	  - Add some tests for "values"
	  - Remove some tests temporarily
	* sigscheme/test/unittest.scm
	  - (eval-counter): New procedure
	
2005-09-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (scm_gc_protect_stack): Fix return type
	* sigscheme/storage-protection.c
	  - (scm_gc_protect_stack): Ditto
	
2005-09-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-09-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit makes the GCC4-ready GC certainly workable on other
	  compilers that performs the optimization like GCC4 (out-of-order
	  variable layout in a frame)
	
	* sigscheme/sigscheme.h
	  - (scm_gc_protect_stack, scm_gc_ensure_uninlined_func): New variable
	    decl
	  - (SigScm_GC_EnsureUninlinedFuncInternal,
	    SigScm_GC_ProtectStackInternal): New function decl
	  - (SigScm_GC_ProtectStack, SigScm_GC_EnsureUninlinedFunc): Replace
	    with alias to real function reflecting the enviroment by macro
	    definition
	  - Move "Variable Declarations" section to after "Macro Declarations"
	    section since the declarations needs macro
	* sigscheme/storage-protection.c
	  - (scm_gc_protect_stack, scm_gc_ensure_uninlined_func): New variable
	  - (SigScm_GC_ProtectStack): Rename to SigScm_GC_ProtectStackInternal
	  - (SigScm_GC_ProtectStackInternal): Renamed from SigScm_GC_ProtectStack
	  - (SigScm_GC_EnsureUninlinedFunc): Rename to
	    SigScm_GC_EnsureUninlinedFuncInternal
	  - (SigScm_GC_EnsureUninlinedFuncInternal): Renamed from
	    SigScm_GC_EnsureUninlinedFunc
	
2005-09-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SigScm_GC_UnprotectStack): Remove unnecessary SCM_NOINLINE attribute
	
2005-09-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit coordinates automatically ported SIOD-dependent
	  GCC4-ready uim-scm codes from trunk in r1536 to SigScheme
	
	* sigscheme/sigscheme.h
	  - (SCM_GCC4_READY_GC): Set to 1 by default
	* uim/uim-scm-gc.c
	  - (uim_scm_gc_protect, uim_scm_gc_protect_stack,
	    uim_scm_gc_unprotect_stack): Port to SigScheme
	* uim/uim-scm.c
	  - Remove unneeded sigschemetype.h
	  - (siod_init_subr, siod_init_subr_internal): Removed
	  - (uim_scm_error_internal, uim_scm_require_file_internal): New function
	  - (uim_scm_error, uim_scm_require_file): Support UIM_SCM_GCC4_READY_GC
	  - (uim_scm_c_int_internal, uim_scm_refer_c_str_internal,
	    uim_scm_eval_internal, uim_scm_eval_c_string_internal): Resurrect
	    SigScheme-dependent code lost in r1536
	
2005-09-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SigScm_GC_ProtectStack): Add the 'designated_stack_start' arg
	  - (SCM_GC_CALL_PROTECTED_FUNC_INTERNAL): Follow the API change
	* sigscheme/storage-protection.c
	  - (SigScm_GC_ProtectStack):
	    * Support the 'designated_stack_start' arg
	    * Add some comments
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_word, read_char_sequence): Simplify with strdup()
	
	* sigscheme/io.c
	  - (create_valid_path): Add FIXME comments
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - (Scm_NewCons, Scm_NewInt, Scm_NewSymbol, Scm_NewString,
	    Scm_NewStringWithLen, Scm_NewFunc, Scm_NewClosure, Scm_NewVector,
	    Scm_NewContinuation, Scm_NewValuePacket, Scm_NewCPointer,
	    Scm_NewCFuncPointer): Replace SCM_NULL with SCM_FALSE for ScmObj
	    initialization
	  - (Scm_NewChar):
	    * Ditto
	    * Fix error message printing to stderr
	  - (Scm_NewFilePort, Scm_NewStringPort, Scm_Intern):
	    * Replace SCM_NULL with SCM_FALSE for ScmObj initialization
	    * Simplify with strdup()
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - (SCM_NEW_OBJ_INTERNAL):
	    * Simplify
	    * Make syntactically safe
	  - (Scm_NewStringCopying):
	    * Simplify
	    * Fix invalid lvalue assumption about the storage model
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (SigScm_load_internal): Simplify
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (SigScm_load_internal): Fix the memory leak again
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (ScmOp_load): Remove an obsoleted comment
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (SigScm_load_internal):
	    * Generate an error when the file is not found
	    * Fix a memory leak when the file open is failed
	  - (ScmOp_require): Remove a TODO comment
	* sigscheme/TODO
	  - Update
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (scm_return_value): Move from sigscheme.c
	* sigscheme/sigscheme.c
	  - (scm_return_value): Move to sigschemeinternal.h
	
	* sigscheme/operations-srfi23.c
	  - (scm_current_error_port): Remove the decl and include
	    sigschemeinternal.h instead
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SigScm_null_values): New decl
	* sigscheme/sigscheme.c
	  - (SigScm_null_values, SigScm_null_values_impl): New variable
	  - (SigScm_Initialize_internal): Add Initialization of the variables
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_null_impl, SigScm_true_impl, SigScm_false_impl,
	    SigScm_eof_impl, SigScm_quote_impl, SigScm_quasiquote_impl,
	    SigScm_unquote_impl, SigScm_unquote_splicing_impl,
	    SigScm_unbound_impl, SigScm_undef_impl): Make static
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_append, ScmOp_map): Add a FIXME comment
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (ScmOp_provide): Fix invalid vcell update by treating the return
	    value from reader SCM_SYMBOL_VCELL() as a lvalue. Don't assume
	    such internal storage representation. Use the writer
	    SCM_SYMBOL_SET_VCELL() instead to keep the storage abstract
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Ditto
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize_internal): Initialize SigScm_features with
	    SCM_NULL to fix broken 'features' feature
	* sigscheme/io.c
	  - (SigScm_load_internal): Add a FIXME comment
	  - (ScmOp_require):
	    * Fix broken 'features' handlings
	    * Add (define *foo.scm-loaded* #t) as SIOD does. It is required
	      for compatibility although the alternative facility (provide?)
	      is existing
	    * Simplify
	    * Remove a debug message because the function has been stabilized
	  - (create_loaded_str): Fix incorrect format "foo-loaded*" to
	    "*foo-loaded*"
	  - (ScmOp_providedp): Fix broken list update
	* sigscheme/TODO
	  - Update
	
2005-09-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/io.c
	  - (ScmOp_require): Fix inappopriate error message printing to
	    stdout, and disable it by default
	
2005-09-21 kzk <mover@hct.zaq.ne.jp>
	
	* implement SRFI-1 "Predicates" and "Selectors"
	
	* sigscheme/sigscheme.c
	  - export "proper-list?", "circular-list?", "dotted-list?",
	    "not-pair", "null-list?", "list=", "first", "second", "third",
	    "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth",
	    "take", "drop", "take-right", "drop-right", "take!", "drop-right!",
	    "split-at", "split-at!", "last", "last-pair"
	
	* sigscheme/sigscheme.h
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_proper_listp, ScmOp_SRFI1_circular_listp,
	     ScmOp_SRFI1_dotted_listp, ScmOp_SRFI1_not_pairp,
	     ScmOp_SRFI1_null_listp, ScmOp_SRFI1_listequal,
	     ScmOp_SRFI1_first, ScmOp_SRFI1_second, ScmOp_SRFI1_third,
	     ScmOp_SRFI1_fourth, ScmOp_SRFI1_fifth, ScmOp_SRFI1_sixth,
	     ScmOp_SRFI1_seventh, ScmOp_SRFI1_eighth, ScmOp_SRFI1_ninth,
	     ScmOp_SRFI1_tenth, ScmOp_SRFI1_carpluscdr, ScmOp_SRFI1_take,
	     ScmOp_SRFI1_drop, ScmOp_SRFI1_take_right, ScmOp_SRFI1_drop_right,
	     ScmOp_SRFI1_take_d, ScmOp_SRFI1_drop_right_d,
	     ScmOp_SRFI1_split_at, ScmOp_SRFI1_split_at_d,
	     ScmOp_SRFI1_last, ScmOp_SRFI1_last_pair): new func
	
	* sigscheme/test/test-srfi1.scm
	  - add test cases for 
	    "proper-list?", "circular-list?", "dotted-list?",
	    "not-pair", "null-list?", "list=", "first", "second", "third",
	    "fourth", "fifth", "sixth", "seventh", "eighth", "ninth", "tenth",
	    "take", "drop", "take-right", "drop-right", "take!", "drop-right!",
	    "split-at", "split-at!", "last", "last-pair"
	
	
2005-09-20 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/debug.c
	  - (print_list)
	    : added handling for NULL list
	    : rename "list" to "lst"
	
2005-09-20 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-srfi8.scm
	  - add test cases for "receive"
	
2005-09-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Remove more implementation-dependent tests for
	    'values'. Thanks Jun Inoue.
	
2005-09-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Remove implementation-dependent test for 'values'. Thanks Jun
	    Inoue.
	* sigscheme/TODO
	  - Update
	
2005-09-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_GC_CALL_PROTECTED_VOID_FUNC): Fill the first null
	    argument with (void *) to avoid using C99-dependent
	    feature. Thanks Jun Inoue for letting me know.
	
2005-09-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Modify (values) with (write (values)) to produce the SEGV condition
	* sigscheme/TODO
	  - Follow the above change
	
2005-09-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-exp.scm
	  - Add some tests for 'values'. test7 is failed
	* sigscheme/test/test-srfi8.scm
	  - Add some tests. All tests are passed
	* sigscheme/TODO
	  - Add some items around 'values'
	
2005-09-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit prepares a new efficient values passing. The
	  implementation will follow after the internal reorganization by Jun
	  Inoue
	
	* sigscheme/sigscheme.h
	  - (SCM_USE_VALUECONS): New macro
	
	* sigscheme/sigschemetype.h
	  - (ScmObjType): Add ScmValueCons
	  - (struct ScmObjInternal_): Disable value_pack when
	    SCM_USE_VALUECONS is true
	  - (SCM_AS_VALUECONS, SCM_VALUECONSP, SCM_ENTYPE_VALUECONS,
	    SCM_VALUECONS_CAR, SCM_VALUECONS_CDR): New macro
	
2005-09-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_GC_CALL_PROTECTED_FUNC_INTERNAL): Cosmetic change
	
	* sigscheme/eval.c
	  - (ScmOp_eval): Modify some comments
	  - (map_eval): Add missing 'static' to the definition
	
2005-09-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-09-14 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Unassign an item from YamaKen, and add new one. Feel free to do
	    them :). I'm going to be inactive on the branch
	
2005-09-14 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/io.c
	  - (ScmOp_require): support SIOD compatible return value
	* sigscheme/TODO
	  - update
	
2005-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - (gc_mark, sweep_obj): Cosmetic change
	
2005-09-13 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Update
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - (read_char):
	    * Comment out #\Space interpretation since it will introduce
	      portability problem
	    * Add a FIXME comment about memory leak
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Add tests for escape sequences
	
2005-09-12 kzk <mover@hct.zaq.ne.jp>
	
	* fix backslash handling
	
	* sigscheme/read.c
	  - (read_string): handle "\\" case
	* sigscheme/operations.c
	  - (ScmOp_list2string): not to add "\" when "\" appears
	* sigscheme/debug.c
	  - (print_string): write "\\" correctly
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - Add new item to "Requirements and bugs" section
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/TODO
	  - New file. I've written all significant things I know.
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-string.scm
	  - Add tests for invalid "\\" handlings. Fix it!
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit unifies the error message header printing.
	
	  Such unification prevents careless-bug, careless-inconsistency, and
	  allows fast and easy implementation change without code-breaking
	  risk and being bothered, even if the code is only one line.
	
	  Favor such anti-copy-and-paste coding habit!
	
	* sigscheme/sigschemeinternal.h
	  - (SigScm_ShowErrorHeader): New function
	  - Add a FIXME comment about inappropriate naming convention for
	    global symbols
	* sigscheme/error.c
	  - (SCM_ERR_HEADER): New macro
	  - (SigScm_ShowErrorHeader): New function
	  - (SigScm_Die):
	    * Replace hard-coded error header with SigScm_ShowErrorHeader()
	    * Fix message destination from stdout to scm_current_error_port
	  - (SigScm_Error):
	    * Replace error header printing with SigScm_ShowErrorHeader()
	    * Add a FIXME comment about the responsibility for printing "\n"
	  - (SigScm_ErrorObj): Replace error header printing with
	    SigScm_ShowErrorHeader()
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error): Ditto
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  -(ScmGCFunc0, ScmGCFunc1, ScmGCFunc2, ScmGCFunc3, ScmGCFunc4,
	    ScmGCFunc5): Removed
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit revises the stack protection API of SCM_GCC4_READY_GC,
	  and the functions that using it are rewritten as follows.
	
	  - a_stack_protected_func:
	    * Remove obsoleted SCM_GCC4_READY_GC codes
	    * Split off the main code to a_stack_protected_func_internal
	    * Rewrite as stack protection gate to a_stack_protected_func_internal
	    * Support new SCM_GCC4_READY_GC API by SCM_GC_CALL_PROTECTED_FUNC
	  - a_stack_protected_func_internal:
	    * New static function
	    * Split off the main code from a_stack_protected_func
	    * Declare by SCM_GC_PROTECTED_FUNC_DECL
	
	* sigscheme/sigscheme.h
	  - (SCM_GC_PROTECTED_FUNC, SCM_DECLARE_GC_PROTECTED_FUNC_BODY,
	    SCM_DEFINE_GC_PROTECTED_FUNC_BODY, SCM_DEFINE_GC_PROTECTED_FUNC0,
	    SCM_DEFINE_GC_PROTECTED_FUNC1, SCM_DEFINE_GC_PROTECTED_FUNC2,
	    SCM_DEFINE_GC_PROTECTED_FUNC3, SCM_DEFINE_GC_PROTECTED_FUNC4,
	    SCM_DEFINE_GC_PROTECTED_FUNC5, SigScm_GC_CallProtectedFunc0,
	    SigScm_GC_CallProtectedFunc1, SigScm_GC_CallProtectedFunc2,
	    SigScm_GC_CallProtectedFunc3, SigScm_GC_CallProtectedFunc4,
	    SigScm_GC_CallProtectedFunc5): Removed
	  - (SCM_GC_PROTECTED_FUNC_T, SCM_GC_PROTECTED_FUNC_DECL,
	    SCM_GC_CALL_PROTECTED_FUNC, SCM_GC_CALL_PROTECTED_VOID_FUNC,
	    SCM_GC_CALL_PROTECTED_FUNC_INTERNAL): New macro
	  - (SigScm_GC_ProtectStack, SigScm_GC_UnprotectStack,
	    SigScm_GC_EnsureUninlinedFunc): New function for SCM_GCC4_READY_GC
	* sigscheme/storage-protection.c
	  - (SCM_GC_CALL_PROTECTED_FUNC): Moved to sigscheme.h
	  - (gc_protect_stack): Rename to SigScm_GC_ProtectStack
	  - (SigScm_GC_ProtectStack):
	    * Renamed from gc_protect_stack
	    * Make exported
	  - (gc_unprotect_stack): Rename to SigScm_GC_UnprotectStack
	  - (SigScm_GC_UnprotectStack):
	    * Renamed from gc_unprotect_stack
	    * Make exported
	  - (SigScm_GC_EnsureUninlinedFunc): New function
	  - (SigScm_GC_CallProtectedFunc0, SigScm_GC_CallProtectedFunc1,
	    SigScm_GC_CallProtectedFunc2, SigScm_GC_CallProtectedFunc3,
	    SigScm_GC_CallProtectedFunc4, SigScm_GC_CallProtectedFunc5):
	    Removed
	* sigscheme/io.c
	  - (SigScm_load): Follow the SCM_GCC4_READY_GC revision as written
	    above
	  - (SigScm_load_internal): New static function
	  - (ScmOp_require): Remove stack protection codes it's unnecessary
	    here. It should be performed in SigScm_require() as proper
	    responsibility separation
	* sigscheme/datas.c
	  - (SigScm_eval_c_string): Follow the SCM_GCC4_READY_GC revision as
	    written above
	  - (SigScm_eval_c_string_internal): New static function
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Follow the SCM_GCC4_READY_GC revision as
	    written above
	  - (SigScm_Initialize_internal): New static function
	* sigscheme/main.c
	  - (repl): Follow the SCM_GCC4_READY_GC revision as
	    a_stack_protected_func_internal written above
	  - (main): Add SCM_GC_CALL_PROTECTED_VOID_FUNC for repl() when
	    SCM_GCC4_READY_GC
	* uim/uim-scm.c
	  - (uim_scm_require_file): Follow the specification change of
	    ScmOp_require()
	
2005-09-12 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_map): Cosmetic change
	
2005-09-09 Etsushi Kato <ek.kato@gmail.com>
	
	* uim/uim-scm.c (uim_scm_init) : Fix typo.
	* sigscheme/operations.c (ScmOp_string_append) : Ditto.
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds a GCC4-ready stack protection feature to
	  resolve the problem reported in [Anthy-dev 2273] by Jun Inoue
	  (Thank you a lot). See the description of storage-protection.c
	  for further information.
	
	  Currently the feature is disabled by default since various
	  uim-scm related code is not yet support the new
	  interface. define SCM_GCC4_READY_GC as 1 to enable it, and
	  please try with sscm.
	
	* sigscheme/storage-protection.c
	  - New file
	  - Add description
	  - (SCM_GC_CALL_PROTECTED_FUNC): New macro
	  - (gc_protect_stack, gc_unprotect_stack): New static function
	  - (SigScm_GC_CallProtectedFunc0, SigScm_GC_CallProtectedFunc1,
	    SigScm_GC_CallProtectedFunc2, SigScm_GC_CallProtectedFunc3,
	    SigScm_GC_CallProtectedFunc4, SigScm_GC_CallProtectedFunc5): New
	    function
	* sigscheme/sigscheme.h
	  - (ScmGCFunc0, ScmGCFunc1, ScmGCFunc2, ScmGCFunc3, ScmGCFunc4,
	    ScmGCFunc5): New type
	  - (SCM_GCC4_READY_GC): New macro. Currently defaults to 0
	  - (SCM_NOINLINE, SCM_GC_PROTECTED_FUNC,
	    SCM_DECLARE_GC_PROTECTED_FUNC_BODY,
	    SCM_DEFINE_GC_PROTECTED_FUNC_BODY, SCM_DEFINE_GC_PROTECTED_FUNC0,
	    SCM_DEFINE_GC_PROTECTED_FUNC1, SCM_DEFINE_GC_PROTECTED_FUNC2,
	    SCM_DEFINE_GC_PROTECTED_FUNC3, SCM_DEFINE_GC_PROTECTED_FUNC4,
	    SCM_DEFINE_GC_PROTECTED_FUNC5): New macro
	  - (SigScm_Initialize): Change return type void to void * when
	    SCM_GCC4_READY_GC is true
	  - (SigScm_GC_ProtectStack, SigScm_GC_UnprotectStack): Enclose into
	    #if !SCM_GCC4_READY_GC
	  - (SigScm_GC_CallProtectedFunc0, SigScm_GC_CallProtectedFunc1,
	    SigScm_GC_CallProtectedFunc2, SigScm_GC_CallProtectedFunc3,
	    SigScm_GC_CallProtectedFunc4, SigScm_GC_CallProtectedFunc5): New
	    function
	* sigscheme/datas.c
	  - (SigScm_GC_ProtectStack, SigScm_GC_UnprotectStack): Enclose into
	    #if !SCM_GCC4_READY_GC
	  - (Scm_eval_c_string): Support SCM_GCC4_READY_GC
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Support SCM_GCC4_READY_GC
	* sigscheme/main.c
	  - (repl): Ditto
	* sigscheme/io.c
	  - (SigScm_load, ScmOp_require): Ditto
	* sigscheme/Makefile.am
	  - (libsscm_la_SOURCES): Add storage-protection.c
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/main.c
	  - (repl): Initialize the stack protection pointer by 0 to avoid the
	    conservative mismark
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Rename the stack protection pointer
	    appropriately, and initialize by 0 to avoid the conservative
	    mismark
	* sigscheme/io.c
	  - (SigScm_load, ScmOp_require): Ditto
	* sigscheme/datas.c
	  - (Scm_eval_c_string): Ditto
	  - (gc_mark): Rename the stack protection pointer appropriately
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit renames 'obj' part of various entities that is
	  concerning with SigScm_GC_Protect to 'var', to make the meaning
	  obvious
	
	* sigscheme/sigscheme.h
	  - (SigScm_GC_Protect): Rename the argument
	* sigscheme/datas.c
	  - Rewrite the GC description on heafer of the file
	  - (gc_protected_obj, struct gc_protected_obj_, protected_obj_list,
	    gc_mark_protected_obj, finalize_protected_obj): Rename 'obj' part to 'var'
	  - (gc_protected_var, struct gc_protected_var_, protected_var_list,
	    gc_mark_protected_var, finalize_protected_var): Renamed from
	    '*obj*' and Follow the renaming of other entities in its internal
	    definition
	  - (SigScm_FinalizeStorage, gc_mark): Follow the renaming
	  - (SigScm_GC_Protect):
	    * Ditto
	    * Simplify
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit fixes a serious API design bug of GC. What to be
	  protected by the API is not a ScmObj itself but a C variable that is
	  holding a ScmObj
	
	* sigscheme/sigscheme.h
	  - (SigScm_GC_Protect): Fix the argument type ScmObj with ScmObj *
	* sigscheme/datas.c
	  - (struct gc_protected_obj_):
	    * Fix the type ScmObj with ScmObj *
	    * Add a comment about the struct
	  - (SigScm_GC_Protect): Fix the argument type ScmObj with ScmObj *
	  - (gc_mark_protected_obj): Follow the change
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Follow the change
	* uim/uim-scm.c
	  - (uim_scm_gc_protect): Follow the change
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_apply): Modify an error message
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - Fix the comment about data structure of environment
	  - (extend_environment):
	    * Add description
	    * Add sanity check for variable names
	    * Simplify
	  - (add_environment):
	    * Add brief description
	    * Fix the sanity check for variable name
	    * Optimize cons cell consumption
	  - (lookup_environment):
	    * Add brief description and explain about return value little more
	  - (lookup_frame):
	    * Add brief description
	    * Fix sanity check for variable names
	    * Simplify
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	* sigscheme/operations.c
	* sigscheme/operations-srfi8.c
	  - Add some important FIXME and TODO comments. Kazuki, would you do
	    it? Since it will be a beneficial experience for you, I leave them
	    untouched. Refer SRFI-60 functions and ScmExp_define, ScmExp_if
	    which related to SCM_REDUCE* and SCM_SHIFT_* macros as example
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmOp_quote, ScmOp_delay):
	    * Simplify with SCM_SHIFT_*()
	    * Rename argument variable
	  - (ScmExp_lambda):
	    * Rename argument variable
	    * Modify error message
	  - (ScmExp_if):
	    * Simplify with SCM_SHIFT_*()
	    * Add syntax error check for (if p x y z)
	* sigscheme/sigscheme.h
	  - (ScmOp_quote, ScmExp_lambda, ScmExp_if, ScmOp_delay): Rename
	    argument variable
	* sigscheme/test/test-list.scm
	  - (assert-error): Move to unittest.scm
	* sigscheme/test/unittest.scm
	  - (assert-error): Moved from test-list.scm
	* sigscheme/test/test-exp.scm
	  - (test if): New test. All tests are passed (including assert-error
	    although test9 needs SCM_STRICT_R5RS)
	
2005-09-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_set):
	    * Fix the SEGV on wrong arguments such as (set!)
	    * Add syntax error check such as (set! x 3 4)
	    * Rename some variable names
	  - (ScmExp_define):
	    * Fix the SEGV on wrong arguments such as (define)
	    * Add syntax error checks
	    * Rename some inappropriate variable names (arg->args, val->var)
	    * Fix wrong explanation about the syntax sugar for lambda definition
	    * Return SCM_UNDEF if SCM_STRICT_R5RS
	* sigscheme/sigscheme.h
	  - (ScmExp_set, ScmExp_define): Rename argument variable
	
2005-09-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_SYMBOL_BOUNDP): New macro
	* sigscheme/operations-siod.c
	  - (ScmOp_symbol_boundp): Simplify with SCM_SYMBOL_BOUNDP()
	* sigscheme/eval.c
	  - (ScmExp_set):
	    * Replace SCM_COMPAT_SIOD dependent ScmOp_symbol_boundp with
	      equivalent code. This recovered R5RS-mode compilation
	    * Add type check for the symbol
	    * Return SCM_UNDEF when SCM_STRICT_R5RS
	
2005-09-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - Refine SCM_COMPAT_SIOD dependency resolution
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Make SIOD compatible "=" SCM_COMPAT_SIOD_BUGS
	
2005-09-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/runtest.sh
	  - Exclude test-tail-rec.scm
	* sigscheme/runtest-tail-rec.sh
	  - New file
	  - Run test-tail-rec.scm properly
	
2005-09-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_list_ref): Cosmetic change
	* sigscheme/test/test-list.scm
	  - (test list-tail): Replace equal? with eq? to test true validness
	
2005-09-06 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_list_ref): Fix broken renge check that causes SEGV. It has
	    been validated by "list-ref test6" of test-list.scm
	* sigscheme/test/test-list.scm
	  - Add the license header
	  - All tests have been passed (including assert-error)
	  - (assert-error): New dummy definition to eval args for
	    assert-error. real implementation needed
	  - (test list-tail, test list-ref): Add some tests
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_EVAL): New macro
	* sigscheme/sigschemeinternal.h
	  - (EVAL): New macro
	  - (SCM_SHIFT_EVALED, SCM_REDUCE_EXT): Simplify with EVAL macro
	* sigscheme/operations-srfi1.c
	* sigscheme/io.c
	* sigscheme/operations-srfi8.c
	* sigscheme/operations.c
	* sigscheme/main.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - Replace almost ScmOp_eval() in these files with EVAL for
	    readability. The ScmOp_eval() definition itself and "eval"
	    registration in SigScm_Initialize() are still use the canonical
	    name ScmOp_eval()
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - (Scm_NewCons): Restore the proper function name broken by previous
	    commit as CONS
	* sigscheme/operations-srfi1.c
	  - (ScmOp_SRFI1_list_tabulate): Cosmetic change
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi1.c
	* sigscheme/io.c
	* sigscheme/read.c
	* sigscheme/operations-srfi8.c
	* sigscheme/operations-siod.c
	* sigscheme/operations.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - Replace all 'Scm_NewCons' with 'CONS' for readability
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_caar, ScmOp_cadr, ScmOp_cdar, ScmOp_cddr, ScmOp_caaar,
	    ScmOp_caadr, ScmOp_cadar, ScmOp_caddr, ScmOp_cdaar, ScmOp_cdadr,
	    ScmOp_cddar, ScmOp_cdddr, ScmOp_caaaar, ScmOp_caaadr,
	    ScmOp_caadar, ScmOp_caaddr, ScmOp_cadaar, ScmOp_cadadr,
	    ScmOp_caddar, ScmOp_cadddr, ScmOp_cdaaar, ScmOp_cdaadr,
	    ScmOp_cdadar, ScmOp_cdaddr, ScmOp_cddaar, ScmOp_cddadr,
	    ScmOp_cdddar, ScmOp_cddddr): Rename the argument name 'pair' to
	    'lst' since:
	    * These operations are not for pair but list
	    * The name 'list' may conflict with the STL. Although
	      well-developed major C++ platforms may not cause problems, I
	      prefer conservative way. Other functions using such words 'list'
	      and 'string' should also be renamed, I think
	* sigscheme/operations.c
	  - (ScmOp_equalp, ScmOp_numberp, ScmOp_equal, ScmOp_procedurep):
	    Simplify
	  - (ScmOp_car, ScmOp_cdr):
	    * Fix the error message "list required" with "pair required"
	    * Fix invalid () => () handling as COMPAT_SIOD_BUGS. R5RS
	      compliant implemenation must not behaves so
	    * Remove inappropriate NULLP(obj) check. the CONSP check is
	      sufficient for R5RS.
	    * Remove the FIXME comment since COMPAT_SIOD_BUGS is sufficient to
	      handle both SIOD like and R5RS
	  - (ScmOp_setcar, ScmOp_setcdr): Conform type checking to the
	    standard coding style
	  - (ScmOp_caar, ScmOp_cadr, ScmOp_cdar, ScmOp_cddr, ScmOp_caaar,
	    ScmOp_caadr, ScmOp_cadar, ScmOp_caddr, ScmOp_cdaar, ScmOp_cdadr,
	    ScmOp_cddar, ScmOp_cdddr, ScmOp_caaaar, ScmOp_caaadr,
	    ScmOp_caadar, ScmOp_caaddr, ScmOp_cadaar, ScmOp_cadadr,
	    ScmOp_caddar, ScmOp_cadddr, ScmOp_cdaaar, ScmOp_cdaadr,
	    ScmOp_cdadar, ScmOp_cdaddr, ScmOp_cddaar, ScmOp_cddadr,
	    ScmOp_cdddar, ScmOp_cddddr): Rename the argument name 'pair' to
	    'lst'
	  - (ScmOp_string_fill): Cosmetic change
	* sigscheme/operations-siod.c
	  - (ScmOp_siod_eql): Simplify
	* sigscheme/main.c
	  - (repl): Cosmetic change
	* sigscheme/eval.c
	  - (ScmExp_case): Fix a misspelling of a variable name
	  - (ScmExp_do): Cosmetic change
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error): Cosmetic change
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations-srfi1.c
	* sigscheme/io.c
	* sigscheme/operations-srfi8.c
	* sigscheme/operations-siod.c
	* sigscheme/operations.c
	* sigscheme/eval.c
	  - Simplify CAR, CDR, CADR, etc. All changes are checked by my own eye.
	    * s/SCM_(C[AD]+R)/\1/g
	    * s/C([AD])R\(C([AD])R\((\w+)\)\)/C\1\2R(\3)/g
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_LIST_1, SCM_LIST_2, SCM_LIST_3, SCM_LIST_4, SCM_LIST_5):
	    Modify argument names
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_SHIFT_RAW, SCM_SHIFT_RAW_1, SCM_SHIFT_RAW_2, SCM_SHIFT_RAW_3,
	    SCM_SHIFT_RAW_4, SCM_SHIFT_RAW_5, SCM_SHIFT_EVALED,
	    SCM_SHIFT_EVALED_1, SCM_SHIFT_EVALED_2, SCM_SHIFT_EVALED_3,
	    SCM_SHIFT_EVALED_4, SCM_SHIFT_EVALED_5): New macro
	* sigscheme/eval.c
	  - (SCM_ERRMSG_WRONG_NR_ARG): New macro
	  - (ScmOp_eval):
	    * Simplify and optimize with SCM_SHIFT_EVALED_*() macros
	    * Add the precondition check for number of arguments. This has
	      fixed the SEGV caused by wrong arguments. Now (= 1), (set!) etc
	      causes an error properly
	  - (ScmOp_apply):
	    * Simplify and optimize with SCM_SHIFT_RAW_*() macros
	    * Add the precondition check for number of arguments. This has
	      fixed the SEGV caused by wrong arguments. Now (apply integer?
	      ()), (apply integer? '(3 4)) etc causes an error properly
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_REDUCE_EXT):
	    * Remove unused 'ridentity' arg
	    * Remove 'return' and parens from the code template to allow more
	      flexible expressions
	    * reorder args
	  - (SCM_REDUCE): Follow the changes of SCM_REDUCE_EXT
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit extends the SCM_REDUCE macro once more.
	
	  TODO: Simplify implementation of following functions with SCM_REDUCE
	  and SCM_REDUCE_EXT. Anyone?
	
	  - ScmOp_add, ScmOp_multiply, ScmOp_subtract, ScmOp_divide,
	    ScmOp_equal, ScmOp_less, ScmOp_greater, ScmOp_less_eq,
	    ScmOp_greater_eq, ScmOp_max, ScmOp_min
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_REDUCE): Replace with SCM_REDUCE_EXT invocation with some
	    predefined arguments
	  - (SCM_REDUCE_EXT):
	    * New macro
	    * Inherit previous implementation of SCM_REDUCE and make more
	      generic to be able to handle wider situations
	* sigscheme/operations-srfi60.c
	  - (ScmOp_SRFI60_logand, ScmOp_SRFI60_logior, ScmOp_SRFI60_logxor):
	    Follow the changes of argument names of SCM_REDUCE
	  - All tests for SRFI-60 have passed
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - Add a suggestion about renaming of mark-related macros, as a comment
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/read.c
	  - Add a FIXME comment about stack use
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_REDUCE_BY_BINOP, SCM_REDUCE_BY_FUNC): Removed
	  - (SCM_REDUCE_INTERNAL): Rename to SCM_REDUCE
	  - (SCM_REDUCE):
	    * Renamed from SCM_REDUCE_INTERNAL
	    * Make generic to accept any C expression as f
	* sigscheme/operations-srfi60.c
	  - (ScmOp_SRFI60_logand, ScmOp_SRFI60_logior, ScmOp_SRFI60_logxor):
	    Replace SCM_REDUCE_BY_BINOP with SCM_REDUCE
	  - All tests for SRFI-60 have passed
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Replace integer? registration with
	    SCM_DEFINE_ALIAS(). This makes (eq? integer? number?) true
	  - Add a comment about #t and #f registration as symbol
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds SRFI-60 procedures and replace legacy SIOD bitwise
	  operations with equivalent SRFI-60 ones
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_REDUCE_BY_BINOP, SCM_REDUCE_BY_FUNC, SCM_REDUCE_INTERNAL):
	    New macro
	* sigscheme/sigscheme.h
	  - (SCM_USE_SRFI60, SCM_DEFINE_ALIAS): New macro
	  - Define SCM_USE_SRFI60 as 1 if SCM_COMPAT_SIOD, as dependency resolution
	  - (ScmOp_SRFI60_logand, ScmOp_SRFI60_logior, ScmOp_SRFI60_logxor,
	    ScmOp_SRFI60_lognot, ScmOp_SRFI60_bitwise_if,
	    ScmOp_SRFI60_logtest): New function
	  - (ScmOp_bit_and, ScmOp_bit_or, ScmOp_bit_xor, ScmOp_bit_not): Removed
	* sigscheme/operations-srfi60.c
	  - New file
	  - (ScmOp_SRFI60_logand, ScmOp_SRFI60_logior, ScmOp_SRFI60_logxor,
	    ScmOp_SRFI60_lognot, ScmOp_SRFI60_bitwise_if,
	    ScmOp_SRFI60_logtest): New function
	* sigscheme/operations-siod.c
	  - (ScmOp_bit_and, ScmOp_bit_or, ScmOp_bit_xor, ScmOp_bit_not): Removed
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize):
	    * Add registration for logand, logior, logxor, lognot, bitwise-if,
	      logtest
	    * Add aliases bitwise-and, bitwise-ior, bitwise-xor, bitwise-not,
	      bitwise-merge, any-bits-set?
	    * Replace SIOD-compatible bitwise operations bit-and, bit-or,
	      bit-xor, bit-not with alias to equivalent SRFI-60 ones
	* sigscheme/operations.c
	  - Add #include "operations-srfi60.c"
	* scm/util.scm
	  - (bitwise-not, bitwise-and, bitwise-ior, bitwise-xor): Removed
	* sigscheme/test/test-srfi60.scm
	  - New file
	  - All tests are passed
	  - (logand, logior, logxor, lognot, bitwise-if, logtest, bitwise-and,
	    bitwise-ior, bitwise-xor, bitwise-not, bitwise-merge,
	    any-bits-set?): New test
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (CHECK_1_ARG, CHECK_2_ARGS, CHECK_3_ARGS, CHECK_4_ARGS,
	    CHECK_5_ARGS):
	    * Simplify
	    * Add a suggestion about renaming these macros
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit renames odd arithmetic operation names to common ones
	
	* sigscheme/sigscheme.h
	* sigscheme/operations.c
	  - (ScmOp_plus): Rename to ScmOp_add
	  - (ScmOp_add): Renamed from ScmOp_plus
	  - (ScmOp_minus): Rename to ScmOp_subtract
	  - (ScmOp_subtract): Renamed from ScmOp_minus
	  - (ScmOp_times): Rename to ScmOp_multiply
	  - (ScmOp_multiply): Renamed from ScmOp_times
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Follow the renamings
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - Add a TODO comment about config.h
	  - (ScmOp_interaction_environment): New function
	* sigscheme/eval.c
	  - (ScmOp_scheme_report_environment, ScmOp_null_environment): Add
	    FIXME comments
	  - (ScmOp_interaction_environment): New function
	* sigscheme/operations-siod.c
	  - (ScmOp_symbol_boundp, ScmOp_symbol_value, ScmOp_set_symbol_value):
	    Add TODO comments about standards conformance
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Add registration of interaction-environment
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_CONS): New macro conforms to [Anthy-dev 2293]
	  - (SCM_LIST_1, SCM_LIST_2, SCM_LIST_3, SCM_LIST_4, SCM_LIST_5):
	    * Moved from sigschemeinternal.h
	    * Simplify
	* sigscheme/sigschemeinternal.h
	  - (SCM_LIST_1, SCM_LIST_2, SCM_LIST_3, SCM_LIST_4, SCM_LIST_5): Move
	    to sigscheme.h
	  - (CONS, LIST_1, LIST_2, LIST_3, LIST_4, LIST_5): New abbreviation
	    macro
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (Scm_GetInt, Scm_GetString, Scm_GetCPointer, Scm_GetCFuncPointer):
	    Removed because libsscm should not provide such getter function
	    combined with fixed-style error handling. Clients of libsscm
	    should explicitly check type of the object and do error handlings
	    appropriate for each application
	* sigscheme/datas.c
	  - (Scm_GetInt, Scm_GetString, Scm_GetCPointer, Scm_GetCFuncPointer):
	    Ditto
	* uim/uim-scm.c
	  - (uim_scm_error): New function
	  - (uim_scm_c_int, uim_scm_c_ptr, uim_scm_c_func_ptr): Follow the
	    removal of the function and optimized
	  - (uim_scm_refer_c_str):
	    * Ditto
	    * Fix the memory leak
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	 - (sigassert): Rename to SCM_ASSERT since:
	   * the naming convention does not look like a macro
	   * it does not have a SCM prefix
	 - (SCM_ASSERT): Renamed from sigassert
	* sigscheme/datas.c
	  - (gc_sweep): Follow the renaming
	* sigscheme/sigschemetype.h
	  - (SCM_ASSERT_TYPE): New macro
	  - (SCM_AS_INT, SCM_AS_CONS, SCM_AS_SYMBOL, SCM_AS_CHAR,
	    SCM_AS_STRING, SCM_AS_FUNC, SCM_AS_CLOSURE, SCM_AS_VECTOR,
	    SCM_AS_PORT, SCM_AS_CONTINUATION, SCM_AS_VALUEPACKET,
	    SCM_AS_C_POINTER, SCM_AS_C_FUNCPOINTER): Simplify with SCM_ASSERT_TYPE
	* sigscheme/sigschemeinternal.h
	  - (SCM_AS_FREECELL): Ditto
	
2005-09-05 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	 - (C_FUNC): Rename to ScmCFunc since:
	   * the naming convention looks like a macro
	   * it does not have a SCM prefix
	 - (ScmCFunc): Renamed from C_FUNC
	 - (Scm_NewCFuncPointer, Scm_GetCFuncPointer): Follow the renaming
	* sigscheme/sigschemetype.h
	  - (struct ScmObjInternal_): Follow the renaming
	* sigscheme/datas.c
	  - (Scm_NewCPointer, Scm_GetCFuncPointer): Ditto
	* uim/uim-scm.c
	  - (uim_scm_c_func_ptr): Ditto
	
2005-09-04 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/operations-siod.c (ScmOp_closure_code) : Hack to
	  produce a siod style closure code.
	
2005-09-04 kzk <mover@hct.zaq.ne.jp>
	
	* fix bugs around write-ss. This patch is proposed by Jun Inoue<jun.lambda@gmail.com>
	  Thank you!
	
	* sigscheme/debug.c
	  - (hash_lookup): change args
	  - (hash_grow): fix bugs around hash growing
	  - (INTERESTINGP): add CLOSURE and VALUEPACKET
	  - update comment
	
	* sigscheme/test/test-srfi38.scm
	  - new file 
	
2005-09-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_string): more informational debug message
	  - (read_char_sequence)
	    : more informational debug message
	    : pass through first '\n','\r','\f','\t'
	* sigscheme/operations.c
	  - (ScmOp_list2string): handle #\\ case
	* sigscheme/test/test-string.scm
	  - add forgotten )
	
2005-09-04 kzk <mover@hct.zaq.ne.jp>
	
	* test/test-string.scm
	  - add more testcase for "list->string"
	* test/test-char.scm
	  - add more testcase for #\'\n' and #\'\t'
	
2005-09-04 kzk <mover@hct.zaq.ne.jp>
	
	* add testcases
	
	* test/test-string.scm
	  - add testcase for "list->string". This test fails now.
	* test/test-num.scm
	  - add testcase for "=", ">", "<", ">=", "<=", "abs"
	* test/test-list.scm
	  - add testcase for "list?". checking circular list
	* test/test-char.scm
	  - add testcase for #\\
	
	
2005-09-04 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_string): not to escape "\\"
	
2005-09-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operatins.c
	  - (ScmOp_length): remove unnecessary code. fix mistaken commit at r1387
	
2005-09-03 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_length): add sanity check
	
2005-09-02 kzk <mover@hct.zaq.ne.jp>
	
	* Fix "min" bug. This patch is proposed by Jun Inoue<jun.lambda@gmail.com>
	  Thank you!
	
	* sigscheme/operations.c
	  - (ScmOp_min): evaluate args
	
2005-09-01 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/operations-srfi38.c: New file for SRFI-38.
	
2005-09-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigscheme.h
	* sigscheme/operations.c
	* sigscheme/datas.c
	  - rename "Scm_NewString_With_StrLen" to "Scm_NewStringWithLen"
	
2005-09-01 kzk <mover@hct.zaq.ne.jp>
	
	* implement SRFI-23 "Error reporting mechanism" feature
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "error"
	* sigscheme/sigscheme.h
	  - (SCM_USE_SRFI23): new flag
	  - (ScmOp_SRFI23_errro): new func
	* sigscheme/operations.c
	  - #include "operations-srfi23.c" when SCM_USE_SRFI23 is enabled
	* sigscheme/operations-srfi23.c
	  - (ScmOp_SRFI23_error): new func. I wonder whether this function
	    calls exit or not. please comment if you feel that exiting here
	    is bad.
	
2005-09-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/error.c
	  - (SigScm_Die, SigScm_Error, SigScm_ErrorObj): show "Error: "
	    before error message.
	    
	
2005-09-01 kzk <mover@hct.zaq.ne.jp>
	
	* add SIOD compatible "="
	
	* sigscheme/sigscheme.c
	  - (SigScm_initialize): export "=" as ScmOp_siod_eql when
	    SCM_COMPAT_SIOD is enabled
	* sigscheme/sigscheme.h
	* sigscheme/operations-siod.c
	  - (ScmOp_siod_eql): new func
	
2005-09-01 kzk <mover@hct.zaq.ne.jp>
	
	* implement "External Representation for Data With Shared Structure"
	  defined in SRFI-38.
	  This patch is proposed by Jun Inoue <jun.lambda@gmail.com>. Thank
	  you!!!
	
	* sigscheme/sigscheme.c
	  - (SigScm_initialize): export "write-with-shared-structure"
	* sigscheme/sigscheme.h
	  - (SCM_USE_SRFI8): new flag
	  - (SigScm_WriteToPortWithSharedStructure): new func
	  - (ScmOp_SRFI38_write_woth_shared_structure): new func
	* sigscheme/operations.c
	  - #include "operations-srfi38.c" when SCM_USE_SRFI38 is enabled
	* sigscheme/main.c
	  - use SigScm_WriteToPortWithSharedStructure instead of
	    SigScm_WriteToPort when SCM_USE_SRFI38 is enabled
	* sigscheme/debug.c
	  - (hash_entry, hash_table, write_ss_context): new struct
	  - (INTERESTINGP, SCM_INVALID, OCCUPIED, HASH_EMPTY,
	     DEFINING_DATUM, GET_DEFINDEX): new macro
	  - (write_ss_ctx): new variable
	  - (print_ScmObj_internal, print_list): enable SRFI_38 feature
	  - (hash_grow, hash_lookup, write_ss_scan, get_shared_index,
	     SigScm_WriteToPortWithSharedStructure): new func
	
2005-08-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit marks SIOD-imcompatible behaviors to be modified to run
	  the GaUnit-based unit test for uim. Kazuki, please do it. The 12,000
	  lines of tests will ensure basic quality of SigScheme as base-layer
	  of uim
	
	* scm/uim-sh.scm
	* sigscheme/error.c
	  - Add TODOs as comment. They are needed to run GaUnit-based unit
	    test for uim
	* sigscheme/io.c
	  - Ditto
	  - Add some security-related TODOs as comment
	  - (ScmOp_load): Return SCM_UNDEF when SCM_STRICT_R5RS is true
	
2005-08-29 kzk <mover@hct.zaq.ne.jp>
	
	* disable accessor assert in default
	
	* sigscheme/sigscheme.h
	  - (SCM_ACCESSOR_ASSERT): new macro
	* sigscheme/sigschemetype.h
	  - disable accessor assert if SCM_ACCESSOR_ASSERT is 0
	
	* sigscheme/test/test-num.scm
	  - forgot to commit. add testcase for max, min
	
	
2005-08-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemeinternal.h
	  - (SCM_FREECELL): Rename to SCM_AS_FREECELL
	  - (SCM_AS_FREECELL): Renamed from SCM_FREECELL
	  - (SCM_SETFREECELL_CAR): Rename to SCM_FREECELL_SET_CAR
	  - (SCM_FREECELL_SET_CAR): Renamed from SCM_SETFREECELL_CAR
	  - (SCM_SETFREECELL_CDR): Rename to SCM_FREECELL_SET_CDR
	  - (SCM_FREECELL_SET_CDR): Renamed from SCM_SETFREECELL_CDR
	* sigscheme/datas.c
	  - (allocate_heap, add_heap, gc_sweep): Follow the renamings
	
2005-08-29 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_lessEq): Rename to ScmOp_less_eq() to be consistent on the
	    naming convention. Grand renaming by Kazuki will follow later
	  - (ScmOp_less_eq): Renamed from ScmOp_lessEq()
	  - (ScmOp_greaterEq): Rename to ScmOp_greater_eq()
	  - (ScmOp_greater_eq): Renamed from ScmOp_greaterEq()
	* sigscheme/operations.c
	  - (ScmOp_lessEq): Rename to ScmOp_less_eq()
	  - (ScmOp_less_eq): Renamed from ScmOp_lessEq()
	  - (ScmOp_greaterEq): Rename to ScmOp_greater_eq()
	  - (ScmOp_greater_eq): Renamed from ScmOp_greaterEq()
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Follow the renamings
	
2005-08-29 kzk <mover@hct.zaq.ne.jp>
	
	* optimize "max","min","+","*","-" and "/"
	  If we use FUNCTYPE_EVALED_LIST, map_eval creates new cons cell
	  for argument. So, change functype to FUNCTYPE_RAW_LIST to evaluate
	  value directly.
	* now can apply FUNCTYPE_RAW_LIST
	
	* sigscheme/eval.c
	  - (ScmOp_apply): change to be able to handle FUNCTYPE_RAW_LIST
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): change func type of "max","min","+","*","-"
	    and "/"
	* sigscheme/eval.c
	  - (ScmOp_max, ScmOp_min, ScmOp_plus, ScmOp_times, ScmOp_minus,
	     ScmOp_divide): change func type to FUNCTYPE_RAW_LIST. so need
	     to evaluate args. This doesn't produce excessive cons cell.
	
	* sigscheme/test/test-num.scm
	  - add testcase for "max" and "min"
	
	
2005-08-29 kzk <mover@hct.zaq.ne.jp>
	
	* abolish memory leaks
	
	* sigscheme/read.c
	  - (parse_number): change argument. and free the string got by calling
	    read_word()
	  - (read_number_or_str): free the result of read_word()
	  - (read_sexpression): use parse_number()
	
2005-08-29 kzk <mover@hct.zaq.ne.jp>
	
	* FuncType reorganization of SigScheme
	
	* sigscheme/sigscheme.c
	* sigscheme/sigscheme.h
	* sigscheme/operations-srfi8.c
	* sigscheme/sigschemetype.h
	* sigscheme/operations.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	* sigscheme/sigschemetype.h
	  - (ScmFuncType0, ScmFuncType1, ScmFuncType2, ScmFuncType3,
	     ScmFuncType4, ScmFuncType5, ScmFuncTypeEvaledList,
	     ScmFuncTypeRawList, ScmFuncTypeRawListTailRec,
	     ScmFuncTypeRawListWithTailFlag): new types
	  - (ScmFuncTypeCode): renamed from ScmFuncArgType
	  - (Scm_RegisterFuncEvaledList, Scm_RegisterFuncRawList,
	     Scm_RegisterFuncRawListTailRec, Scm_RegisterFuncWithTailFlag)
	    : new type
	  - (SCM_FUNC_TYPECODE): renamed from SCM_FUNC_NUMARG
	  - (SCM_FUNC_SET_TYPECODE): renamed from SCM_FUNC_SET_NUMARG
	
	* sigscheme/test/test-tail-rec.scm
	  - not to use print
	
	
2005-08-27 kzk <mover@hct.zaq.ne.jp>
	
	* refactoring around ScmEtc type
	
	* sigscheme/sigschemetype.h
	  - (struct ScmEtc): removed, because ScmEtc type object needs not to
	     have type variable
	  - (SCM_SETETC_TYPE, SCM_ETC_TYPE): removed
	  - (SCM_ETC_SET_IMPL): renamed from SCM_NEW_ETC
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): rename SCM_NEW_ETC to SCM_ETC_SET_IMPL
	
	
2005-08-27 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/unittest.scm
	* sigscheme/bench/bench-arithint.scm
	* sigscheme/bench/bench-loop.scm
	* sigscheme/bench/bench-case.scm
	* sigscheme/bench/bench-let-loop.scm
	* sigscheme/bench/bench-mem.scm
	* sigscheme/bench/bench-fib.scm
	  - not to use "print". Instead of "print", use "display" + "newline".
	
2005-08-27 kzk <mover@hct.zaq.ne.jp>
	
	* remove "print" procedure from SigScheme
	
	* scm/util.scm
	  - (print): added
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): remove "print"
	* sigscheme/sigscheme.h
	* sigscheme/io.c
	  - (ScmOp_print): removed
	
2005-08-27 Etsushi Kato <ek.kato@gmail.com>
	
	* sigscheme/datas.c (finalize_protected_obj) : Reset
	  protected_obj_list as NULL to avoid segv in
	  gc_mark_protected_obj() in case uim_init_scm() is called after
	  uim_scm_quit().
	
2005-08-26 kzk <mover@hct.zaq.ne.jp>
	
	* consistent function naming of SigScheme
	
	* uim/uim-scm.c
	* sigscheme/sigscheme.c
	* sigscheme/io.c
	* sigscheme/sigscheme.h
	* sigscheme/operations-siod.c
	* sigscheme/main.c
	* sigscheme/datas.c
	  - (SigScm_GC_Protect): renamed from SigScm_gc_protect
	  - (SigScm_GC_ProtectStack): renamed from SigScm_gc_protect_stack
	  - (SigScm_GC_UnprotectStack): renamed from SigScm_gc_unprotect_stack
	  - (SigScm_GetVerboseLevel): renamed from SigScm_get_verbose_level
	  - (SigScm_SetVerboseLevel): renamed from SigScm_set_verbose_level
	
	
2005-08-26 kzk <mover@hct.zaq.ne.jp>
	
	* Renaming of type macros
	
	* sigscheme/sigschemetype.h
	  - (SCM_AS_INT): rename from SCM_INT
	  - (SCM_AS_CONS): rename from SCM_CONS
	  - (SCM_AS_SYMBOL): rename from SCM_SYMBOL
	  - (SCM_AS_CHAR): rename from SCM_CHAR
	  - (SCM_AS_STRING): rename from SCM_STRING
	  - (SCM_AS_FUNC): rename from SCM_FUNC
	  - (SCM_AS_CLOSURE): rename from SCM_CLOSURE
	  - (SCM_AS_VECTOR): rename from SCM_VECTOR
	  - (SCM_AS_PORT): rename from SCM_PORT
	  - (SCM_AS_CONTINUATION): rename from SCM_CONTINUATION
	  - (SCM_AS_VALUEPACKET): rename from SCM_VALUEPACKET
	  - (SCM_AS_ETC): rename from SCM_ETC
	  - (SCM_AS_C_POINTER): rename from SCM_C_POINTER
	  - (SCM_AS_C_FUNC_POINTER): rename from SCM_C_FUNC_POINTER
	
	
2005-08-26 kzk <mover@hct.zaq.ne.jp>
	
	* Apply patch from Jun Inoue<jun.lambda@gmail.com>. Thank you!!
	
	* sigscheme/read.c
	  - (parse_number): new function for parsing "#b100" like
	    representation of number
	  - (read_sexpression):
	    - call parse_number() if 'b''o''d''x' appear right after '#'
	    - remove unnecessary code
	  - (read_list): use realloc instead of using malloc
	  - (read_string): now can use "\\"
	  - (read_number_or_string): simplify code by using strtol
	  - (read_quote): use SCM_LIST_2
	* sigscheme/operations.c
	  - (ScmOp_make_vector): allow (make-vector n '())
	  - (ScmOp_force): not to create unnecessary cons-cell
	* sigscheme/eval.c
	  - (ScmOp_eval): remove invalid comment
	  - (ScmExp_cond): allow (() expr) clause
	* sigscheme/test/test-num.scm
	  - add test cases for parse_number
	
	* sigscheme/test/io.scm
	  - change message
	* sigscheme/test/bigloo-bchar.scm
	  - comment out unsupported feature "char->integer" and
	    "integer->char"
	
2005-08-26 kzk <mover@hct.zaq.ne.jp>
	
	* Implement "verbose" interface for siod compatibility.
	  This commit implements "interface" only.
	
	* uim/uim-scm.c
	  - (uim_scm_get_verbose_level,
	     uim_scm_set_verbose_level): implemented
	  - (uim_scm_init): set verbose level
	
	* scm/init.scm
	  - restore (load-user-conf)
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "verbose" procedure
	* sigscheme/sigscheme.h
	  - (ScmOp_verbose,
	     SigScm_get_verbose_level,
	     SigScm_set_verbose_level): new func
	* sigscheme/operations-siod.c
	  - (ScmOp_verbose,
	     SigScm_get_verbose_level,
	     SigScm_set_verbose_level): new func
	  - (sscm_verbose_level): new variable
	
	
2005-08-26 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigschemetype.h
	  - Add some comments about the abstraction of internal object
	    represenation. See the comments added in the file
	  - Reorganize sections
	  - Move SigScm_* special constants to the section "Internal
	    Declarations For Special Constants". See the comment in the section
	  - (ScmFuncType): Move to "Struct Declarations" section. Although the
	    section name is inappropriate, it's more appropriate than
	    "Accessors For Scheme Objects" section
	* uim/uim-scm.c
	  - Replace all SigScm_null, SigScm_true, SigScm_false and
	    SigScm_quote with SCM_NULL, SCM_TRUE, SCM_FALSE and SCM_QUOTE in
	    accordance with the comments added in sigschemetype.h
	
2005-08-26 kzk <mover@hct.zaq.ne.jp>
	
	* move SIOD compatible procs to operations-siod.c
	
	* sigscheme/operations-siod.c
	  - new file
	* sigscheme/eval.c
	  - (ScmOp_symbol_boundp, ScmOp_symbol_value,
	     ScmOp_set_symbol_value, ScmOp_bit_and,
	     ScmOp_bit_or, ScmOp_bit_xor, ScmOp_bit_not,
	     ScmOp_the_environment, ScmOp_closure_code)
	    : move to operations-siod.c
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): comment update
	* sigscheme/sigscheme.h
	  - move SIOD compatible declarations' place
	  - comment update
	* sigscheme/operations.c
	  - include operations-siod.c if SCM_COMPAT_SIOD is defined as 1
	
	
2005-08-26 kzk <mover@hct.zaq.ne.jp>
	
	* rename "SCM_NIL" to "SCM_NULL"
	
	* sigscheme/operations-srfi1.c
	* sigscheme/io.c
	* sigscheme/sigscheme.c
	* sigscheme/sigschemeinternal.h
	* sigscheme/read.c
	* sigscheme/sigscheme.h
	* sigscheme/operations-srfi8.c
	* sigscheme/sigschemetype.h
	* sigscheme/operations.c
	* sigscheme/main.c
	* sigscheme/debug.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - rename SCM_NIL to SCM_NULL
	  - rename SigScm_nil to SigScm_null
	  - rename SigScm_nil_impl to SigScm_null_impl
	
2005-08-25 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/io.c
	* sigscheme/datas.c
	  - add comments after #endif directive. This is recommended in
	    GNU coding standards.
	
	* sigscheme/read.c
	  - (read_word, read_char_sequence): using variable++ to simplify
	    the code.
	
	
2005-08-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* r5rs/sigscheme/sigschemeinternal.h
	  - Modify a comment
	
2005-08-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* r5rs/sigscheme/sigschemetype.h
	  - Remove the comment about abbreviation name for constants
	    inappropriately moved to here in r1300
	* r5rs/sigscheme/sigschemeinternal.h
	  - Move back the comment about abbreviation name for constants
	    from sigschemetype.h. Since the comment describes no
	    abbreviation name for the constants for internal use, it
	    should be described at here
	
2005-08-24 kzk <mover@hct.zaq.ne.jp>
	
	Oops, forgot to commit sigscheme/operations.c
	
	* sigscheme/operations.c
	  - (scm_continuation_thrown_obj): added "scm_" prefix
	
2005-08-24 kzk <mover@hct.zaq.ne.jp>
	
	* change "switch" indent again
	* add "scm_" prefix to global variable
	* fix handling of EOF and '\0'.
	  this patch is proposed by Jun Inoue <jun.lambda@gmail.com>.
	  Thank you!
	
	* sigscheme/io.c
	* sigscheme/sigscheme.c
	* sigscheme/sigschemeinternal.h
	* sigscheme/sigschemetype.h
	* sigscheme/debug.c
	* sigscheme/eval.c
	* sigscheme/error.c
	* sigscheme/datas.c
	  - change "switch" indent
	  - add "scm_" prefix to global variables
	  - move declarations of environment related functions to
	    sigschemeinternal.h
	  - (CARR, CADR, CDAR, CDDR): new macro
	  - update comment
	
	* sigscheme/read.c
	  - fix handling of EOF and '\0'.
	
2005-08-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_eqvp): Simplify the character type case
	  - (ScmOp_equalp):
	    * Ditto
	    * Fix invalid equality semantics for closure and
	      continuation. Having same members does not ensure equality
	    * Comment out excessive equality check for port and value-packet
	      which does not make sense
	
2005-08-24 kzk <mover@hct.zaq.ne.jp>
	
	* improve equal? procedure
	
	* sigscheme/operations.c
	  - (ScmOp_equalp): implement ScmFunc, ScmClosure, ScmPort and
	    ScmContinuation type handling
	
	* sigscheme/sigschemetype.h
	  - (SCM_FUNC_CFUNC): renamed from SCM_FUNC_FUNC
	  - (SCM_FUNC_SET_FUNC): renamed from SCM_FUNC_SET_FUNC
	
2005-08-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (ScmOp_SRFI_8_receive): Rename to ScmOp_SRFI8_receive
	  - (ScmOp_SRFI8_receive): Renamed from ScmOp_SRFI_8_receive
	* sigscheme/operations-srfi8.c
	  - (ScmOp_SRFI_8_receive): Rename to ScmOp_SRFI8_receive
	  - (ScmOp_SRFI8_receive): Renamed from ScmOp_SRFI_8_receive
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Follow the renaming
	
2005-08-23 Etsushi Kato <ek.kato@gmail.com>
	
	* scm/skk.scm : Merge r1287, r1290, and r1291 from trunk.
	* scm/skk-custom.scm : Merge r1292 from trunk.
	
	* sigscheme/eval.c (ScmOp_set_symbol_value) : Use
	  SCM_SYMBOL_SET_VCELL.
	
2005-08-23 kzk <mover@hct.zaq.ne.jp>
	
	* Althogh some problems still remain, now I can
	  input Kanji on uim-anthy!! Yey!!
	
	* sigscheme/operations.c
	  - (ScmOp_car, ScmOp_cdr): change return value
	
	
2005-08-23 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/unittest.scm
	  - (assert-true, assert-false): New procedure
	* sigscheme/test/test-equation.scm
	  - Add some tests for eq?, eqv? and equal?. Some tests failed. Please
	    fix it
	* sigscheme/test/test-num.scm
	  - Add some tests and passed
	
	* sigscheme/sigscheme.h
	  - (SCM_COMPAT_SIOD_BUGS): Modify the comment about it
	
2005-08-23 kzk <mover@hct.zaq.ne.jp>
	
	* uim/uim-util.c
	* test/test-uim-util.scm
	  - apply r1274
	
	* uim/uim-scm.c
	  - (uim_scm_c_symbol): optimize
	  - (uim_scm_eq, uim_scm_string_equal): use SCM_EQ instead of EQ
	
	* scm/util.scm
	  - restore SRFI procedures and disable SLIB procedures
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): #f == () when SCM_COMPAT_SIOD_BUGS is enabled
	* sigscheme/sigscheme.h
	  - (SCM_STRICT_ARGCHECK): new macro
	* sigscheme/eval.c
	  - (ScmExp_let, ScmExp_let_star, ScmExp_letrec): not strict binding
	    check is introduced for SIOD compatibility
	
2005-08-22 kzk <mover@hct.zaq.ne.jp>
	
	* Change Macro Name
	
	* sigscheme/io.c
	* sigscheme/sigschemeinternal.h
	* sigscheme/read.c
	* sigscheme/sigschemetype.h
	* sigscheme/operations.c
	* sigscheme/debug.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - rename SCM_SET($TYPE)_($MEMBER) to SCM_($TYPE)_SET_($MEMBER)
	  - rename SCM_SET($TYPE) to SCM_ENTYPE_($TYPE)
	  - introduce SET_CAR and SET_CDR
	  - introduce SCM_LIST_* macro for list creating
	
	
2005-08-22 kzk <mover@hct.zaq.ne.jp>
	
	* add sigschemeinternal.h
	  - define non-prefix version of macros and use it in each .c file
	
	* sigscheme/sigschemeinternal.h
	  - new file
	* sigscheme/operations-srfi1.c
	* sigscheme/io.c
	* sigscheme/sigscheme.c
	* sigscheme/read.c
	* sigscheme/operations-srfi8.c
	* sigscheme/sigscheme.h
	* sigscheme/sigschemetype.h
	* sigscheme/operations.c
	* sigscheme/main.c
	* sigscheme/encoding.c
	* sigscheme/debug.c
	* sigscheme/eval.c
	* sigscheme/error.c
	* sigscheme/datas.c
	  - simplify code with non-prefix version of macros defined in
	    sigschemeinternal.h
	
	
2005-08-22 kzk <mover@hct.zaq.ne.jp>
	
	* introduce SCM_NFALSEP
	* change EQ(obj, SCM_FALSE) to SCM_FALSEP(obj)
	* change !EQ(obj, SCM_FALSE) to SCM_NFALSEP(obj)
	
	* sigscheme/operations-srfi1.c
	* sigscheme/io.c
	* sigscheme/sigschemetype.h
	* sigscheme/operations.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - change EQ(obj, SCM_FALSE) to SCM_FALSEP(obj)
	  - change !EQ(obj, SCM_FALSE) to SCM_NFALSEP(obj)
	
	
2005-08-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype.h
	* sigscheme/operations.c
	* sigscheme/debug.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - rename SCM_GETTYPE to SCM_TYPE
	
2005-08-22 kzk <mover@hct.zaq.ne.jp>
	
	* change "switch" indent
	* rename "ScmOp_SRFI_1_*" to "ScmOp_SRFI1_*"
	* abolish SCM_UNSPECIFIED
	* rename "ScmOp_*_to_*" to "ScmOp_*2*"
	
	* sigscheme/operations-srfi1.c
	  - rename "ScmOp_SRFI_1_*" to "ScmOp_SRFI1_*"
	
	* sigscheme/sigscheme.h
	* sigscheme/sigscheme.c
	  - rename "ScmOp_SRFI_1_*" to "ScmOp_SRFI1_*"
	  - rename "ScmOp_*_to_*" to "ScmOp_*2*"
	  - abolish SCM_UNSPECIFIED
	
	* sigscheme/sigschemetype.h
	  - abolish SCM_UNSPECIFIED
	  - abolish SCM_TRUEP
	
	* sigscheme/read.c
	* sigscheme/operations.c
	* sigscheme/debug.c
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - change "switch" indent
	  - abolish SCM_UNSPECIFIED
	
2005-08-22 kzk <mover@hct.zaq.ne.jp>
	
	* change indentation style
	  - untabify
	  - change "switch" indentation
	  - use "(pred) ? VAL1 : VAL2;" style
	
	* sigscheme/operations-srfi1.c
	* sigscheme/io.c
	* sigscheme/read.c
	* sigscheme/operations-srfi8.c
	* sigscheme/sigschemetype.h
	* sigscheme/operations.c
	* sigscheme/main.c
	* sigscheme/encoding.c
	* sigscheme/debug.c
	* sigscheme/eval.c
	* sigscheme/error.c
	* sigscheme/datas.c
	  - untabify
	  - change "switch" indentation
	  - use "(pred) ? VAL1 : VAL2;" style
	
	* sigscheme/test/test-vector.scm
	  - use assert-equal? instead of assert-eq?
	
	
2005-08-21 kzk <mover@hct.zaq.ne.jp>
	
	* Apply big patch from Jun Inoue<jun.lambda@gmail.com>. Thank you very much!
	* Using assert-equal? instead of assert-eq? in test case
	
	* test/test-eval.scm
	* test/test-define.scm
	* test/test-exp.scm
	* test/test-string.scm
	* test/test-equation.scm
	* test/test-apply.scm
	* test/test-delay-force.scm
	* test/test-num.scm
	* test/test-continuation.scm
	* test/test-list.scm
	  - use assert-equal? instead of assert-eq? for value comparison
	
	* test/unittest-bigloo.scm
	  - (test): fix mistake
	* test/io.scm
	  - show message
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize)
	    : change "<", ">", "<=" and ">=" funcname.
	    : change "+", "*", "-", "/" type
	    : change "number->string" type
	    : move scm_return_value's declaration place
	* sigscheme/sigscheme.h
	  - (ScmOp_less): renamed from ScmOp_bigger
	  - (ScmOp_greater): renamed from ScmOp_smaller
	  - (ScmOp_lessEq): renamed from ScmOp_biggerEq
	  - (ScmOp_greaterEq): renamed from ScmOp_smallerEq
	  - (ScmOp_plus2n, ScmOp_minus2n, ScmOp_multi2n, ScmOp_divide2n): removed
	  - (ScmOp_plus, ScmOp_minus, ScmOp_times, ScmOp_divide): new func
	  - (ScmOp_number_to_string): support radix
	* sigscheme/operations.c
	  - (list_gettail, ScmOp_append_internal): removed
	  - (ScmOp_less): renamed from ScmOp_bigger
	  - (ScmOp_greater): renamed from ScmOp_smaller
	  - (ScmOp_lessEq): renamed from ScmOp_biggerEq
	  - (ScmOp_greaterEq): renamed from ScmOp_smallerEq
	  - (ScmOp_plus2n, ScmOp_minus2n, ScmOp_multi2n, ScmOp_divide2n): removed
	  - (ScmOp_plus, ScmOp_minus, ScmOp_times, ScmOp_divide): new func
	  - (ScmOp_number_to_string): support radix
	  - (ScmOp_equal): more proper arg len check
	  - (ScmOp_c_length): remove unnecessary check
	  - (ScmOp_append): not to destruct given list
	  - (ScmOp_listtail_internal): change to while loop from recursive call
	  - (ScmOp_list_ref): more informational error message
	  - (ScmOp_memq): remove unnecessary check
	  - (ScmOp_assq, ScmOp_assv, ScmOp_member): strict check when SCM_STRICT_R5RS is
	    defined
	  - (ScmOp_symbol_to_string): goto error when non-symbol is given as argument
	  - (ScmOp_string_to_symbol): use Scm_NewStringCopying
	* sigscheme/datas.c
	  - (allocate_heap, add_heap): optimize
	
	
2005-08-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/sigscheme.h
	  - (SCM_COMPAT_SIOD_BUGS): New macro
	* sigscheme/operations.c
	  - (ScmOp_car, ScmOp_cdr): Replace #if !SCM_COMPAT_SIOD with #if
	    !SCM_COMPAT_SIOD_BUGS to distinguish features and bugs
	
2005-08-21 kzk <mover@hct.zaq.ne.jp>
	
	* Now we can see "gtk-entry" successfully start up!
	
	* sigscheme/io.c
	  - (ScmOp_load): not return error when file is not found.
	* sigscheme/eval.c
	  - (ScmExp_let, ScmExp_let_star, ScmExp_letrec): strict checking for
	    let family.
	
	* uim/uim.c
	  - (uim_create_context): fix invalid use of apply.
	    ScmOp_apply doesn't evaluate proc symbol.
	
	* scm/init.scm
	  - (load-user-conf): comment out temporally. because we don't have
	    "verbose" procedure.
	
	* scm/uim-db.scm
	* scm/manage-modules.scm
	* scm/uim-module-manager.scm
	  - revert r1245's change. restore into "puts" from "print".
	
2005-08-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_eqvp, ScmOp_eqp, ScmOp_equalp): Optimize. eq? is an
	    identicality predicate rather than a value comparator
	
2005-08-21 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit encloses non-standard features into #if sections
	  appropriately. This is useful for learning what is R5RS compatible
	  by the code, search for de facto standard to replace the
	  non-standard part, and so on.
	
	* sigscheme/sigscheme.h
	  - (SCM_USE_NONSTD_FEATURES, SCM_COMPAT_SIOD, SCM_STRICT_R5RS): New
	    macro to configure features of the interpreter
	  - (Scm_NewCPointer, Scm_NewCFuncPointer, Scm_GetCPointer,
	    Scm_GetCFuncPointer, ScmOp_print, ScmOp_require, ScmOp_provide,
	    ScmOp_providedp, ScmOp_file_existsp, ScmOp_delete_file): Enclose
	    into #if SCM_USE_NONSTD_FEATURES
	  - (Scm_return_value, ScmOp_symbol_boundp, ScmOp_symbol_value,
	    ScmOp_set_symbol_value, ScmOp_bit_and, ScmOp_bit_or,
	    ScmOp_bit_xor, ScmOp_bit_not, ScmOp_the_environment,
	    ScmOp_closure_code): Enclose into #if SCM_COMPAT_SIOD
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): Enclose some code fragments into #if
	    SCM_USE_NONSTD_FEATURES and #if SCM_COMPAT_SIOD
	* sigscheme/io.c
	  - (ScmOp_print, ScmOp_require): Enclose into #if SCM_USE_NONSTD_FEATURES
	* sigscheme/operations.c
	  - (ScmOp_car, ScmOp_cdr): Replace #ifdef SCM_STRICT_R5RS with #if
	    !SCM_COMPAT_SIOD appropriately
	* sigscheme/eval.c
	  - (ScmOp_symbol_boundp, ScmOp_symbol_value, ScmOp_set_symbol_value,
	    ScmOp_bit_and, ScmOp_bit_or, ScmOp_bit_xor, ScmOp_bit_not,
	    ScmOp_the_environment, ScmOp_closure_code): Enclose into #if
	    SCM_COMPAT_SIOD
	* sigscheme/datas.c
	  - (scm_return_value, Scm_return_value): Enclose into #if
	    SCM_COMPAT_SIOD
	  - (Scm_eval_c_string): Enclose scm_return_value handling into #if
	    SCM_COMPAT_SIOD
	  - (Scm_NewCPointer, Scm_NewCFuncPointer, Scm_GetCPointer,
	    Scm_GetCFuncPointer): Enclose into #if SCM_USE_NONSTD_FEATURES
	
2005-08-21 kzk <mover@hct.zaq.ne.jp>
	
	* now we can successfully create "installed-modules.scm" and
	  "loader.scm". Yey!
	
	* implement uim_scm_return_value for SIOD compatibility
	* implement "the-environment", "%%closure-code" for SIOD compatibility
	* fix small bugs
	* set big HEAP_SIZE now
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "the-environment" and "%%closure-env"
	* sigscheme/sigscheme.h
	  - (ScmOp_the_environment, ScmOp_closure_env): new func
	* sigscheme/sigschemetype.h
	  - (SCM_C_FUNCPOINTER_FUNC): fix mistake
	* sigscheme/eval.c
	  - (ScmOp_the_environment, ScmOp_closure_env): new func
	* sigscheme/datas.c
	  - (NAMEHASH_SIZE, SCM_HEAP_SIZE, scm_heap_num): set big num
	  - (scm_return_value): new variable
	  - (Scm_eval_c_string): set scm_return_value
	  - (Scm_return_value): new func
	
	* uim/uim-scm.c
	  - (uim_scm_f): fix weird mistake
	  - (uim_scm_return_value): implemented
	
	* scm/im-custom.scm
	  - restore commented out code, because it works successfully now
	
2005-08-21 kzk <mover@hct.zaq.ne.jp>
	
	* more appropriate support for dot list argument
	  This is for getting slib's "fold" working
	* simplify "symbol-value"
	
	* sigscheme/test/test-define.scm
	  - add testcase for assignment for dot list arg
	* sigscheme/test/bigloo-bchar.scm
	  - comment out some testcase not supported now
	
	* sigscheme/eval.c
	  - (extend_environment): change to create new value for dot list
	    arg
	  - (lookup_frame): doesn't create new cons cell, because it cannot
	    handle "assignment".
	  - (ScmExp_set): set new env
	  - (ScmOp_symbol_value): change args
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "symbol-value" as FUNCTYPE_1
	* sigscheme/sigscheme.h
	  - (ScmOp_symbol_value): change args
	* uim/uim-compat-scm.c
	  - (uim_scm_symbol_value): change args of ScmOp_symbol_value
	
	
2005-08-20 kzk <mover@hct.zaq.ne.jp>
	
	* GC bugfix by Jun Inoue<jun.lambda@gmail.com>. Thank you!
	
	* sigscheme/datas.c
	  - (is_pointer_to_heap): bug fix
	
2005-08-20 kzk <mover@hct.zaq.ne.jp>
	
	* implement valid file-path guessing for "load", "require"
	* implement "bit-and", "bit-or", "but-xor" and "bit-not"
	* reimplement "set-symbol-value!" to be compatible with SIOD properly
	
	* sigscheme/io.c
	  - (create_valid_path): new func
	  - (file_existsp): new func
	  - (SigScm_load): use create_valid_path to guess valid path
	
	* sigscheme/sigscheme.h
	* sigscheme/sigscheme.c
	* sigscheme/eval.c
	  - (ScmOp_bit_and, ScmOp_bit_or, ScmOp_bit_xor, ScmOp_bit_not)
	    : new func
	  - (ScmOp_set_symbol_value): change args
	
2005-08-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_car, ScmOp_cdr): Replace /**/ added in r1234 with #ifdef
	    SCM_STRICT_R5RS. This is a popular coding practice to make a
	    feature easily configurable. I suggest doing so always instead of
	    using /**/
	
2005-08-19 kzk <mover@hct.zaq.ne.jp>
	
	* Implement SIOD like backtrace function
	* Change car and cdr behavior
	
	* sigscheme/sigscheme.h
	  - (struct trace_frame): new struct
	  - (trace_root): new variable
	  - (SigScm_ShowBacktrace): new func
	* sigscheme/eval.c
	  - (trace_root): new variable
	  - (ScmOp_eval): introduce eval_done label and change to handle
	     trace_frame
	* sigscheme/error.c
	  - (SigScm_Die, SigScm_Error, SigScm_ErrorObj): show backtrace
	  - (SigScm_ShowBacktrace): new func
	
	* sigscheme/operations.c
	  - (ScmOp_car, ScmOp_cdr): now (car '()) and (cdr '()) aren't an error
	  - (ScmOp_list_ref): more functional error message
	* sigscheme/io.c
	  - (ScmOp_require): protect stack
	* sigscheme/datas.c
	  - (Scm_eval_c_string): protect str_port
	
2005-08-19 kzk <mover@hct.zaq.ne.jp>
	
	* implement "receive" defined in SRFI-8. This is done by Jun Inoue
	  <jun.lambda@gmail.com>. Thank you!
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "receive"
	* sigscheme/operations-srfi8.c
	  - new file
	* sigscheme/sigscheme.h
	  - (USE_SRFI8): new preprocessor symbol
	* sigscheme/operations.c
	  - include operations-srfi8.c when USE_SRFI8 is defined as 1
	* test/test-srfi8.scm
	  - new file
	* test/gauche-primsyn.scm
	  - enable "receive" test case
	
2005-08-19 kzk <mover@hct.zaq.ne.jp>
	
	* fix bugs
	
	* sigscheme/io.c
	  - (ScmOp_load): fix weird memory handling
	* sigscheme/eval.c
	  - (ScmOp_lambda): more informational error message
	  - (ScmExp_set): can set SCM_NIL as value
	
2005-08-19 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_oddp, ScmOp_evenp): Simplified. Revert if the logic or
	    coding style is not preferable.
	
	    This is a coding style suggestion about using the conditional
	    expression ?:
	
2005-08-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_word): don't became an error when EOF appears for handling
	    Scm_eval_c_string("plugin-dir")
	* sigscheme/debug.c
	  - (print_port): more informational debugging msg for string port
	* sigscheme/datas.c
	  - (Scm_eval_c_string): protect stack
	
2005-08-18 kzk <mover@hct.zaq.ne.jp>
	
	* implement "values" and "call-with-values".
	  This patch is created by Jun Inoue<jun.lambda@gmail.com>.
	  Very, Very thank you!
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "values" and "call-with-values"
	* sigscheme/sigscheme.h
	  - (Scm_NewValuePacket): new func
	  - (ScmOp_values, ScmOp_call_with_values): new func
	* sigscheme/sigschemetype.h
	  - (ScmValuePacket): new type
	  - (value_pack): new union member
	  - (SCM_VALUEPACKETP, SCM_VALUEPACKET, SCM_VALUEPACKET_VALUES,
	     SCM_SETVALUEPACKET, SCM_SETVALUEPACKET_VALUES): new macro
	* sigscheme/operations.c
	  - (ScmOp_eqp, ScmOp_equalp): handle ScmValuePacket
	  - (ScmOp_values, ScmOp_call_with_values): new func
	* sigscheme/eval.c
	  - (qquote_internal): update comment
	* sigscheme/datas.c
	  - (mark_obj): handle ScmValuePacket
	  - (ScmNewValuePacket): new func
	
	* sigscheme/test/test-exp.scm
	* sigscheme/test/gauche-primsyn.scm
	  - add test case for multiple values
	
2005-08-18 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* scm/util.scm
	  - (SigScm_Initialize): Add initialization of integer?. We MUST
	    distinguish integer? from number? in Scheme codes of uim because
	    some other Scheme implementation that has the number system may
	    run uim such as uim-scm-gauche.c.
	
	    Please don't rewrite integer? in *.scm with number?
	
2005-08-18 kzk <mover@hct.zaq.ne.jp>
	
	* add "symbol-bound?", "symbol-value", "set-symbol-value!" for SIOD
	  compatibility.
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): rename provided_feature to SigScm_features.
	    export "symbol-bound?", "symbol-value" and "set-symbol-value!".
	* sigscheme/io.c
	  - (SigScm_features): renamed from provided_feature
	  - (ScmOp_load, ScmOp_require, ScmOp_provide): rename
	    provided_feature to SigScm_features.
	* sigscheme/sigscheme.h
	  - (SigScm_features): renamed from provided_feature
	  - (ScmOp_symbol_boundp, ScmOp_symbol_value, ScmOp_set_symbol_value)
	    : new func for SIOD compatibility
	  - (ScmOp_boundp): removed
	* sigscheme/operations.c
	  - (ScmOp_boundp): removed
	* sigscheme/eval.c
	  - (qquote_internal, qquote_vector): initialize variables
	  - (ScmOp_symbol_boundp, ScmOp_symbol_value, ScmOp_set_symbol_value)
	    : new func for SIOD compatibility
	* sigscheme/error.c
	  - (SigScm_ErrorObj): write obj to the error port
	
2005-08-18 kzk <mover@hct.zaq.ne.jp>
	
	* not to SEGV in require
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): provided_feature variable is now interned
	     symbol
	* sigscheme/io.c
	  - untabify
	  - (ScmOp_require): change the way to record loaded filename
	  - (ScmOp_provide): Ditto
	
2005-08-18 kzk <mover@hct.zaq.ne.jp>
	
	* added test cases ported from Bigloo and Gauche
	
	* sigscheme/test/bigloo-apply.scm
	* sigscheme/test/bigloo-bool.scm
	* sigscheme/test/bigloo-vector.scm
	* sigscheme/test/bigloo-case.scm
	* sigscheme/test/bigloo-list.scm
	* sigscheme/test/bigloo-letrec.scm
	* sigscheme/test/bigloo-bchar.scm
	* sigscheme/test/bigloo-quote.scm
	* sigscheme/test/gauche-euc-jp.scm
	* sigscheme/test/gauche-primsyn.scm
	* sigscheme/test/unittest-bigloo.scm
	* sigscheme/test/unittest-gauche.scm
	  - new file
	
	* sigscheme/test/test-r4rs.scm
	  - supress output
	* sigscheme/test/unittest.scm
	  - supress unnecessary newline
	* sigscheme/read.c
	  - (read_sexpression): more informational error message
	* sigscheme/eval.c
	  - (ScmOp_apply): report error in mutiarg-apply
	* sigscheme/runtest.sh
	  - change to run test/bigloo-*.scm and test/gauche-*.scm
	
	
2005-08-18 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_SETCLOSURE_EXP, SCM_SETCLOSURE_ENV): fixed ugly typo..
	
2005-08-18 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/operations.c
	  - (ScmOp_oddp): handle minus value correctly
	
2005-08-17 kzk <mover@hct.zaq.ne.jp>
	
	* Apply QuasiQuote related patch by Jun Inoue<jun.lambda@gmail.com>
	  This is great work!. Thanks!
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): change "quote", "quasiquote", "unquote" and
	    "unquote-splicing" FUNC_TYPE. And intern "quote", "quasiquote",
	    "unquote", "unquote-splicing" symbol.
	* sigscheme/read.c
	  - (read_quote): change (#<quote> . obj) to (#<quote> obj)
	* sigscheme/sigscheme.h
	  - (ScmOp_quote, ScmOp_quasiquote, ScmOp_unquote,
	     ScmOp_unquote_splicing): change args
	* sigscheme/sigschemetype.h
	  - (SCM_CAAR, SCM_CARD, SCM_CDAR, SCM_CDDR): new macro
	* sigscheme/operations.c
	  - (ScmOp_equalp): change ScmEtc type handling
	* sigscheme/eval.c
	  - (SCM_INVALID, IS_LIST_LEN_1, QQUOTE_SET_VERBATIM,
	    QQUOTE_IS_VERBATIM): new macro
	  - (eval_unquote): removed
	  - (ScmOp_last_pair): removed
	  - (ScmOp_eval): change ScmEtc type handling
	  - (qquote_internal, qquote_vector): new func
	  - (ScmOp_quote, ScmOp_quasiquote, ScmOp_unquote,
	     ScmOp_unquote_splicing): change args
	
	* sigscheme/io.c
	  - (ScmOp_load): remove unnecessary output
	
	* sigscheme/test/test-quote.scm
	  - add testcase for qquote
	
2005-08-16 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigscheme.c
	* sigscheme/sigscheme.h
	* sigscheme/operations.c
	  - (ScmOp_list_ref): renamed from ScmOp_listref
	  - (ScmOp_list_tail): renamed from ScmOp_listtail
	
2005-08-16 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* scm/util.scm
	  - (symbol-append): New procedure
	  - (symbolconc): Replace with a alias to symbol-append
	  - (nconc): Move from "SRFI procedures" section to "generic
	    utilities" section since it's not a SRFI proc
	
	* sigscheme/main.c
	  - Add #include <stdio.h> for stdin and stdout
	
2005-08-16 kzk <mover@hct.zaq.ne.jp>
	
	* implement "provide" and "provided?"
	
	* sigscheme/sigscheme.h
	* sigscheme/io.c
	  - (ScmOp_provide, ScmOp_providedp): new func
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "provide", "provided?"
	  
	
2005-08-15 kzk <mover@hct.zaq.ne.jp>
	
	* implement SigScm_set_lib_path
	
	* sigscheme/io.c
	  - (lib_path): new file local variable
	  - (SigScm_set_lib_path): new func
	  - (ScmOp_load): use lib_path
	  - (ScmOp_require): doesn't check file existance
	
	* sigscheme/sigscheme.h
	  - (SigScm_set_lib_path): new func
	
2005-08-15 kzk <mover@hct.zaq.ne.jp>
	
	* implement "require" feature
	
	* sigscheme/sigscheme.h
	  - (ScmOp_require): new func
	  - (provided_feature): new variable
	* sigscheme/io.c
	  - (ScmOp_require): new func
	  - (provided_feature): new variable
	  - (create_loaded_str): new func
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export require and initialize provided_feature
	
	* sigscheme/test/test-r4rs.scm
	  - comment out unsupported feature
	
	
2005-08-13 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigscheme.c
	  - implement char-upcase and char-downcase
	* sigscheme.sigscheme.h
	  - implement char-upcase and char-downcase
	
	* sigscheme/operations.c
	  - (ScmOp_string_to_number): add check for digit character
	  - (ScmOp_char_upcase, ScmOp_char_downcase): new func
	  - (ScmOp_make_string): fill string with space when no fill character
	    is specified.
	
	
2005-08-13 kzk <mover@hct.zaq.ne.jp>
	
	* fix memory leaks.
	
	* sigscheme/datas.c
	  - (finalize_protected_obj): new func
	  - (is_pointer_to_heap): initialize variable i
	  - (sweep_obj): change indent, free PORT related pointers.
	
2005-08-13 kzk <mover@hct.zaq.ne.jp>
	
	* implement "quasiquote", "unquote", "unquote-splicing"
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "quasiquote", "unquote", "unquote-splicing"
	* sigscheme/sigscheme.h
	* sigscheme/eval.c
	  - implement ScmOp_quasiquote, ScmOp_unquote, ScmOp_unquote_splicing
	
2005-08-13 kzk <mover@hct.zaq.ne.jp>
	
	* bug fixes found in test-r4rs.scm
	
	* sigscheme/eval.c
	  - (ScmOp_eval, ScmOp_eval): handle NIL arg lambda correctly
	  - (ScmExp_let_star): no need to create new cons cell for nil env
	  - (ScmExp_begin): update environment in each eval
	  - (ScmExp_define): don't lookup env and adding var to the env absolutely
	
	* sigscheme/test/test-apply.scm
	  - remove wrong testcase for substring
	
2005-08-13 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let_star): handle SCM_NIL binding correctly
	* sigscheme/encoding.c
	  - (eucj_str_startpos): return current pos when len < k
	* sigscheme/operations.c
	  - (ScmOp_make_string): handle len == 0
	  - (ScmOp_string_substring): handle start == end
	  - (ScmOp_string_append): handle arg is SCM_NIL
	* sigscheme/read.c
	  - (read_word): new func
	  - (read_char, read_char_sequence): handle #\(, #\), #\Space
	
	* sigscheme/test/test-char.scm
	  - add test case for #\( and #\)
	* sigscheme/test/test-string.scm
	  - fix wrong substring test case
	* sigscheme/test/unittest.scm 
	  - remove unnecessary \n
	
2005-08-12 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (extend_environment): accept NULL vars and vals
	* sigscheme/operations.c
	  - (ScmOp_c_length): new func ported from Gauche
	  - (ScmOp_length, ScmOp_listp): support circular list check
	
2005-08-12 kzk <mover@hct.zaq.ne.jp>
	
	* bug fixes
	
	* sigscheme/read.c
	  - (read_list): handle the symbol which starts with dot('.').
	    This code is originally proposed from Jun Inoue <jun.lambda@gmail.com>
	* sigscheme/eval.c
	  - (eval_unquote): handle () correctly
	  - (ScmExp_case): don't evaluate datums
	  - (ScmExp_let, ScmExp_let_star, ScmExp_letrec)
	    : handle when bindings is null list.
	
2005-08-12 kzk <mover@hct.zaq.ne.jp>
	
	* test/test-r4rs.scm
	  - add testfile for r4rs compatibility.
	    this file is imported from scm.
	
2005-08-12 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigscheme.c
	* sigscheme/sigscheme.h
	* sigscheme/sigschemetype.h
	* sigscheme/eval.c
	* sigscheme/datas.c
	  - rename Scm_InitSubr* to Scm_RegisterFunc*
	  - rename ARGNUM_* to FUNCTYPE_*
	  - rename ScmFuncArgNum to ScmFuncArgType
	
	
2005-08-12 kzk <mover@hct.zaq.ne.jp>
	
	* Abolish ARGNUM_R_NotEval and ARGNUM_R_Eval. And Introduce tail_flag.
	
	* sigscheme/sigscheme.h
	  - (Scm_InitSubrR_NotEval. Scm_InitSubrR_Eval): removed
	  - (Scm_InitSubrR): new func
	  - (ScmExp_lambda, ScmExp_if, ScmExp_set, ScmExp_cond,
	     ScmExp_case, ScmExp_and, ScmExp_or, ScmExp_let,
	     ScmExp_let_star, ScmExp_letrec, ScmExp_begin,
	     ScmExp_do, ScmExp_delay, ScmExp_define): change args
	* sigscheme/sigschemetype.h
	  - (ARGNUM_R_Eval, ARGNUM_R_NotEval): removed
	  - (ARGNUM_R): new enum variable
	  - (subrr): renamed from subrm, and change args
	* sigscheme/eval.c
	  - (ScmOp_eval): introduce tail_flag
	  - (ScmExp_lambda, ScmExp_if, ScmExp_set, ScmExp_cond,
	     ScmExp_case, ScmExp_and, ScmExp_or, ScmExp_let,
	     ScmExp_let_star, ScmExp_letrec, ScmExp_begin,
	     ScmExp_do, ScmExp_delay, ScmExp_define)
	     : change args and handle tail_flag
	* sigscheme/sigscheme.c
	  - (ScmExp_lambda, ScmExp_if, ScmExp_set, ScmExp_cond,
	     ScmExp_case, ScmExp_and, ScmExp_or, ScmExp_let,
	     ScmExp_let_star, ScmExp_letrec, ScmExp_begin,
	     ScmExp_do, ScmExp_delay, ScmExp_define)
	     : call Scm_InitSubrR for these function
	  - (Scm_InitSubrR_NotEval, Scm_InitSubrR_Eval): removed
	  - (Scm_InitSubrR): new func
	
	
2005-08-08 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/sigschemetype.h
	  - (SCM_NEW_ETC): enclose macro with do-while loop
	
2005-08-08 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - Fix an inappropriate nested comment treatment
	
2005-08-08 kzk <mover@hct.zaq.ne.jp>
	
	* Optimize gc_preprocess(). This patch is created by
	  Jun Inoue <jun.lambda@gmail.com>. Thank you!
	
	* sigscheme/sigschemetype.h
	  - (enum GCMark): removed
	  - (SCM_DO_MARK, SCM_DO_UNMARK, SCM_IS_MARKED): removed
	
	* sigscheme/datas.c
	  - commented out codes around posix_memalign
	  - (SCM_UNMARKER, SCM_INITIAL_MARKER, SCM_IS_MARKED,
	     SCM_IS_UNMARKED, SCM_DO_MARK, SCM_DO_UNMARK,
	     SCM_MARK_CORRUPT): new func
	  - (malloc_aligned): comment out posix_memalign
	  - (gc_preprocess): optimize!
	
2005-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/test/test-tail-rec.scm
	  - Modify comments
	
2005-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/datas.c
	  - Comment out #include <malloc.h> since it is obsolete
	  - Add simple availability check for posix_memalign(3) and comment
	    about it. Thanks for the information in [Anthy-dev 2203] Jun Inoue.
	
2005-08-07 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* This commit adds a testsuite for the proper tail
	  recursion. This test must be run by special method to take
	  effect. See header comments of the file.
	
	  Current SigScheme implementaion does not have at least two R5RS
	  compliant behavior about the proper tail recursion feature. The
	  'and' and 'or' conditionals is not properly tail-recursive (tests
	  for them are provided by this file).
	
	  See "3.5 Proper tail recursion" of R5RS and please fix it, Kazuki.
	
	* sigscheme/test/test-tail-rec.scm
	  - New file
	  - (test-and?, test-or?, test-improper-and?, test-improper-or?, KB,
	    heap-limit, cell-size, explosive-count): New variable
	  - (assert-orig, assert, rec-by-if-consequent,
	    rec-by-if-consequent-with-begin, rec-by-if-consequent-with-let,
	    rec-by-if-consequent-with-let*, rec-by-if-consequent-with-letrec,
	    rec-by-if-alternate, rec-by-if-alternate-with-begin,
	    rec-by-if-alternate-with-let, rec-by-if-alternate-with-let*,
	    rec-by-if-alternate-with-letrec, rec-by-cond-1st,
	    rec-by-cond-1st-with-begin, rec-by-cond-1st-with-let,
	    rec-by-cond-1st-with-let*, rec-by-cond-1st-with-letrec,
	    rec-by-cond-2nd, rec-by-cond-3rd, rec-by-cond-last,
	    rec-by-cond-else, rec-by-cond-else-with-begin,
	    rec-by-cond-else-with-let, rec-by-cond-else-with-let*,
	    rec-by-cond-else-with-letrec, rec-by-case-1st,
	    rec-by-case-1st-with-begin, rec-by-case-1st-with-let,
	    rec-by-case-1st-with-let*, rec-by-case-1st-with-letrec,
	    rec-by-case-2nd, rec-by-case-3rd, rec-by-case-last,
	    rec-by-case-else, rec-by-case-else-with-begin,
	    rec-by-case-else-with-let, rec-by-case-else-with-let*,
	    rec-by-case-else-with-letrec, rec-by-and-tail,
	    rec-by-and-tail-with-begin, rec-by-and-tail-with-let,
	    rec-by-and-tail-with-let*, rec-by-and-tail-with-letrec,
	    improper-rec-by-and-tail, rec-by-or-tail,
	    rec-by-or-tail-with-begin, rec-by-or-tail-with-let,
	    rec-by-or-tail-with-let*, rec-by-or-tail-with-letrec,
	    improper-rec-by-or-tail, rec-even?, rec-odd?,
	    rec-even-with-begin?, rec-odd-with-begin?, rec-even-with-let?,
	    rec-odd-with-let?, rec-even-with-let*?, rec-odd-with-let*?,
	    rec-even-with-letrec?, rec-odd-with-letrec?, rec-proper-infinite,
	    rec-improper-infinite): New procedure
	  - (proper tail recursion by if-consequent,
	    proper tail recursion by if-consequent with begin,
	    proper tail recursion by if-consequent with let,
	    proper tail recursion by if-consequent with let*,
	    proper tail recursion by if-consequent with letrec,
	    proper tail recursion by if-alternate,
	    proper tail recursion by if-alternate with begin,
	    proper tail recursion by if-alternate with let,
	    proper tail recursion by if-alternate with let*,
	    proper tail recursion by if-alternate with letrec,
	    proper tail recursion by 1st clause of cond,
	    proper tail recursion by 1st clause of cond with begin,
	    proper tail recursion by 1st clause of cond with let,
	    proper tail recursion by 1st clause of cond with let*,
	    proper tail recursion by 1st clause of cond with letrec,
	    proper tail recursion by 2nd clause of cond,
	    proper tail recursion by 3rd clause of cond,
	    proper tail recursion by last clause of cond,
	    proper tail recursion by cond-else,
	    proper tail recursion by cond-else with begin,
	    proper tail recursion by cond-else with let,
	    proper tail recursion by cond-else with let*,
	    proper tail recursion by cond-else with letrec,
	    proper tail recursion by 1st clause of case,
	    proper tail recursion by 1st clause of case with begin,
	    proper tail recursion by 1st clause of case with let,
	    proper tail recursion by 1st clause of case with let*,
	    proper tail recursion by 1st clause of case with letrec,
	    proper tail recursion by 2nd clause of case,
	    proper tail recursion by 3rd clause of case,
	    proper tail recursion by last clause of case,
	    proper tail recursion by case-else,
	    proper tail recursion by case-else with begin,
	    proper tail recursion by case-else with let,
	    proper tail recursion by case-else with let*,
	    proper tail recursion by case-else with letrec,
	    proper tail recursion by and-tail,
	    proper tail recursion by and-tail with begin,
	    proper tail recursion by and-tail with let,
	    proper tail recursion by and-tail with let*,
	    proper tail recursion by and-tail with letrec,
	    improper tail recursion by and-tail,
	    proper tail recursion by or-tail,
	    proper tail recursion by or-tail with begin,
	    proper tail recursion by or-tail with let,
	    proper tail recursion by or-tail with let*,
	    proper tail recursion by or-tail with letrec,
	    improper tail recursion by or-tail,
	    iteration by do,
	    proper tail recursion with do,
	    proper tail recursion by flip-flop procs,
	    proper tail recursion by flip-flop procs with begin,
	    proper tail recursion by flip-flop procs with let,
	    proper tail recursion by flip-flop procs with let*,
	    proper tail recursion by flip-flop procs with letrec,
	    proper tail recursion by flip-flop procs defined by letrec,
	    proper tail recursion by named let,
	    proper tail recursion by named let with begin,
	    proper tail recursion by named let with let,
	    proper tail recursion by named let with let*,
	    proper tail recursion by named let with letrec,
	    improper infinite tail recursion,
	    proper infinite tail recursion): New test
	
2005-08-04 kzk <mover@hct.zaq.ne.jp>
	
	* Applied patch by Jun Mukai <jun.lambda@gmail.com>
	  Thank you!
	
	* sigscheme/sigschemetype.h
	  - add parenthesiss to the c-macro argument
	* sigscheme/eval.c
	  - (ScmExp_cond): return SCM_UNSPECIFIED when no tests become true
	    value
	  
	
2005-08-03 kzk <mover@hct.zaq.ne.jp>
	
	* fix "do" behavior
	
	* sigscheme/eval.c
	  - (ScmOp_do): each <step>s' execution result must not depend on
	    each other. so we need to allocate new space for storing each
	    results and set it by hand.
	
	* sigscheme/test/test-exp.scm
	  - add testcase for "do"
	
2005-08-03 kzk <mover@hct.zaq.ne.jp>
	
	* implement "Named let"
	
	* sigscheme/eval.c
	  - (add_environment): create env correctly when env is SCM_NIL
	  - (ScmExp_let): implement named let
	  - (ScmExp_let_star): use add_environment correctly
	* sigscheme/test/test-exp.scm
	  - add testcase for named let
	
2005-08-03 kzk <mover@hct.zaq.ne.jp>
	
	* added files foc SLIB configuration. Now, SLIB path is directly written in the code.
	  we need to autogenerate the path to SLIB.
	
2005-08-03 kzk <mover@hct.zaq.ne.jp>
	
	* fix "letrec" behavior
	* fix "repl" behavior
	
	* sigscheme/eval.c
	  - (letrec_env): new variable
	  - (symbol_value): lookup letrec_env also
	  - (ScmExp_letrec): use letrec_env and construct new environment
	* sigscheme/sigscheme.c
	  - (continuation_thrown_obj, letrec_env): new variable
	  - (SigScm_Initialize): initialize continuation_thrown_obj,
	    letrec_env
	* sigscheme/sigscheme.h
	  - disable SRFI1 feature now
	* sigscheme/test/test-exp.scm
	  - add testcases for letrec
	
	* sigscheme/main.c
	  - (repl): protect stack correctly
	
	
2005-08-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c 
	  - (add_environment): val can be SCM_NIL
	  - (ScmOp_eval): fix error function to use
	  - (ScmExp_cond): fix error function to use
	
2005-08-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/io.c
	  - (SigScm_load): protecting stack by calling SigScm_gc_protect_stack
	    and SigScm_gc_unprotect_stack. this prevents stack_start_pointer
	    to become null in gc phase. 
	
2005-08-02 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-apply
	  - add testcases for dot list arg
	* sigscheme/test/test-exp.scm
	  - add testcases for letrec. second test failed now, so need to fix!
	
2005-08-01 kzk <mover@hct.zaq.ne.jp>
	
	* fix "letrec" behavior
	
	* sigscheme/eval.c
	  - (ScmExp_letrec): do not evaluate initial value, because
	    ScmExp_set also evaluates the 2nd argument.
	
2005-08-01 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_list, read_sexpression): fix warning
	  - (read_char): call strlen properly.
	
2005-07-31 kzk <mover@hct.zaq.ne.jp>
	
	* This commit aims to...
	  - move "port_type" to struct ScmPortInfo
	  - implement "write" and "display" distinction as defined
	    in R5RS.
	  - add "print" procedure for convinience
	
	* sigscheme/io.c
	  - (ScmOp_write): use SigScm_WriteToPort instead of
	    SigScm_DisplayToPort.
	  - (ScmOp_print): new func
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "print"
	* sigscheme/read.c
	  - (SCM_PORT_GETC, skip_comment_and_space, read_list)
	    : use SCM_PORTINFO_PORTTYPE instead of SCM_PORT_PORTTYPE
	  - (read_string): add support for "\r", "\f"
	* sigscheme/sigscheme.h
	  - (ScmOp_print, ScmOp_WriteToPort): new func
	* sigscheme/sigschemetype.h
	  - move port_type to struct ScmPortInfo
	* sigscheme/debug.c (THIS FILE IS LARGELY REWRITTEN BY THIS COMMIT)
	  - (enum OutputType): new enumeration
	  - (print_char, print_string, print_port, print_etc): new func
	  - (SigScm_Display): change args of print_ScmObj_internal
	  - (SigScm_WriteToPort): new func
	  - (SigScm_DisplayToPort): check port type and change args of
	    print_ScmObj_internal
	  - (print_ScmObj_internal): change args and rewrite "switch" based
	  - (print_list, print_vector): change args
	* sigscheme/datas.c
	  - (gc_mark_protected_obj): initialize "item" variable
	  - (Scm_NewFilePort, Scm_NewStringPort): apply structure's change
	    of port_type
	* sigscheme/test/test-define
	  - add testcase for internal define
	
2005-07-30 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-define.scm
	  - add test cases for null arg
	* sigscheme/eval.c
	  - (ScmOp_eval, ScmOp_apply): when closure's argnument is NIL,
	    no need to extend environment
	
2005-07-30 kzk <mover@hct.zaq.ne.jp>
	
	Oops, forgot to commit..
	
	please look at r1074's log.
	
	
2005-07-30 kzk <mover@hct.zaq.ne.jp>
	
	* add filename information to port.
	
	* sigscheme/sigscheme.h
	* sigscheme/datas.c
	  - (Scm_NewFilePort): change args
	* sigscheme/debug.c
	  - (SigScm_Display): use current_output_port
	  - (SigScm_DisplayToPort): print more info for port
	* sigscheme/main.c
	  - (repl): change args of Scm_NewFilePort
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): change args of Scm_NewFilePort
	* sigscheme/io.c
	  - (ScmOp_open_input_file): change args of Scm_NewFilePort
	  - (ScmOp_open_output_file): change args of Scm_NewFilePort
	  - (ScmOp_read_char): SigScm_Read_Char reads character sequence.
	     so not to use it.
	  - (ScmOp_file_existp): close FILE stream when file is found
	
	* test/test-apply.scm
	* test/test-exp.scm
	  - add test case
	
2005-07-30 kzk <mover@hct.zaq.ne.jp>
	
	* fix many, many bugs...
	
	* sigscheme/io.c
	  - (ScmOp_call_with_input_file): use apply instead of eval,
	    because eval re-evaluated the argument.
	  - (ScmOp_call_with_output_file): Ditto.
	  - (ScmOp_with_input_from_file): Ditto.
	  - (ScmOp_with_output_to_file): Ditto.
	  - (ScmOp_read): fixed argument handling.
	  - (ScmOp_write): use current_output_port. too odd..
	  - (ScmOp_file_existp): new func for SLIB
	  - (ScmOp_delete_file): new func for SLIB
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "file-exists?" and "delete-file"
	    for SLIB. and add current_error_port.
	* sigscheme/sigscheme.h
	  - (current_error_port): new variable
	  - (ScmOp_file_existp): new func for SLIB
	  - (ScmOp_delete_file): new func for SLIB
	* sigscheme/debug.c
	  - (print_ScmObj_internal): print "port".
	* sigscheme/eval.c
	  - (lookup_environment): change error message
	  - (lookup_frame): change error message and handle dot list
	     correctly.
	  - (ScmOp_apply): no need to evaluate args in apply
	* sigscheme/error.c
	  - (SigScm_Error): use current_error_port instead of
	    current_output_port
	  - (SigScm_ErrorObj): use current_error_port instead of
	    current_output_port
	  
	
2005-07-29 kzk <mover@hct.zaq.ne.jp>
	
	* fixed the behavior of "apply", "map" and procs around IO.
	
	* sigscheme/eval.c
	  - (ScmOp_apply): fixed argument handling
	* sigscheme/operations.c
	  - (ScmOp_cdr): fixed error message
	  - (ScmOp_map): fixed argument handling
	* sigscheme/operations.c
	  - (ScmOp_cdr): fixed error message
	* sigscheme/io.c
	  - (ScmOp_read): fixed typo
	  - (ScmOp_read_char): fixed typo
	  - (ScmOp_write): fixed argument handling
	  - (ScmOp_display): fixed argument handling
	  - (ScmOp_newline): fixed argument handling
	  - (ScmOp_write_char): fixed argnument handling
	
	* sigscheme/test/test-map.scm
	  - add test case for defined procedure
	* sigscheme/test/test-apply.scm
	  - add testcases for various ARGNUM type
	
	
2005-07-28 kzk <mover@hct.zaq.ne.jp>
	
	* implement "cond" correctly
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): intern "=>" symbol
	* sigscheme/eval.c
	  - (lookup_frame): handle "((lambda (x . z) z) 1)" correctly
	  - (ScmOp_apply): fixed typo
	  - (ScmExp_cond): behave as defined in R5RS
	  - (ScmExp_case): fixed typo
	  - (ScmExp_or): handle "true" value correctly
	
2005-07-28 kzk <mover@hct.zaq.ne.jp>
	
	* test/test-exp.scm
	  - add testcases for "and", "or", "begin" and "do" from R5RS specification
	
2005-07-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_char_sequence): handle space (#\ ) correctly.
	
2005-07-28 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-exp.scm
	  - more testcases for "lambda" and "cond"
	    fix to pass these tests!
	
2005-07-28 kzk <mover@hct.zaq.ne.jp>
	
	* test/test-char.scm
	  - add testcases for (char? #\ ), that is, space handling.
	    fix to pass this test!
	
	* test/test-exp.scm
	  - add testcases for lambda
	    fix to pass "basic lambda test8"!
	  - add testcases for cond
	    but current cond doesn't support "=>" form
	
2005-07-27 kzk <mover@hct.zaq.ne.jp>
	
	* now support (+), (+ num), (- num), (*), (* num)
	
	* sigscheme/operations.c
	  - (ScmOp_plus2n):  support 0 and 1 arg
	  - (ScmOp_minus2n): support 1 arg
	  - (ScmOp_multi2n): support 0 and 1 arg
	* sigscheme/eval.c
	  - (ScmOp_eval, ScmOp_apply): handle 1st and 2nd argument
	    of ARGNUM_2N function correctly.
	
	* sigscheme/test/test-num.scm
	  - add testcases for the use listed above
	
2005-07-27 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - comment update
	
2005-07-27 kzk <mover@hct.zaq.ne.jp>
	
	* implement "apply" procedure. but i think this procedure is not well tested.
	  So, please add many testcases for this proc.
	
	* sigscheme/eval.c
	  - (ScmOp_apply): re-implemented correctly
	* sigscheme/test/test-apply.scm
	  - add testcase
	
2005-07-27 kzk <mover@hct.zaq.ne.jp>
	
	* This commit implements tail-recursion optimization.
	
	* sigscheme/sigscheme.h
	  - (Scm_InitSubR_NotEval,
	     Scm_InitSubR_Eval): new func
	  - (Scm_InitSubr0, Scm_InitSubr1,
	     Scm_InitSubr2, Scm_InitSubr3,
	     Scm_InitSubr4, Scm_InitSubr5,
	     Scm_InitSubrL, Scm_InitSubr2N): add const quolifier
	  - (ScmExp_lambda, ScmExp_if,
	     ScmExp_if, ScmExp_set,
	     ScmExp_cond, ScmExp_case,
	     ScmExp_cand, ScmExp_or,
	     ScmExp_let, ScmExp_let_star,
	     ScmExp_letrec, ScmExp_begin,
	     ScmExp_do, ScmExp_delay,
	     ScmExp_define): change args
	* sigscheme/sigschemetype.h
	  - add ARGNUM_R_NotEval and ARGNUM_R_Eval type
	
	* sigscheme/eval.c
	  - (ScmOp_eval): handle ARGNUM_R_Eval, and ARGNUM_R_NotEval.
	    the result of ARGNUM_R_Eval type func is evaluated once
	    again in the eval_loop. that of ARGNUM_R_NotEval is not
	    evaluated again.
	
	  - (ScmOp_apply): now broken. I'm goint to write apply properly.
	  - (ScmExp_lambda): change args
	  - (ScmExp_if): change args. not evaluate body.
	  - (ScmExp_begin): change args. now begin doesn't evaluate the
	    last expression. it returns the exp with un-evaluated condition
	    to the eval.
	  - (ScmExp_set): change args.
	  - (ScmExp_cond): change args
	  - (ScmExp_case): change args
	  - (ScmExp_and): change args
	  - (ScmExp_or): change args
	  - (ScmExp_let): change args
	  - (ScmExp_let_star): change args
	  - (ScmExp_letrec): change args
	  - (ScmExp_do): change args
	  - (ScmExp_define): change args
	
	* sigscheme/datas.c
	  - update comment
	
	
2005-07-27 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-map.scm
	  - using assert-equal?
	
2005-07-26 kzk <mover@hct.zaq.ne.jp>
	
	* protect register by using jmp_buf
	
	* sigscheme/datas.c
	  - (gc_mark): protect register by using jmp_buf
	  - (gc_mark_stack): renamed to gc_mark_locations
	  - (gc_mark_locations_n): new func
	
	
2005-07-26 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/datas.c
	  - revert r1024, because GC seems to have weird bugs.
	    We've allocated the big size of the heaps, so no problem seems to be arised.
	    But seemingly, SEGV of "bench/bench-case.scm" and "bench/bench-let-loop.scm"
	    caused by the bug of GC. So, I changed the heapsize and heapnum to the small
	    value for debugging purpose.
	
2005-07-26 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/test/test-exp.scm: Added one more test for
	  lexical scope.
	
2005-07-26 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/test/test-exp.scm: Added a new lexical scope test.
	
2005-07-26 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/eval.c: Now nested define works properly.
	 -(add_environment): Fixed to create new_vallist correctly.
	
2005-07-25 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-exp.scm
	  - add testcases for "lambda"
	
2005-07-25 kzk <mover@hct.zaq.ne.jp>
	
	* Now my test is almost over!
	  This commit aims to support dot list argument correctly.
	  (revert r1018). but evaluator gets a bit slower..
	
	* sigscheme/eval.c
	  - (extend_environment): revert r1018
	  - (ScmOp_eval): handle closure's argument as defined in R5RS.
	  - (ScmExp_define): handle dot-list argument correctly
	
	
2005-07-25 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/datas.c: This commit will imporve GC a bit.
	 - Now heap will be allocated four times of SCM_HEAP_SIZE
	   for loop unrolling.
	 - Global variable should not used for loop conditions.
	
2005-07-25 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/test/unittest.scm: Fix a bug of assert. (#t) and (#f) are a invalid
	  code, because meaning of this code is 'call #t as procedure.'
	
	 -(assert): Boolean should be 'called'.
	
2005-07-25 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/MEMO: Updated. Added description about autoloading
	  and error handling.
	
2005-07-25 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/test/test-apply.scm: Changed wrong test.
	
2005-07-24 YAMAMOTO Kengo / YamaKen <yamaken@bp.iij4u.or.jp>
	
	* sigscheme/bench/bench-cpstak.scm
	  - Remove svn:mime-type property to enable diffing
	
2005-07-24 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/test/test-define.scm: Added a new test. Now sscm fails.
	 -(idefine-o): Test for internal define.
	
2005-07-24 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/bench-cpstak.scm: New bench mark file.
	  - Now we can't measure the performance because sscm segfaults
	    with this benchmark :-(
	
2005-07-24 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/eval.c: Support dot list as function argument.
	 - (extend_environment): Support dot list argument binding.
	 - (ScmExp_define): Implemented dot list argument.
	
	* sigcheme/test/test-define.scm: Added tests for dot list argument.
	
2005-07-24 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/eval.c: Fixed the bug that closure doesn't work.
	 -(ScmOp_eval): Call ScmExp_begin instead of ScmOp_eval, because
	   ScmOp_eval evaluate only first arguments.
	 -(ScmExp_define): Fixed wrong body was passed to ScmExp_lambda.
	
2005-07-24 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/test-define.scm: Added (total-report) because previous commit
	   removed calling of this function.
	
2005-07-24 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/test/test-define.scm:
	 - (what?): Rewrite test a bit.
	
2005-07-23 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/io.c:
	 -(SigScm_load): Filename should be copied.
	
2005-07-23 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/read.c:
	 -(read_list): Remember the line that list begins.
	
2005-07-23 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/datas.c:
	 - (Scm_Intern): If name is already interned, do not copy.
	
2005-07-23 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/datas.c: Removed all #ifdef USE_BOEHM_GC. They were experimental
	  code, should not be committed.
	
2005-07-23 kzk <mover@hct.zaq.ne.jp>
	
	* Add srfi-1 procedures. now we get "Constructors" procedure.
	  
	  Reference : http://srfi.schemers.org/srfi-1/srfi-1.html
	
	* sigscheme/sigscheme.h
	  - (USE_SRFI1)
	      : new compilation flag
	  - (ScmOp_SRFI_1_xcons,
	     ScmOp_SRFI_1_cons_star,
	     ScmOp_SRFI_1_make_list,
	     ScmOp_SRFI_1_list_tabulate,
	     ScmOp_SRFI_1_list_copy,
	     ScmOp_SRFI_1_circular_list,
	     ScmOp_SRFI_1_iota)
	       : new func;
	  - (ScmNewStringCopying)
	       : add "const" quolifier
	* sigscheme/operations-srfi1.c
	  - new file
	* sigscheme/test/test-srfi1.scm
	  - new testcases for "Constructors" procedure.
	* sigscheme/operations.c
	  - include "operations-srfi1.c" when USE_SRFI1 flag is avtivated
	* sigscheme/datas.c
	  - (ScmNewStringCopying)
	       : add "const" quolifier
	
	
2005-07-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/eval.c
	  - (ScmExp_let_star, ScmExp_letrec): fix error message
	
2005-07-22 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/read.c
	  - (read_list): handle dot list correctly.
	
2005-07-22 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/MEMO: Added description for vector.
	
2005-07-22 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* MEMO (NEW): Temporary memo file.
	
2005-07-21 kzk <mover@hct.zaq.ne.jp>
	
	* Now I implemented Scm_eval_c_string by introducing STRING_PORT.
	  Currently, STRING_PORT is only for INPUT.
	
	* sigscheme/read.c
	  - (SCM_PORT_GETC): handle PORT_STRING
	  - use Scm_NewStringCopying to simplify the code
	* sigscheme/sigscheme.h
	* sigscheme/datas.c
	  - (Scm_NewFilePort): renamed from Scm_NewPort
	  - (Scm_NewStringPort): new func
	  - (Scm_eval_c_string): new func
	* sigscheme/sigschemetype.h
	  - introduce PORT_STRING related macros
	
	* sigscheme/operations.c
	  - use Scm_NewStringCopying to simplify the code
	
	* sigscheme/sigscheme.c
	* sigscheme/io.c
	* sigscheme/main.c
	  - (SigScm_Initialize): use Scm_NewFilePort instead of Scm_NewPort
	
2005-07-21 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/read.c:
	 - (skip_comment_and_space): Added counting of line number.
	 - (read_list): Print line start number if file ends inside the list.
	
2005-07-21 kzk <mover@hct.zaq.ne.jp>
	
	* Now SigScm_Error can handle printf like output.
	
	* sigscheme/sigscheme.h
	* sigscheme/sigscheme,c
	  - (SigScm_Error):
	    changed from
	      void SigScm_Error(const char *msg);
	    to
	      void SigScm_Error(const char *msg, ...);
	
2005-07-21 kzk <mover@hct.zaq.ne.jp>
	
	* introduce PortDirection and PortType as follows. Then, I'm going to add
	  PORT_STRING related code for eval_c_string function.
	
	/* ScmPort direction */
	enum ScmPortDirection {
	    PORT_INPUT  = 0,
	    PORT_OUTPUT = 1
	};
	
	/* ScmPort type */
	enum ScmPortType {
	    PORT_FILE   = 0,
	    PORT_STRING = 1
	};
	
	* sigscheme/io.c
	  - (ScmOp_open_output_file, ScmOp_open_input_file):
	    - use SCM_PORT_PORTDIRECTION instead of SCM_PORT_PORTTYPE
	    - fix Scm_NewPort args
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): fix Scm_NewPort args
	* sigscheme/sigscheme.h
	  - (Scm_NewPort): change args
	* sigscheme/sigschemetype.h
	* sigscheme/datas.c
	  - introduce ScmPortDirection and ScmPortType
	* sigscheme/main.c
	  - (repl): fix Scm_NewPort args and fix indentation
	
	
2005-07-21 kzk <mover@hct.zaq.ne.jp>
	
	* implment getter functions for C-Interface
	
	* sigscheme/sigschemetype.h
	  - introduce C_FUNC type
	* sigscheme/sigscheme.h
	* sigscheme/datas.c
	  - (Scm_NewStringCopying): new func
	  - (Scm_GetInt, Scm_GetString, Scm_GetCPointer, Scm_GetCFuncPointer): new func
	
	
2005-07-21 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/sigschemetype.h:
	 - (ScmPortInfo): Added a new member 'line'.
	
	* sigscheme/datas.c:
	 - (Scm_NewPort): Added a initialization for line.
	
2005-07-21 kzk <mover@hct.zaq.ne.jp>
	
	* add ScmCPointer type and ScmCFuncPointer type for C-Programming
	  Interface.
	
	* sigscheme/sigscheme.h
	* sigscheme/datas.c
	  - (Scm_NewCPointer, Scm_NewCFuncPointer): new func
	* sigscheme/sigschemetype.h
	  - add ScmCPointer type and ScmCFuncPointer type
	* sigscheme/operations.c
	  - (ScmOp_eqvp, ScmOp_equalp): handle ScmCPointer and ScmCFuncPointer
	
	
2005-07-21 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/sigscheme.h: Fixed a typo.
	
2005-07-21 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/sigscheme.h: Added extern "C".
	
2005-07-20 kzk <mover@hct.zaq.ne.jp>
	
	* Now sigscheme have "continuation" support. this feature
	  is implemented by using setjmp and longjmp.
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): export "call-with-current-continuation"
	* sigscheme/sigscheme.h
	  - (ScmOp_NewContinuation): new func
	  - (ScmOp_call_with_current_continuation): new func
	* sigscheme/sigschemetype.h
	  - add ScmContinuation type and the macros related to it
	* sigscheme/eval.c
	  - (ScmOp_eval): handle ScmContinuation
	* sigscheme/datas.c
	  - (Scm_NewContinuation): new func
	  - (sweep_obj): handle ScmContinuation
	* sigscheme/operations.c
	  - (ScmOp_call_with_current_continuation): new func
	* sigscheme/test/test-continuation.scm
	  - testcases for "call-with-current-continuation"
	
	* sigscheme/main.c
	  - add space
	* sigscheme/debug.c
	  - support ScmPort and ScmContinuation
	
2005-07-20 kzk <mover@hct.zaq.ne.jp>
	
	* implement proper "letrec"
	
	* sigscheme.c
	  - (SigScm_Initialize): export "letrec" as ScmOp_letrec
	
	* sigscheme.h
	* eval.c
	  - (ScmOp_letrec): new func
	
2005-07-20 kzk <mover@hct.zaq.ne.jp>
	
	* test/test-let.scm
	* test/test-do.scm
	* test/test-case.scm
	  - contents moved to test/test-exp.scm
	
	* test/test-exp.scm
	  - add let, case, do, begin testcase
	
	* test/unittest.scm
	  - add debug message
	
2005-07-20 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme.c: main.c: Implemented simple repl for convenience.
	 -(repl): New function.
	 -(main): Call repl() if filename is not passed.
	
2005-07-20 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/test/test-equation.scm
	  - merge test cases for eqv? reported by oxy
	
2005-07-19 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/Makefile.am: Removed some unneed compile flags.
	
2005-07-19 TOKUNAGA Hiroyuki <tkng@xem.jp>
	
	* sigscheme/main.c: 
	 - (main): SigScm_Initialize() must be called at first.
	
2005-07-19 kzk <mover@hct.zaq.ne.jp>
	
	* sigscheme/Makefile.am 
	  - change to create libsscm.la
	
	* sigscheme/sigscheme.h
	* sigscheme/sigscheme.c
	  - (SigScm_gc_protect_stack, SigScm_gc_unprotect_stack)
		: new func
	
2005-07-19 kzk <mover@hct.zaq.ne.jp>
	
	* This commit implements "number->string" and "string->number". These
	  functions doesn't support radix now.
	
	* sigscheme/sigscheme.h
	* sigscheme/operations.c
	  - (ScmOp_number_to_string, ScmOp_string_to_number): new func
	* sigscheme/sigscheme/c
	  - (SigScm_Initialize): init subr "number->string" and "string->number"
	
	* sigscheme/test/test-num
	  - add testcases for "number->string" and "string->number"
	
2005-07-19 kzk <mover@hct.zaq.ne.jp>
	
	* Add test-list.scm for testing list processing procedures.
	
	* sigscheme/test/test-list.scm
	  - new file
	* sigscheme/test/unittest.scm
	  - valid error message
	
	* sigscheme/sigscheme.h
	* sigscheme/operations.c
	  - (ScmOp_member, ScmOp_assoc): new function
	
	* sigscheme/sigscheme.c
	  - fixed typo (pairp? -> pair?)
	  - add "member" and "assoc"
	
	
2005-07-19 kzk <mover@hct.zaq.ne.jp>
	
	* This commit aims to print more efficient error message
	  for debugging.
	
	* sigscheme/sigscheme.h
	  - (SigScm_ErrorObj): new func
	* sigscheme/error.c
	  - (SigScm_ErrorObj): new func
	
	* sigscheme/io.c
	* sigscheme/read.c
	* sigscheme/operations.c
	* sigscheme/eval.c
	* sigscheme/debug.c
	  - rewrite almost all the error message.
	
	
2005-07-19 kzk <mover@hct.zaq.ne.jp>
	
	* I have implemented "equal?" procedure. And by using this,
	  many test cases are added.
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize): added "equal?", fixed typo "remainder"
	    and protect current_input_port and current_output_port from
	    gc.
	* sigscheme/sigscheme.h
	  - (SigScm_gc_protect): new func
	  - (Scm_NewVector): now second arg's type is int
	  - (ScmOp_equalp): new func
	  - (ScmOp_remainder): fixed typo
	* sigscheme/operations.c
	  - (ScmOp_equalp): new func
	  - (ScmOp_remainder): fixed typo
	  - now SCM_VECTOR_LEN returns int value
	* sigscheme/debug.c
	  - now SCM_VECTOR_LEN returns int value
	* sigscheme/datas.c
	  - now SCM_VECTOR_LEN returns int value
	  - (SigScm_gc_protect): new func
	
	* test/test-vector.scm
	  - renamed from vector.scm
	* test/test-equation.scm
	  - add "equal?" test case
	* test/test-quote.scm
	  - renamed from quote.scm
	* test/test-num.scm
	  - add "abs", "quotient", "modulo", "remainder" test cases
	* test/test-string.scm
	  - add "string->list" test case
	* test/test-map.scm
	  - renamed from map.scm
	
2005-07-18 kzk <mover@hct.zaq.ne.jp>
	
	* Now "append", "let*", "letrec", "do" is implemented.
	
	* sigscheme/sigscheme.c
	  - (SigScm_Initialize) : init subr "let*", "letrec",
	    "do", "append".
	
	* sigscheme/sigscheme.h
	  - (ScmExp_let_star) : new func
	  - (ScmExp_do) : new func
	
	* sigscheme/operations.c
	  - (ScmOp_append_internal) : new func
	  - (ScmOp_append) : new func
	
	* sigscheme/eval.c
	  - (ScmExp_let_star) : new func
	  - (ScmExp_do) : new func
	
	* sigscheme/test/test-let.scm
	  - add some testcases for "let", "let*", "letrec"
	
	* sigscheme/test/test-do.scm
	  - new file. test case for "do"
	
	
	
2005-07-18 kzk <mover@hct.zaq.ne.jp>
	
	Now add SigScheme to the repositry.
	

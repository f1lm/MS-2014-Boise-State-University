;Scheme Program for replace
(define (replace ls old new) 
  (cond ((equal? ls old) new) 
        ((not (pair? ls)) ls)     
        (else (copy-list (cons (replace (car ls) old new)
                    (replace (cdr ls) old new))))))
					
(define (copy-list list)
    (if (null? list)'()
        (cons (car list)
            (copy-list (cdr list)))))
  ;test cases
  (display(replace  (list 1 2 3 4 5) 4 7))
  (newline)
  (display(replace  (list 1 2 3 5 5) 5 7))
  (newline)  
  (display(replace '(2 1 4) 1 2))
  (newline)
  (display(replace '(1 2 5 3) 2 10))
  (newline)  
  (display(replace '(1 (2 5) 3) '(2 5) 10))
  (newline)
  (display(replace  '(list  e f (a b) g h) '(a b) '(1 2)))
  (newline)
  (display(replace  '(list (1 2 (o r y)(x (o r y))) ) '(o r y) '(o m g)) )
  (newline)
  (display(replace '(a (b c) (d (b c)))'(b c)'(x y)))
  (newline)
  (display(replace '(a (b c) d)'(b c)'(x y)))
  (newline)
  (display(replace '(a b c)'(a b)'(x y)))
  (newline)
  (display(replace '(a b c)'(b c)'(x y)))
  (newline)
  (display (replace 1 '(1 2) 0))
  (newline)
  (display (replace 1 1 '(1 2)))
  (newline)
  (display (replace '(3) '(1 2) 0))
  (newline)
  (display (replace '(1 2) '(1 2) 1))
  (newline)
  (display (replace '(1 (2 3)) '(1 (2 3)) '(0 0)))
  (newline)
  (display (replace '(1 2 3 3 4) 3 0))
  (newline)
  (display (replace '(1 2 3 3 4) 3 '(0 0)))
  (newline)
  (display (replace '(1) 1 '(2)))
  (newline)
  (display (replace '(1) '(1) '(2)))
  (newline)
  (display (replace '((1 2) 3) 1 0))
  (newline)
  (display (replace '(1 (1 2) 3) '(1 2) 0))
  (newline)
  (display (replace '((1 2)) '(1 2) '(0 0)))
  (newline)
  (display (replace '(1 (1 2) 3) '(1 2) '(0 0)))
  (newline)
  (display (replace '(a b c) '(b c) '(x y)))
  (newline)
  (display (replace '() 'X 'Y))
  (newline)

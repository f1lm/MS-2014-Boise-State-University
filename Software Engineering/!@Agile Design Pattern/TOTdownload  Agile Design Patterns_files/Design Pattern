// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-4723248083833296548"},"updated":{"$t":"2014-10-31T16:43:47.487-07:00"},"category":[{"term":"Programming"},{"term":"Lynda"},{"term":"WEB"},{"term":"Books"},{"term":"Microsoft"},{"term":"PluralSight"},{"term":"Design"},{"term":"PDF"},{"term":"Video2Brain"},{"term":"PHP"},{"term":"Mobile"},{"term":"Database"},{"term":"Other"},{"term":"Open Source"},{"term":"Java"},{"term":"ASP.NET"},{"term":"JavaScript"},{"term":"CSS"},{"term":"Tutsplus"},{"term":"Android"},{"term":"WordPress"},{"term":"C#"},{"term":"HTML5"},{"term":"jQuery"},{"term":"Flash"},{"term":"Photoshop"},{"term":"OS"},{"term":"Photograpy"},{"term":"SQL Server"},{"term":"Business \u0026 Marketing"},{"term":"MySQL"},{"term":"Network"},{"term":".NET Magazine"},{"term":"ASP.NET MVC"},{"term":"Magazine Download"},{"term":"SharePoint"},{"term":"dreamweaver"},{"term":"HTML"},{"term":"InfiniteSkills"},{"term":"SQL Server 2012"},{"term":"Drupal"},{"term":"Windows Phone"},{"term":"CSS3"},{"term":"Games"},{"term":"Joomla"},{"term":"Office"},{"term":"C++"},{"term":"IT Certifications"},{"term":"KelbyTraining"},{"term":"SQL"},{"term":"Social"},{"term":"Windows"},{"term":"iOS"},{"term":"AppDev"},{"term":"Facebook"},{"term":"InDesign"},{"term":"MAC"},{"term":"Oracle"},{"term":"Ruby on Rails"},{"term":"VB.NET"},{"term":"Visual Studio"},{"term":"Windows Phone 8"},{"term":"iPhone"},{"term":"3D"},{"term":"3DS Max"},{"term":"A+"},{"term":"Access"},{"term":"Ajax"},{"term":"Android Apps"},{"term":"Cloud"},{"term":"Design Pattern"},{"term":"Google"},{"term":"Illustrator"},{"term":"MULTIMEDIA"},{"term":"Opjective-C"},{"term":"SEO"},{"term":"Security"},{"term":"Software"},{"term":"TekPub"},{"term":"Windows Phone 7"},{"term":".NET"},{"term":"ActionScript"},{"term":"Ads Design"},{"term":"Android Themes"},{"term":"Articles"},{"term":"Business"},{"term":"CMS"},{"term":"Ecommerce"},{"term":"Fireworks"},{"term":"Game Programming"},{"term":"Interview"},{"term":"Kelby Training"},{"term":"Keystone"},{"term":"Magento"},{"term":"Marketing"},{"term":"Oracle 11g"},{"term":"Python"},{"term":"Strategy Game"},{"term":"TeamTreehouse"},{"term":"TeracomTraining"},{"term":"Twitter"},{"term":"Unix"},{"term":"VTC"},{"term":"Web Service"},{"term":"Windows Azure"},{"term":"Windows Server"},{"term":"XML"},{"term":"API"},{"term":"Action Games"},{"term":"AdWords"},{"term":"Adobe Dreamweaver CS5.5"},{"term":"Adobe Dreamweaver CS6"},{"term":"AllTutorials"},{"term":"Android Games"},{"term":"Apache"},{"term":"Apple"},{"term":"Architeckt"},{"term":"AutoCAD"},{"term":"Autodesk"},{"term":"Bootstrap"},{"term":"C"},{"term":"CCNA"},{"term":"CartoonSmart"},{"term":"Clojure"},{"term":"Cocoa"},{"term":"ColdFusion"},{"term":"Crystal Reports"},{"term":"Data Analysis"},{"term":"Deitel"},{"term":"Excel"},{"term":"FIFA 2014"},{"term":"FreeLancing"},{"term":"GLSL"},{"term":"GML"},{"term":"Git"},{"term":"JOSN"},{"term":"KillerVideoStore"},{"term":"LINQ"},{"term":"Laravel"},{"term":"LearnNowDev"},{"term":"LearnNowPlus"},{"term":"LiveLesson"},{"term":"MVC 4"},{"term":"MagentoCommerce"},{"term":"MonogoDB"},{"term":"OOP"},{"term":"OSTraining"},{"term":"Object Oriented"},{"term":"Objective-C"},{"term":"PayPal"},{"term":"Perl"},{"term":"Pl\/SQL"},{"term":"Premiere Pro"},{"term":"RWTH"},{"term":"RailsTutorial"},{"term":"Rome Total War 2"},{"term":"Sales"},{"term":"Scrum"},{"term":"Silverlight"},{"term":"SpeedGrade CS6"},{"term":"Sport games"},{"term":"TCP\/IP"},{"term":"Testing"},{"term":"TheNewBoston"},{"term":"VBA"},{"term":"WebMatrix"},{"term":"Word"},{"term":"Worx"},{"term":"iPad"},{"term":"linux"},{"term":"vSphere"}],"title":{"type":"text","$t":"TOTdownload"},"subtitle":{"type":"html","$t":"TotDownlod , Download Tutorial , Video Learning , Lynda , Total Training , Video2Brain ,  Tutsplus , Kelby , LiveLesson , Wiley, Download"},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/www.totdownload.com\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4723248083833296548\/posts\/default\/-\/Design+Pattern?alt=json-in-script\u0026max-results=6"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.totdownload.com\/search\/label\/Design%20Pattern"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"}],"author":[{"name":{"$t":"Beshoy Shockry"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh5.googleusercontent.com\/-luMsF9z0MtY\/AAAAAAAAAAI\/AAAAAAAAADA\/0AWCMqJH3W4\/s512-c\/photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"3"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"6"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-4723248083833296548.post-2536928440207228409"},"published":{"$t":"2014-07-11T01:13:00.001-07:00"},"updated":{"$t":"2014-07-11T01:13:11.218-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Design Pattern"},{"scheme":"http://www.blogger.com/atom/ns#","term":"PHP"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Programming"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Tutsplus"}],"title":{"type":"text","$t":" Agile Design Patterns"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/4.bp.blogspot.com\/-MjrnYbJXjOE\/U7-aerZ4zTI\/AAAAAAAAB2c\/wuSGywh7rww\/s1600\/Tutsplus-Agile-Design-Patterns.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg alt=\"Tutsplus – Agile Design Patterns\" border=\"0\" src=\"http:\/\/4.bp.blogspot.com\/-MjrnYbJXjOE\/U7-aerZ4zTI\/AAAAAAAAB2c\/wuSGywh7rww\/s1600\/Tutsplus-Agile-Design-Patterns.jpg\" height=\"162\" title=\"Tutsplus – Agile Design Patterns\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003EDesign patterns are an essential part of software development. At  some point in every programmer’s career, he or she will have to dig in  and learn how to apply these patterns. Even if they may appear scary at  first, they are, in fact, much simpler to understand than you might  initially think.\u003Cbr \/\u003EIn this course, you’ll learn what design patterns are, how each of  them is defined, what they are used for, and, of course, how to  implement them in PHP! \u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Ch3 style=\"text-align: left;\"\u003ETable of content\u003C\/h3\u003E\u003Cdiv style=\"background-color: #f8f8f8; border-style: solid; border-width: 1px; margin: 3px; padding: 5px;\"\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003EIntroduction\u003C\/b\u003E\u003Cul\u003E\u003Cli\u003EIntroduction – What Are Design Patterns?\u003C\/li\u003E\u003Cli\u003EIntroduction – Basic UML Notations\u003C\/li\u003E\u003Cli\u003EIntroduction – What is Agile and Software Craftsmanship?\u003C\/li\u003E\u003C\/ul\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EAgile Design Patterns\u003C\/b\u003E\u003Cul\u003E\u003Cli\u003EThe Factory Pattern \u003C\/li\u003E\u003Cli\u003EThe Gateway Pattern \u003C\/li\u003E\u003Cli\u003EThe Proxy Pattern \u003C\/li\u003E\u003Cli\u003EThe Repository Pattern \u003C\/li\u003E\u003Cli\u003ENull Object Pattern \u003C\/li\u003E\u003Cli\u003ECommand Pattern \u003C\/li\u003E\u003Cli\u003EActive Object Pattern \u003C\/li\u003E\u003Cli\u003ETemplate Method Pattern \u003C\/li\u003E\u003Cli\u003EStrategy Pattern \u003C\/li\u003E\u003Cli\u003EFacade Pattern \u003C\/li\u003E\u003Cli\u003EObserver Pattern \u003C\/li\u003E\u003Cli\u003EMediator Pattern \u003C\/li\u003E\u003Cli\u003ESingleton Pattern \u003C\/li\u003E\u003Cli\u003EMonostate Pattern \u003C\/li\u003E\u003Cli\u003EAbstract Server Pattern \u003C\/li\u003E\u003Cli\u003EAdapter Pattern \u003C\/li\u003E\u003Cli\u003EBridge Pattern \u003C\/li\u003E\u003Cli\u003EComposite Pattern \u003C\/li\u003E\u003Cli\u003EVisitor Pattern \u003C\/li\u003E\u003Cli\u003EState Pattern \u003C\/li\u003E\u003Cli\u003EDecorator Pattern\u003C\/li\u003E\u003Cli\u003EConclusion\u003C\/li\u003E\u003C\/ul\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003C\/div\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/2.bp.blogspot.com\/-VT_uTlHfJ2k\/UpJb3mDABYI\/AAAAAAAAAR4\/ZUj_uSDsyvg\/s1600\/imagesLoad.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/2.bp.blogspot.com\/-VT_uTlHfJ2k\/UpJb3mDABYI\/AAAAAAAAAR4\/ZUj_uSDsyvg\/s1600\/imagesLoad.jpg\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cb\u003EUploaded.net\u003C\/b\u003E \u0026nbsp; \u003Cbr \/\u003E\u003Col style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Ca href=\"http:\/\/ul.to\/3mmlusnk\" target=\"_blank\"\u003Ehttp:\/\/ul.to\/3mmlusnk\u003C\/a\u003E\u0026nbsp;\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"http:\/\/ul.to\/vj860qiu\" target=\"_blank\"\u003Ehttp:\/\/ul.to\/vj860qiu\u003C\/a\u003E\u0026nbsp;\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"http:\/\/ul.to\/8ad56abw\" target=\"_blank\"\u003Ehttp:\/\/ul.to\/8ad56abw\u003C\/a\u003E\u0026nbsp;\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"http:\/\/ul.to\/300m18cg\" target=\"_blank\"\u003Ehttp:\/\/ul.to\/300m18cg\u003C\/a\u003E\u0026nbsp;\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"http:\/\/ul.to\/kzqok4ob\" target=\"_blank\"\u003Ehttp:\/\/ul.to\/kzqok4ob\u003C\/a\u003E\u0026nbsp;\u003C\/li\u003E\u003C\/ol\u003E\u0026nbsp;\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.totdownload.com\/feeds\/2536928440207228409\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.totdownload.com\/2014\/07\/agile-design-patterns.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4723248083833296548\/posts\/default\/2536928440207228409"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4723248083833296548\/posts\/default\/2536928440207228409"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.totdownload.com\/2014\/07\/agile-design-patterns.html","title":" Agile Design Patterns"}],"author":[{"name":{"$t":"Beshoy Shockry"},"uri":{"$t":"https:\/\/plus.google.com\/104745121287985530425"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh5.googleusercontent.com\/-luMsF9z0MtY\/AAAAAAAAAAI\/AAAAAAAAADA\/0AWCMqJH3W4\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"http:\/\/4.bp.blogspot.com\/-MjrnYbJXjOE\/U7-aerZ4zTI\/AAAAAAAAB2c\/wuSGywh7rww\/s72-c\/Tutsplus-Agile-Design-Patterns.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-4723248083833296548.post-4325615634841685942"},"published":{"$t":"2014-06-23T12:59:00.003-07:00"},"updated":{"$t":"2014-06-23T12:59:50.160-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Articles"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Design Pattern"}],"title":{"type":"text","$t":"Design Pattern Principles"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EDesign principles form the foundations that design patterns are built upon. They are more fundamental than design patterns. When you follow proven design principles, your code base becomes infinitely more flexible and adaptable to change, as well as more maintainable. I will briefly introduce you to some of the more widely known design principles and a series of principles known as the S.O.L.I.D. principles.\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003ECommon Design Principles\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EThere are a number of common design principles that, like design patterns, have become best practice over the years and helped to form a foundation onto which enterprise-level and maintainable software can be built. The following sections preview some of the more widely known principles. \u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EKeep It Simple Stupid (KISS)\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EAn all-too-common issue in software programming is the need to overcomplicate a solution. The goal of the KISS principle is concerned with the need to keep code simple but not simplistic, thus avoiding any unnecessary complexities.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EDon’t Repeat Yourself (DRY)\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe DRY principle aims to avoiding repetition of any part of a system by abstracting out things that are common and placing those things in a single location. This principle is not only concerned with code but any logic that is duplicated in a system; ultimately there should only be one representation for every piece of knowledge in a system.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003ETell, Don’t Ask\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe Tell, Don’t Ask principle is closely aligned with encapsulation and the assigning of responsibilities to their correct classes. The principle states that you should to tell objects what actions you want them to perform rather than asking questions about the state of the object and then making a decision yourself on what action you want to perform. This helps to align the responsibilities and avoid tight coupling between classes.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EYou Ain’t Gonna Need It (YAGNI )\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe YAGNI principle refers to the need to only include functionality that is necessary for the application and put off any temptation to add other features that you may think you need. A design methodology that adheres to YAGNI is test-driven development (TDD). TDD is all about writing tests that prove the functionality of a system and then writing only the code to get the test to pass.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003ESeparation of Concerns (SoC)\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003ESoC is the process of dissecting a piece of software into distinct features that encapsulate unique behavior and data that can be used by other classes. Generally, a concern represents a feature or behavior of a class. The act of separating a program into discrete responsibilities significantly increases code reuse, maintenance, and testability.\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EThe S.O.L.I.D. Design Principles\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe S.O.L.I.D. design principles are a collection of best practices for object-oriented design. All of the Gang of Four design patterns adhere to these principles in one form or another.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003ESingle Responsibility Principle (SRP)\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe principle of SRP is closely aligned with SoC. It states that every object should only have one reason to change and a single focus of responsibility. By adhering to this principle, you avoid the problem of monolithic class design that is the software equivalent of a Swiss army knife. By having concise objects, you again increase the readability and maintenance of a system.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EOpen-Closed Principle (OCP)\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe OCP states that classes should be open for extension and closed for modification, in that you should be able to add new features and extend a class without changing its internal behavior. The principle strives to avoid breaking the existing class and other classes that depend on it, which would create a ripple effect of bugs and errors throughout your application.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003ELiskov Substitution Principle (LSP)\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe LSP dictates that you should be able to use any derived class in place of a parent class and have it behave in the same manner without modification. This principle is in line with OCP in that it ensures that a derived class does not affect the behavior of a parent class, or, put another way, derived classes must be substitutable for their base classes.\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EInterface Segregation Principle (ISP)\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe ISP is all about splitting the methods of a contract into groups of responsibility and assigning interfaces to these groups to prevent a client from needing to implement one large interface and a host of methods that they do not use. The purpose behind this is so that classes wanting to use the same interfaces only need to implement a specific set of methods as opposed to a monolithic interface of methods.\u003C\/div\u003E\u003Ch4 style=\"text-align: left;\"\u003EDependency Injection (DI) and Inversion of Control (IoC)\u003C\/h4\u003E\u003Cdiv style=\"text-align: left;\"\u003EClosely linked to the DIP are the DI principle and the IOC principle. DI is the act of supplying a low level or dependent class via a constructor, method, or property. Used in conjunction with DI, these dependent classes can be inverted to interfaces or abstract classes that will lead to loosely coupled systems that are highly testable and easy to change.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EIn IoC, a system’s flow of control is inverted compared to procedural programming. An example of this is an IoC container, whose purpose is to inject services into client code without having the client code specifying the concrete implementation. The control in this instance that is being inverted is the act of the client obtaining the service.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.totdownload.com\/feeds\/4325615634841685942\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.totdownload.com\/2014\/06\/design-pattern-principles.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4723248083833296548\/posts\/default\/4325615634841685942"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4723248083833296548\/posts\/default\/4325615634841685942"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.totdownload.com\/2014\/06\/design-pattern-principles.html","title":"Design Pattern Principles"}],"author":[{"name":{"$t":"Beshoy Shockry"},"uri":{"$t":"https:\/\/plus.google.com\/104745121287985530425"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh5.googleusercontent.com\/-luMsF9z0MtY\/AAAAAAAAAAI\/AAAAAAAAADA\/0AWCMqJH3W4\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-4723248083833296548.post-1721888282854504251"},"published":{"$t":"2014-06-20T12:42:00.002-07:00"},"updated":{"$t":"2014-06-20T12:42:46.039-07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Articles"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Design Pattern"},{"scheme":"http://www.blogger.com/atom/ns#","term":"OOP"}],"title":{"type":"text","$t":"Design Patterns Explained"},"content":{"type":"html","$t":"\u003Cdiv dir=\"ltr\" style=\"text-align: left;\" trbidi=\"on\"\u003EDesign patterns are high-level abstract solution templates. Think of them as blueprints for solutions rather than the solutions themselves. You won’t find a framework that you can simply apply to your application; instead, you will typically arrive at design patterns through refactoring your code and generalizing your problem.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ca name='more'\u003E\u003C\/a\u003EDesign patterns aren’t just applicable to software development; design patterns can be found in all areas of life from engineering to architecture. In fact, it was the architect Christopher Alexander who introduced the idea of patterns in 1970 to build a common vocabulary for design discussion. He wrote:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: \u0026quot;Trebuchet MS\u0026quot;,sans-serif;\"\u003E\"The elements of this language are entities called patterns. Each pattern describes a\u003Cbr \/\u003Eproblem that occurs over and over again in our environment and then describes the\u003Cbr \/\u003Ecore of the solution to that problem in such a way that you can use this solution a\u003Cbr \/\u003Emillion times over without ever doing it the same way twice.\u003C\/span\u003E\"\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cspan style=\"font-family: inherit;\"\u003EAlexander’s comments are just as applicable to software design as they are to buildings and town planning.\u003C\/span\u003E\u003Cbr \/\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EOrigins\u003C\/span\u003E\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u0026nbsp;The origins of the design patterns that are prevalent in software architecture today were born from the experiences and knowledge of programmers over many years of using object-oriented programming languages. A set of the most common patterns were catalogued in a book entitled \"\u003Cspan style=\"font-family: \u0026quot;Trebuchet MS\u0026quot;,sans-serif;\"\u003EDesign Patterns: Elements of Reusable Object-Oriented Software\"\u003C\/span\u003E, more affectionately known as the \u003Cspan style=\"font-family: \u0026quot;Trebuchet MS\u0026quot;,sans-serif;\"\u003E\"Design Patterns Bible\"\u003C\/span\u003E. This book was written by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, better known as the Gang of Four.\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cbr \/\u003E\u003C\/span\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003EThey collected 23 design patterns and organized them into 3 groups:\u003C\/span\u003E\u003C\/div\u003E\u003Cul style=\"text-align: left;\"\u003E\u003Cli\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cb\u003ECreational Patterns\u003C\/b\u003E: These deal with object construction and referencing.\u003C\/span\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cb\u003EStructural Patterns\u003C\/b\u003E: These deal with the relationships between objects and how they interact with each other to form larger complex objects.\u003C\/span\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u003Cb\u003EBehavioral Patterns\u003C\/b\u003E: These deal with the communication between objects, especially in terms of responsibility and algorithms.\u003C\/span\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Ch3 style=\"text-align: left;\"\u003ENecessity\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EPatterns are essential to software design and development. They enable the expression of intent through a shared vocabulary when problem solving at the design stage as well as within the source code. Patterns promote the use of good object-oriented software design, as they are built around solid object-oriented design principles.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EPatterns are an effective way to describe solutions to complex problems. With solid knowledge of design patterns, you can communicate quickly and easily with other members of a team without having to be concerned with the low-level implementation details.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EPatterns are language agnostic; therefore, they are transferable over other object-oriented languages. The knowledge you gain through learning patterns will serve you in any first-class object-oriented language you decide to program in.\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EUsefulness\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe useful and ultimate value of design patterns lies in the fact that they are tried and tested solutions, which gives confidence in their effectiveness. If you are an experienced developer and have been programming in .NET or another object-oriented language for a number of years, you might find that you are already using some of the design patterns mentioned in the Gang of Four book. However, by being able to identify the patterns you are using, you can communicate far more effectively with other developers who, with an understanding of the patterns, will understand the structure of your solution.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EDesign patterns are all about the reuse of solutions. All problems are not equal, of course, but if you can break down a problem and find the similarities with problems that have been solved before, you can then apply those solutions. After decades of object-oriented programming, most of the problems you’ll encounter will have been solved countless times before, and there will be a pattern available to assist in your solution implementation. Even if you believe your problem to be unique, by breaking it down to its root elements, you should be able to generalize it enough to find an appropriate solution.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EThe name of the design pattern is useful because it reflects its behavior and purpose and provides a common vocabulary in solution brainstorming. It is far easier to talk in terms of a pattern name than in detail about how an implementation of it would work.\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003EWhat They Are Not\u003C\/h3\u003E\u003Cdiv style=\"text-align: left;\"\u003EDesign patterns are no silver bullet. You have to fully understand your problem, generalize it, and then apply a pattern applicable to it. However, not all problems require a design pattern. It’s true that design patterns can help make complex problems simple, but they can also make simple problems complex.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EAfter reading a patterns book, many developers fall into the trap of trying to apply patterns to everything they do, thus achieving quite the opposite of what patterns are all about — making things simple. The better way to apply patterns, as stated before, is by identifying the fundamental problem you are trying to solve and looking for a solution that fits it. This book will help with the identification of when and how to use patterns and goes on to cover the implementation from an ASP.NET point of view.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EYou don’t always have to use design patterns. If you have arrived at a solution to a problem that is simple but not simplistic and is clear and maintainable, don’t beat yourself up if it doesn’t fit into one of the 23 Gang of Four design patterns. Otherwise, you will overcomplicate your design.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003EThis talk of patterns might seem rather vague at the moment, but as you progress through the book, you will learn about the types of problems each pattern was designed to solve and work through implementations of these patterns in ASP.NET. With this knowledge, you can then apply the patterns to your applications.\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"text-align: left;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Ch3 style=\"text-align: left;\"\u003E\u003Cspan style=\"font-family: inherit;\"\u003E\u0026nbsp;\u003C\/span\u003E\u003C\/h3\u003E\u003Cbr \/\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.totdownload.com\/feeds\/1721888282854504251\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.totdownload.com\/2014\/06\/design-patterns-explained.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4723248083833296548\/posts\/default\/1721888282854504251"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/4723248083833296548\/posts\/default\/1721888282854504251"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.totdownload.com\/2014\/06\/design-patterns-explained.html","title":"Design Patterns Explained"}],"author":[{"name":{"$t":"Beshoy Shockry"},"uri":{"$t":"https:\/\/plus.google.com\/104745121287985530425"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh5.googleusercontent.com\/-luMsF9z0MtY\/AAAAAAAAAAI\/AAAAAAAAADA\/0AWCMqJH3W4\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]}]}});
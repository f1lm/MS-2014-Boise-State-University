// Generated by CoffeeScript 1.7.1
(function() {
  var $, closest, debounce, matches, remove_lightbox;

  if (navigator.appVersion.indexOf("Win") === -1) {
    document.body.classList.add("nice_fonts");
  }

  if (navigator.appVersion.indexOf("Chrome") >= 0) {
    document.body.classList.add("enable_rainbow");
  }

  setTimeout((function(_this) {
    return function() {
      return document.querySelectorAll(".main")[0].classList.remove("obscured");
    };
  })(this), 10);

  $ = function(id) {
    return document.getElementById(id);
  };

  matches = function(el, selector) {
    return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);
  };

  debounce = function(fn, wait) {
    var timeout;
    timeout = null;
    return function() {
      if (timeout) {
        clearTimeout(timeout);
      }
      return timeout = setTimeout(function() {
        timeout = null;
        return fn();
      }, wait);
    };
  };

  window.addEventListener("scroll", debounce(function(e) {
    var a, anchors, before, current, current_i, h2, i, rect, _i, _ref;
    h2 = window.innerHeight / 3;
    anchors = document.querySelectorAll("div[id]:empty");
    current = anchors[0];
    current_i = 0;
    for (i = _i = anchors.length - 1; _i >= 0; i = _i += -1) {
      a = anchors[i];
      rect = a.getBoundingClientRect();
      if (rect.top < h2) {
        current = a;
        current_i = i;
        break;
      }
    }
    while (before = anchors[current_i - 1]) {
      if (before.getBoundingClientRect().top >= 0) {
        current = before;
        current_i -= 1;
      } else {

      }
      break;
    }
    document.querySelector(".primary_nav .active").classList.remove("active");
    return (_ref = document.body.querySelector(".primary_nav [data-name='" + current.id + "']")) != null ? _ref.classList.add("active") : void 0;
  }, 50));

  closest = function(el, selector) {
    while (true) {
      if (matches(el, selector)) {
        return el;
      }
      el = el.parentNode;
      if (el === document) {
        return null;
      }
    }
  };

  remove_lightbox = function(e) {
    document.body.classList.remove("show_lightbox");
    document.body.classList.remove("animate_lightbox");
    return e != null ? e.preventDefault() : void 0;
  };

  document.body.addEventListener("click", function(e) {
    var container, lua_btn, lua_code;
    if (matches(e.target, ".shroud") || matches(e.target, ".lightbox .close_btn")) {
      remove_lightbox(e);
      return;
    }
    lua_btn = closest(e.target, ".see_lua_btn");
    if (!lua_btn) {
      return;
    }
    container = closest(lua_btn, "[data-compiled_lua]");
    lua_code = container.dataset.compiled_lua;
    document.querySelector(".lightbox .lua_col").innerHTML = lua_code;
    document.body.classList.add("show_lightbox");
    document.querySelector(".shroud").scrollTop = 0;
    setTimeout(function() {
      return document.body.classList.add("animate_lightbox");
    }, 1);
    return e.preventDefault();
  });

  window.addEventListener("keydown", function(e) {
    if (e.keyCode === 27) {
      return remove_lightbox(e);
    }
  });

}).call(this);
